{
  "meta": {
    "index": 851,
    "hitid": "3X7837UUADS7RMMFF15ZIYCPXFL6JW",
    "workerid": "A1APYLD4DUK33J",
    "probid": "987A",
    "subid": "41792954"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string array gems size 6 = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" }",
      "code": "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare string color",
      "code": "string color ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare map from string to integer mp",
      "code": "map < string , int > mp ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let mp [ \" purple \" ] be 0",
      "code": "mp [ \" purple \" ] = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let mp [ \" green \" ] be 1",
      "code": "mp [ \" green \" ] = 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let mp [ \" blue \" ] be 2",
      "code": "mp [ \" blue \" ] = 2 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let mp [ \" orange \" ] be 3",
      "code": "mp [ \" orange \" ] = 3 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "let mp [ \" red \" ] be 4",
      "code": "mp [ \" red \" ] = 4 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "let mp [ \" yellow \" ] be 5",
      "code": "mp [ \" yellow \" ] = 5 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "declare integer array id size 6 = { 0 , 0 , 0 , 0 , 0 , 0 }",
      "code": "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 } ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "declare integers i , n , m",
      "code": "int i , n , m ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "ignore input from cin",
      "code": "cin . ignore ( ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "let m be 6 - n",
      "code": "m = 6 - n ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "let i be 0",
      "code": "i = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "while i is less than n",
      "code": "while ( i < n )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "read color",
      "code": "cin >> color ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "let id [ mp [ color ] ] be 1",
      "code": "id [ mp [ color ] ] = 1 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print m and newline",
      "code": "cout << m << endl ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if m is greater than 0",
      "code": "if ( m > 0 )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "let i be 0",
      "code": "i = 0 ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "while i is less than 6",
      "code": "while ( i < 6 )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if id [ i ] is 0 , print gems [ i ] and newline",
      "code": "if ( id [ i ] == 0 ) cout << gems [ i ] << endl ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;"
      ],
      "err_line": 10,
      "err_msg": "too many initializers for ‘int [6]’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cin . getline ( input ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool color ;"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘bool’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "map < int , int > mp ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "mp [ \" purple ' ] = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "mp [ \" green ' ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "mp [ \" blue ' ] = 2 ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "mp [ \" orange ' ] = 3 ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "mp [ \" red ' ] = 4 ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 12,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cin . ignore ( input ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "int m = 6 - n ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int i = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        10,
        13
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "cin . getline ( input ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        10,
        13,
        4
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "cin . getline ( input ) ;",
        "mp [ \" purple ' ] = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        10,
        13,
        9
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "cin . getline ( input ) ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        10,
        4
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "mp [ \" purple ' ] = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        10,
        4,
        13
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "mp [ \" purple ' ] = 0 ;",
        "cin . ignore ( input ) ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        10,
        4,
        9
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "mp [ \" purple ' ] = 0 ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        10,
        13
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "cin . ignore ( input ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        10,
        13,
        9
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "cin . ignore ( input ) ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        10,
        9
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "cin . getline ( input ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        13,
        4
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "cin . getline ( input ) ;",
        "mp [ \" purple ' ] = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        13,
        4,
        9
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "cin . getline ( input ) ;",
        "mp [ \" purple ' ] = 0 ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        13,
        9
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "cin . getline ( input ) ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "mp [ \" purple ' ] = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        4,
        13
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "mp [ \" purple ' ] = 0 ;",
        "cin . ignore ( input ) ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        4,
        13,
        9
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "mp [ \" purple ' ] = 0 ;",
        "cin . ignore ( input ) ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        4,
        9
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "mp [ \" purple ' ] = 0 ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "cin . ignore ( input ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        13,
        9
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "cin . ignore ( input ) ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "string gems [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "cin . getline ( input ) ;"
      ],
      "err_line": 10,
      "err_msg": "too many initializers for ‘int [6]’"
    },
    {
      "mod_line": [
        10,
        13,
        4
      ],
      "mod_code": [
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "cin . getline ( input ) ;",
        "mp [ \" purple ' ] = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        13,
        4,
        9
      ],
      "mod_code": [
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "cin . getline ( input ) ;",
        "mp [ \" purple ' ] = 0 ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        13,
        9
      ],
      "mod_code": [
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "cin . getline ( input ) ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "mp [ \" purple ' ] = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4,
        13
      ],
      "mod_code": [
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "mp [ \" purple ' ] = 0 ;",
        "cin . ignore ( input ) ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4,
        13,
        9
      ],
      "mod_code": [
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "mp [ \" purple ' ] = 0 ;",
        "cin . ignore ( input ) ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4,
        9
      ],
      "mod_code": [
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "mp [ \" purple ' ] = 0 ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "cin . ignore ( input ) ;"
      ],
      "err_line": 10,
      "err_msg": "too many initializers for ‘int [6]’"
    },
    {
      "mod_line": [
        10,
        13,
        9
      ],
      "mod_code": [
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "cin . ignore ( input ) ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "int id [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "cin . getline ( input ) ;",
        "mp [ \" purple ' ] = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        13,
        4,
        9
      ],
      "mod_code": [
        "cin . getline ( input ) ;",
        "mp [ \" purple ' ] = 0 ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "cin . getline ( input ) ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "mp [ \" purple ' ] = 0 ;",
        "cin . ignore ( input ) ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        13,
        9
      ],
      "mod_code": [
        "mp [ \" purple ' ] = 0 ;",
        "cin . ignore ( input ) ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "mp [ \" purple ' ] = 0 ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "cin . ignore ( input ) ;",
        "mp [ \" yellow ' ] = 5 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    }
  ]
}