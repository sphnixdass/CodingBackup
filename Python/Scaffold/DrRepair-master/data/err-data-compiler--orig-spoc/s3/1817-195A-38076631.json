{
  "meta": {
    "index": 1817,
    "hitid": "3ZXV7Q5FJBIG219K62RHP0C70UDFCS",
    "workerid": "AIWEXPJAU66D9",
    "probid": "195A",
    "subid": "38076631"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare ints a , b , c , l , r , mid and result",
      "code": "int a , b , c , l , r , mid , result ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read standard input to a , b and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set l to 0",
      "code": "l = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set the value of r to ( a * c ) / b rounded up",
      "code": "r = ceil ( ( ( float ) a * c ) / b ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "assign ( l + r ) / 2 to mid",
      "code": "mid = ( l + r ) / 2 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while l < = r",
      "code": "while ( l <= r )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if ( mid + c ) * b > = a * c",
      "code": "if ( ( mid + c ) * b >= a * c )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "assign the new value = mid to result",
      "code": "result = mid ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "change r to mid - 1",
      "code": "r = mid - 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "change l to mid + 1",
      "code": "l = mid + 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "assign ( l + r ) / 2 to mid",
      "code": "mid = ( l + r ) / 2 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print result",
      "code": "cout << result << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a , b , c , l , r , mid , mid ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mid’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "mid assign ( l + r ) / 2 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "mid assign ( l + r ) / 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        6,
        14,
        12
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "cout << result ;",
        "mid assign ( l + r ) / 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        6,
        14,
        12,
        8
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "cout << result ;",
        "mid assign ( l + r ) / 2 ;",
        "mid = mid ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        6,
        14,
        12,
        3
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "cout << result ;",
        "mid assign ( l + r ) / 2 ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        6,
        14,
        12,
        10
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "cout << result ;",
        "mid assign ( l + r ) / 2 ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        6,
        14,
        8,
        3
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "cout << result ;",
        "mid = mid ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        6,
        14,
        8,
        10
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "cout << result ;",
        "mid = mid ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        6,
        14,
        3
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "cout << result ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        6,
        14,
        3,
        10
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "cout << result ;",
        "int l = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        6,
        14,
        10
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "cout << result ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "mid assign ( l + r ) / 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        6,
        12,
        8
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "mid assign ( l + r ) / 2 ;",
        "mid = mid ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        6,
        12,
        8,
        3
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "mid assign ( l + r ) / 2 ;",
        "mid = mid ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        6,
        12,
        8,
        10
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "mid assign ( l + r ) / 2 ;",
        "mid = mid ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        6,
        12,
        3
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "mid assign ( l + r ) / 2 ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        6,
        12,
        3,
        10
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "mid assign ( l + r ) / 2 ;",
        "int l = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        6,
        12,
        10
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "mid assign ( l + r ) / 2 ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        6,
        8,
        3
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "mid = mid ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        6,
        8,
        3,
        10
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "mid = mid ;",
        "int l = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        6,
        8,
        10
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "mid = mid ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        6,
        3,
        10
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "int l = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "while ( l <= r ) ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "cout << result ;",
        "mid assign ( l + r ) / 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        14,
        12,
        8
      ],
      "mod_code": [
        "cout << result ;",
        "mid assign ( l + r ) / 2 ;",
        "mid = mid ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        14,
        12,
        8,
        3
      ],
      "mod_code": [
        "cout << result ;",
        "mid assign ( l + r ) / 2 ;",
        "mid = mid ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        14,
        12,
        8,
        10
      ],
      "mod_code": [
        "cout << result ;",
        "mid assign ( l + r ) / 2 ;",
        "mid = mid ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        14,
        12,
        3
      ],
      "mod_code": [
        "cout << result ;",
        "mid assign ( l + r ) / 2 ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        14,
        12,
        3,
        10
      ],
      "mod_code": [
        "cout << result ;",
        "mid assign ( l + r ) / 2 ;",
        "int l = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        14,
        12,
        10
      ],
      "mod_code": [
        "cout << result ;",
        "mid assign ( l + r ) / 2 ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        14,
        8,
        3
      ],
      "mod_code": [
        "cout << result ;",
        "mid = mid ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        14,
        8,
        3,
        10
      ],
      "mod_code": [
        "cout << result ;",
        "mid = mid ;",
        "int l = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        14,
        8,
        10
      ],
      "mod_code": [
        "cout << result ;",
        "mid = mid ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "cout << result ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        14,
        3,
        10
      ],
      "mod_code": [
        "cout << result ;",
        "int l = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "cout << result ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "mid assign ( l + r ) / 2 ;",
        "mid = mid ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        12,
        8,
        3
      ],
      "mod_code": [
        "mid assign ( l + r ) / 2 ;",
        "mid = mid ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        12,
        8,
        3,
        10
      ],
      "mod_code": [
        "mid assign ( l + r ) / 2 ;",
        "mid = mid ;",
        "int l = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        12,
        8,
        10
      ],
      "mod_code": [
        "mid assign ( l + r ) / 2 ;",
        "mid = mid ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "mid assign ( l + r ) / 2 ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        12,
        3,
        10
      ],
      "mod_code": [
        "mid assign ( l + r ) / 2 ;",
        "int l = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "mid assign ( l + r ) / 2 ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "mid = mid ;",
        "int l = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        8,
        3,
        10
      ],
      "mod_code": [
        "mid = mid ;",
        "int l = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "mid = mid ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘mid’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int l = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    }
  ]
}