{
  "meta": {
    "index": 732,
    "hitid": "3W1K7D6QSBB3XD8ETEPTH8M7UE6ZBS",
    "workerid": "AIWEXPJAU66D9",
    "probid": "764A",
    "subid": "48723372"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare new array of integers a with size 10005",
      "code": "int a [ 10005 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let n , m , z , i and cnt be new integers with value of cnt = 0",
      "code": "int n , m , z , i , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n , m and z",
      "code": "cin >> n >> m >> z ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer variable with name x and value = n * m",
      "code": "int x = n * m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i from 1 to z inclusive , change a [ i * n ] to 1",
      "code": "for ( i = 1 ; i * n <= z ; i ++ ) a [ i * n ] = 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "in a for loop , change i from 1 to z inclusive incrementing i",
      "code": "for ( int i = 1 ; i * m <= z ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if a [ i * m ] = 1 , increment cnt by one",
      "code": "if ( a [ i * m ] == 1 ) cnt ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print cnt to the standard output",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= z ; i ++ ) { a [ i * n ] ] = 1 ; }"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= z ; i ++ ) a [ i * n ] ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= z ; i ++ ) { a [ i * n ] ] = 1 ; }",
        "if ( a [ i * m ] == ' 1 ' ) cnt ++ ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        7,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= z ; i ++ ) { a [ i * n ] ] = 1 ; }",
        "if ( a [ i * m ] == ' 1 ' ) cnt ++ ;",
        "cout << cnt ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= z ; i ++ ) { a [ i * n ] ] = 1 ; }",
        "cout << cnt ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        9,
        5
      ],
      "mod_code": [
        "if ( a [ i * m ] == ' 1 ' ) cnt ++ ;",
        "cout << cnt ;",
        "for ( int i = 1 ; i <= z ; i ++ ) a [ i * n ] ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "if ( a [ i * m ] == ' 1 ' ) cnt ++ ;",
        "for ( int i = 1 ; i <= z ; i ++ ) a [ i * n ] ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "cout << cnt ;",
        "for ( int i = 1 ; i <= z ; i ++ ) a [ i * n ] ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘]’ token"
    }
  ]
}