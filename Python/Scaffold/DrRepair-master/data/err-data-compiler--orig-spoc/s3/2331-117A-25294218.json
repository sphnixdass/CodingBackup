{
  "meta": {
    "index": 2331,
    "hitid": "3NBFJK3IOHCNPQ2I7R6Q2L60P0ZOGP",
    "workerid": "AIWEXPJAU66D9",
    "probid": "117A",
    "subid": "25294218"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integers s , f and t",
      "code": "int s , f , t ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n and m",
      "code": "int n , m ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "F is a integer function with integer argument tt",
      "code": "int F ( int tt )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "if tt / ( m - 1 ) is even",
      "code": "if ( tt / ( m - 1 ) % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return tt % ( m - 1 ) + 1",
      "code": "return tt % ( m - 1 ) + 1 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return - ( m - tt % ( m - 1 ) )",
      "code": "return - ( m - tt % ( m - 1 ) ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "function work that returns integer",
      "code": "int work ( )",
      "indent": 0
    },
    {
      "line": 9,
      "text": "return 0if s = f",
      "code": "if ( s == f ) return 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if f is greater than s",
      "code": "if ( f > s )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if abs ( F ( t ) ) is greater than s & & F ( t ) is greater than 0",
      "code": "if ( abs ( F ( t ) ) > s && F ( t ) > 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s",
      "code": "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else if abs ( F ( t ) ) is greater than s & & F ( t ) is less than 0",
      "code": "else if ( abs ( F ( t ) ) > s && F ( t ) < 0 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "return abs ( F ( t ) ) - 1 + s - 1 + f - s",
      "code": "return abs ( F ( t ) ) - 1 + s - 1 + f - s ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else if abs ( F ( t ) ) < = s & & F ( t ) > 0",
      "code": "else if ( abs ( F ( t ) ) <= s && F ( t ) > 0 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "return f - F ( t )",
      "code": "return f - F ( t ) ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "return abs ( F ( t ) ) - 1 + s - 1 + f - s",
      "code": "return abs ( F ( t ) ) - 1 + s - 1 + f - s ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if abs ( F ( t ) ) < s & & F ( t ) < 0",
      "code": "if ( abs ( F ( t ) ) < s && F ( t ) < 0 )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "return 2 * ( m - 1 ) - ( s - abs ( F ( t ) ) ) + s - f",
      "code": "return 2 * ( m - 1 ) - ( s - abs ( F ( t ) ) ) + s - f ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else if abs ( F ( t ) ) is less than s & & F ( t ) is greater than 0",
      "code": "else if ( abs ( F ( t ) ) < s && F ( t ) > 0 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "return m - F ( t ) + m - s + s - f",
      "code": "return m - F ( t ) + m - s + s - f ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "else if abs ( F ( t ) ) > = s & & F ( t ) > 0",
      "code": "else if ( abs ( F ( t ) ) >= s && F ( t ) > 0 )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "return m - F ( t ) + m - s + s - f",
      "code": "return m - F ( t ) + m - s + s - f ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 27,
      "text": "return abs ( F ( t ) ) - f",
      "code": "return abs ( F ( t ) ) - f ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 31,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 33,
      "text": "read s , f and t",
      "code": "cin >> s >> f >> t ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "print the result of work ( ) + t and ' \\ n '",
      "code": "cout << work ( ) + t << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "return 0if ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;"
      ],
      "err_line": 21,
      "err_msg": "no matching function for call to ‘abs(int (*)(int))’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int F ( int tt argument )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘argument’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "return 0if ? s = f ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( abs ( F ( F ( t ) ) > s && F ( t ) > 0 )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else if ( abs ( F ( F ( t ) ) > s && F ( t ) < 0 )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "return f - F ( t ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 29,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "return 2 * ( m - 1 ) - ( s - abs ( F - abs ( t ) ) + s - f ) ;"
      ],
      "err_line": 21,
      "err_msg": "no matching function for call to ‘abs(int (*)(int))’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else if ( abs ( F ( F ( t ) ) < s && F ( t ) > 0 )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 28,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "cout << work ( work ( ) + t ) << ' \\n ' ;"
      ],
      "err_line": 34,
      "err_msg": "too many arguments to function ‘int work()’"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "return 0if ;",
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        14,
        20
      ],
      "mod_code": [
        "return 0if ;",
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        14,
        20,
        21
      ],
      "mod_code": [
        "return 0if ;",
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        14,
        20,
        12
      ],
      "mod_code": [
        "return 0if ;",
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        14,
        20,
        16
      ],
      "mod_code": [
        "return 0if ;",
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        14,
        21
      ],
      "mod_code": [
        "return 0if ;",
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        14,
        21,
        12
      ],
      "mod_code": [
        "return 0if ;",
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        14,
        21,
        16
      ],
      "mod_code": [
        "return 0if ;",
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        14,
        12
      ],
      "mod_code": [
        "return 0if ;",
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        14,
        12,
        16
      ],
      "mod_code": [
        "return 0if ;",
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        14,
        16
      ],
      "mod_code": [
        "return 0if ;",
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        20
      ],
      "mod_code": [
        "return 0if ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        20,
        21
      ],
      "mod_code": [
        "return 0if ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        20,
        21,
        12
      ],
      "mod_code": [
        "return 0if ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        20,
        21,
        16
      ],
      "mod_code": [
        "return 0if ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        20,
        12
      ],
      "mod_code": [
        "return 0if ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        20,
        12,
        16
      ],
      "mod_code": [
        "return 0if ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        20,
        16
      ],
      "mod_code": [
        "return 0if ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        21
      ],
      "mod_code": [
        "return 0if ;",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        21,
        12
      ],
      "mod_code": [
        "return 0if ;",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        21,
        12,
        16
      ],
      "mod_code": [
        "return 0if ;",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        21,
        16
      ],
      "mod_code": [
        "return 0if ;",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "return 0if ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        12,
        16
      ],
      "mod_code": [
        "return 0if ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "return 0if ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid suffix \"if\" on integer constant"
    },
    {
      "mod_line": [
        14,
        20,
        21
      ],
      "mod_code": [
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;"
      ],
      "err_line": 21,
      "err_msg": "no matching function for call to ‘abs(int (*)(int))’"
    },
    {
      "mod_line": [
        14,
        20,
        21,
        12
      ],
      "mod_code": [
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        20,
        21,
        16
      ],
      "mod_code": [
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        20,
        12
      ],
      "mod_code": [
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        20,
        12,
        16
      ],
      "mod_code": [
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        20,
        16
      ],
      "mod_code": [
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        21
      ],
      "mod_code": [
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;"
      ],
      "err_line": 21,
      "err_msg": "no matching function for call to ‘abs(int (*)(int))’"
    },
    {
      "mod_line": [
        14,
        21,
        12
      ],
      "mod_code": [
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        21,
        12,
        16
      ],
      "mod_code": [
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        21,
        16
      ],
      "mod_code": [
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        12,
        16
      ],
      "mod_code": [
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "return abs ( F ( t ) - 1 + s + s - f - s ) ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        21
      ],
      "mod_code": [
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;"
      ],
      "err_line": 21,
      "err_msg": "no matching function for call to ‘abs(int (*)(int))’"
    },
    {
      "mod_line": [
        20,
        21,
        12
      ],
      "mod_code": [
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        21,
        12,
        16
      ],
      "mod_code": [
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        21,
        16
      ],
      "mod_code": [
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        12
      ],
      "mod_code": [
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        12,
        16
      ],
      "mod_code": [
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        16
      ],
      "mod_code": [
        "if ( abs ( F ( t ) < s && F ( t ) < 0 ) )",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        21,
        12
      ],
      "mod_code": [
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        21,
        12,
        16
      ],
      "mod_code": [
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        21,
        16
      ],
      "mod_code": [
        "return 2 * ( m - 1 ) - ( s - abs ( F - t ) ) + s - f ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "return 2 * ( m - 1 ) - ( F ( t ) - s ) + f - s ) ;",
        "return f - F ( t ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}