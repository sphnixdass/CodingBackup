{
  "meta": {
    "index": 1006,
    "hitid": "3K2CEDRACBV3US3CEBQK90WKLHQMTQ",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "1000A",
    "subid": "42328167"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , i = int",
      "code": "int n , i ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "a = 201x201 char matrix",
      "code": "char a [ 201 ] [ 100 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 2n exclusive",
      "code": "for ( i = 0 ; i < 2 * n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a at i",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set a [ i ] [ strlen ( a [ i ] ) ] to ' / 0 '",
      "code": "a [ i ] [ strlen ( a [ i ] ) ] = ' \\0 ' ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "cou = 0 = int",
      "code": "int cou = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to n exl",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for j = 0 to n exl",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if a [ j ] = a [ n + 1 ] and a [ j ] [ 0 ] isn ' t 1",
      "code": "if ( strcmp ( a [ j ] , a [ n + i ] ) == 0 && a [ j ] [ 0 ] != ' 1 ' )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set a [ j ] [ 0 ] = ' 1 '",
      "code": "a [ j ] [ 0 ] = ' 1 ' ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "set a [ n + 1 ] [ 0 ] = ' 1 '",
      "code": "a [ n + i ] [ 0 ] = ' 1 ' ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "increment cou",
      "code": "cou ++ ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print n - cou",
      "code": "cout << ( n - cou ) << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "a [ i ] [ strlen ( a [ i ] ) ] = ' / ' ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int cou , 0 ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        11,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "a [ n + 1 ] [ 0 ] = ' 1 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        11,
        13,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "a [ n + 1 ] [ 0 ] = ' 1 ' ;",
        "int cou , 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        11,
        13,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "a [ n + 1 ] [ 0 ] = ' 1 ' ;",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        11,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "int cou , 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        11,
        8,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "int cou , 0 ;",
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        11,
        8,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "int cou , 0 ;",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        11,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        11,
        13,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        11,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "a [ n + 1 ] [ 0 ] = ' 1 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        13,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "a [ n + 1 ] [ 0 ] = ' 1 ' ;",
        "int cou , 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        13,
        8,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "a [ n + 1 ] [ 0 ] = ' 1 ' ;",
        "int cou , 0 ;",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        13,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "a [ n + 1 ] [ 0 ] = ' 1 ' ;",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "int cou , 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        8,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "int cou , 0 ;",
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        8,
        13,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "int cou , 0 ;",
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        8,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "int cou , 0 ;",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        13,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 2n ; i ++ )",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "invalid suffix \"n\" on integer constant"
    },
    {
      "mod_line": [
        11,
        13,
        8
      ],
      "mod_code": [
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "a [ n + 1 ] [ 0 ] = ' 1 ' ;",
        "int cou , 0 ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        11,
        13,
        8,
        2
      ],
      "mod_code": [
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "a [ n + 1 ] [ 0 ] = ' 1 ' ;",
        "int cou , 0 ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        2
      ],
      "mod_code": [
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "a [ n + 1 ] [ 0 ] = ' 1 ' ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "int cou , 0 ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        11,
        8,
        13
      ],
      "mod_code": [
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "int cou , 0 ;",
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        8,
        13,
        2
      ],
      "mod_code": [
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "int cou , 0 ;",
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;",
        "cin >> N ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        8,
        2
      ],
      "mod_code": [
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "int cou , 0 ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        13,
        2
      ],
      "mod_code": [
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;",
        "cin >> N ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "if ( a [ j ] == a [ n + 1 ] && a [ j ] [ 0 ] != 1 )",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        8
      ],
      "mod_code": [
        "a [ n + 1 ] [ 0 ] = ' 1 ' ;",
        "int cou , 0 ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        13,
        8,
        2
      ],
      "mod_code": [
        "a [ n + 1 ] [ 0 ] = ' 1 ' ;",
        "int cou , 0 ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "a [ n + 1 ] [ 0 ] = ' 1 ' ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "int cou , 0 ;",
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8,
        13,
        2
      ],
      "mod_code": [
        "int cou , 0 ;",
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;",
        "cin >> N ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "int cou , 0 ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "a [ n + 1 ] [ 0 ] = \" 1 ' ;",
        "cin >> N ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    }
  ]
}