{
  "meta": {
    "index": 1775,
    "hitid": "3A9LA2FRWS8OJVBLSOB46Y9UHREHXU",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "195A",
    "subid": "41439300"
  },
  "lines": [
    {
      "line": 0,
      "text": "create ints a , b , and c",
      "code": "int a , b , c ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare bool taking in int t and returning bool",
      "code": "bool ok ( int t )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "return the result of a * c < = b * c + t * b",
      "code": "return a * c <= b * c + t * b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare binarySearch",
      "code": "int binarySearch ( )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "make ints lo = 0 , med , and hi = 1e6",
      "code": "int lo = 0 , med , hi = 1e6 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while lo is less than hi",
      "code": "while ( lo < hi )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set med to ( lo + hi ) > > 1",
      "code": "med = ( ( lo + hi ) >> 1 ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if ok ( med ) is truthy",
      "code": "if ( ok ( med ) )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set hi to med",
      "code": "hi = med ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else do",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set lo to med + 1",
      "code": "lo = med + 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "return lo",
      "code": "return lo ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 16,
      "text": "read a , b , and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print the return value of binarySearch ( )",
      "code": "cout << binarySearch ( ) << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool bool t ( int t )"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "void binarySearch ( )"
      ],
      "err_line": 13,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool bool ( int t )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘int’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "void binarySearch ;"
      ],
      "err_line": 4,
      "err_msg": "variable or field ‘binarySearch’ declared void"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int lo = 0 , med , hi , hi ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "void binarySearch ( )"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        4,
        8
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "void binarySearch ( )",
        "if ( ! ok ( med ) )"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        5
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "void binarySearch ( )",
        "if ( ! ok ( med ) )",
        "int lo = 0 , med , hi , hi ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        13
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "void binarySearch ( )",
        "if ( ! ok ( med ) )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        7
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "void binarySearch ( )",
        "if ( ! ok ( med ) )",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "void binarySearch ( )",
        "int lo = 0 , med , hi , hi ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        13
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "void binarySearch ( )",
        "int lo = 0 , med , hi , hi ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        7
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "void binarySearch ( )",
        "int lo = 0 , med , hi , hi ;",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        4,
        13
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "void binarySearch ( )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        4,
        13,
        7
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "void binarySearch ( )",
        "do",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        4,
        7
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "void binarySearch ( )",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "if ( ! ok ( med ) )"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "if ( ! ok ( med ) )",
        "int lo = 0 , med , hi , hi ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        8,
        5,
        13
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "if ( ! ok ( med ) )",
        "int lo = 0 , med , hi , hi ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        8,
        5,
        7
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "if ( ! ok ( med ) )",
        "int lo = 0 , med , hi , hi ;",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        8,
        13
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "if ( ! ok ( med ) )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        7
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "if ( ! ok ( med ) )",
        "do",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        8,
        7
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "if ( ! ok ( med ) )",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "int lo = 0 , med , hi , hi ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        5,
        13
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "int lo = 0 , med , hi , hi ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        5,
        13,
        7
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "int lo = 0 , med , hi , hi ;",
        "do",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "int lo = 0 , med , hi , hi ;",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        13,
        7
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "do",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "bool bool t ( int t )",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘t’"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "void binarySearch ( )",
        "if ( ! ok ( med ) )"
      ],
      "err_line": 13,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8,
        5
      ],
      "mod_code": [
        "void binarySearch ( )",
        "if ( ! ok ( med ) )",
        "int lo = 0 , med , hi , hi ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        4,
        8,
        5,
        13
      ],
      "mod_code": [
        "void binarySearch ( )",
        "if ( ! ok ( med ) )",
        "int lo = 0 , med , hi , hi ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        4,
        8,
        5,
        7
      ],
      "mod_code": [
        "void binarySearch ( )",
        "if ( ! ok ( med ) )",
        "int lo = 0 , med , hi , hi ;",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        4,
        8,
        13
      ],
      "mod_code": [
        "void binarySearch ( )",
        "if ( ! ok ( med ) )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        8,
        13,
        7
      ],
      "mod_code": [
        "void binarySearch ( )",
        "if ( ! ok ( med ) )",
        "do",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        8,
        7
      ],
      "mod_code": [
        "void binarySearch ( )",
        "if ( ! ok ( med ) )",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 13,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "void binarySearch ( )",
        "int lo = 0 , med , hi , hi ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        4,
        5,
        13
      ],
      "mod_code": [
        "void binarySearch ( )",
        "int lo = 0 , med , hi , hi ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        4,
        5,
        13,
        7
      ],
      "mod_code": [
        "void binarySearch ( )",
        "int lo = 0 , med , hi , hi ;",
        "do",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "void binarySearch ( )",
        "int lo = 0 , med , hi , hi ;",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "void binarySearch ( )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        13,
        7
      ],
      "mod_code": [
        "void binarySearch ( )",
        "do",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "void binarySearch ( )",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 13,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "if ( ! ok ( med ) )",
        "int lo = 0 , med , hi , hi ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        8,
        5,
        13
      ],
      "mod_code": [
        "if ( ! ok ( med ) )",
        "int lo = 0 , med , hi , hi ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        8,
        5,
        13,
        7
      ],
      "mod_code": [
        "if ( ! ok ( med ) )",
        "int lo = 0 , med , hi , hi ;",
        "do",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        8,
        5,
        7
      ],
      "mod_code": [
        "if ( ! ok ( med ) )",
        "int lo = 0 , med , hi , hi ;",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "if ( ! ok ( med ) )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        13,
        7
      ],
      "mod_code": [
        "if ( ! ok ( med ) )",
        "do",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "int lo = 0 , med , hi , hi ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        5,
        13,
        7
      ],
      "mod_code": [
        "int lo = 0 , med , hi , hi ;",
        "do",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "int lo = 0 , med , hi , hi ;",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int hi’"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "do",
        "med = ( lo + hi ) > 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}