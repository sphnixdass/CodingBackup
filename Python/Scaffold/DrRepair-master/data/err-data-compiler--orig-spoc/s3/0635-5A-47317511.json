{
  "meta": {
    "index": 635,
    "hitid": "372AGES0I4Z18PPOOTNYK2B03YYRXI",
    "workerid": "AIWEXPJAU66D9",
    "probid": "5A",
    "subid": "47317511"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer MX with value 10005",
      "code": "const int MX = 10005 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create constant integer mod with value 1000000007",
      "code": "const int mod = 1000000007 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create constant long long inf = 1e18",
      "code": "const long long inf = 1e18 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "mp = map from string to integer",
      "code": "map < string , int > mp ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "n , m , i , j , k , x , y , z , tc and d = integers",
      "code": "int n , m , i , j , k , x , y , z , tc , d ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "ch = character",
      "code": "char ch ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "cnt and sm are integers = 0",
      "code": "int cnt = 0 , sm = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create strings s and st",
      "code": "string s , st ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "while can read line into s",
      "code": "while ( getline ( cin , s ) )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set st to empty string",
      "code": "st = \" \" ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if s [ 0 ] is equal to ' + '",
      "code": "if ( s [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "for i = 1 to length of s exclusive increase st by s [ i ]",
      "code": "for ( i = 1 ; i < s . size ( ) ; i ++ ) st += s [ i ] ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if mp [ st ] is false",
      "code": "if ( ! mp [ st ] )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "increase mp [ st ]",
      "code": "mp [ st ] ++ ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else if s [ 0 ] is equal to ' - '",
      "code": "else if ( s [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for i = 1 to length of s exclusive increase st by s [ i ]",
      "code": "for ( i = 1 ; i < s . size ( ) ; i ++ ) st += s [ i ] ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if mp [ st ] is true",
      "code": "if ( mp [ st ] )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "decrease cnt",
      "code": "cnt -- ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "decrease mp [ st ]",
      "code": "mp [ st ] -- ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 24,
      "text": "sz = size of s",
      "code": "int sz = s . size ( ) ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "loop through i from 0 while s [ i ] is not ' : '",
      "code": "for ( i = 0 ; s [ i ] != ' : ' ; i ++ )",
      "indent": 3
    },
    {
      "line": 26,
      "text": ";",
      "code": ";",
      "indent": 4
    },
    {
      "line": 27,
      "text": "decrease sz by i",
      "code": "sz -= i ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "decrement sz",
      "code": "sz -- ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "increase sm by ( sz * cnt )",
      "code": "sm += ( sz * cnt ) ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print sm and a new line",
      "code": "cout << sm << endl ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "sz = s . size ( ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘sz’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int n , m , i , j , k , x , y , z , z , d ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "string s create st ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 17,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "sm by ( sz * cnt ) ;"
      ],
      "err_line": 29,
      "err_msg": "expected ‘;’ before ‘by’"
    },
    {
      "mod_line": [
        9,
        24
      ],
      "mod_code": [
        "while ( cin >> s )",
        "sz = s . size ( ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘sz’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        24,
        25
      ],
      "mod_code": [
        "while ( cin >> s )",
        "sz = s . size ( ) ;",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "‘sz’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        24,
        25,
        5
      ],
      "mod_code": [
        "while ( cin >> s )",
        "sz = s . size ( ) ;",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "int n , m , i , j , k , x , y , z , z , d ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        9,
        24,
        25,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "sz = s . size ( ) ;",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        24,
        25,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "sz = s . size ( ) ;",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        9,
        24,
        5
      ],
      "mod_code": [
        "while ( cin >> s )",
        "sz = s . size ( ) ;",
        "int n , m , i , j , k , x , y , z , z , d ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        9,
        24,
        5,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "sz = s . size ( ) ;",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        24,
        5,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "sz = s . size ( ) ;",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        9,
        24,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "sz = s . size ( ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        24,
        11,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "sz = s . size ( ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "map < string = int > mp ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        24,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "sz = s . size ( ) ;",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        9,
        25,
        5
      ],
      "mod_code": [
        "while ( cin >> s )",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "int n , m , i , j , k , x , y , z , z , d ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        9,
        25,
        5,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        25,
        5,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        9,
        25,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        25,
        11,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "if ( s [ 0 ] == \" + ' )",
        "map < string = int > mp ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        25,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "while ( cin >> s )",
        "int n , m , i , j , k , x , y , z , z , d ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        9,
        5,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        11,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "if ( s [ 0 ] == \" + ' )",
        "map < string = int > mp ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        11,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "map < string = int > mp ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        24,
        25
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "‘sz’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        25,
        5
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "int n , m , i , j , k , x , y , z , z , d ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        24,
        25,
        5,
        11
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        24,
        25,
        5,
        3
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        24,
        25,
        11
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        24,
        25,
        11,
        3
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "if ( s [ 0 ] == \" + ' )",
        "map < string = int > mp ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        24,
        25,
        3
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        24,
        5
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "int n , m , i , j , k , x , y , z , z , d ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        24,
        5,
        11
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        24,
        5,
        11,
        3
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "if ( s [ 0 ] == \" + ' )",
        "map < string = int > mp ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        24,
        5,
        3
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        24,
        11
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        24,
        11,
        3
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "map < string = int > mp ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        24,
        3
      ],
      "mod_code": [
        "sz = s . size ( ) ;",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        25,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "int n , m , i , j , k , x , y , z , z , d ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        25,
        5,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        25,
        5,
        11,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "if ( s [ 0 ] == \" + ' )",
        "map < string = int > mp ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        25,
        5,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "int n , m , i , j , k , x , y , z , z , d ;",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        25,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        25,
        11,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "if ( s [ 0 ] == \" + ' )",
        "map < string = int > mp ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        25,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ )",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "int n , m , i , j , k , x , y , z , z , d ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        11,
        3
      ],
      "mod_code": [
        "int n , m , i , j , k , x , y , z , z , d ;",
        "if ( s [ 0 ] == \" + ' )",
        "map < string = int > mp ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "int n , m , i , j , k , x , y , z , z , d ;",
        "map < string = int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "map < string = int > mp ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    }
  ]
}