{
  "meta": {
    "index": 2165,
    "hitid": "39RRBHZ0AUVI6R6KYVGTIKGEWJPVZM",
    "workerid": "A1APYLD4DUK33J",
    "probid": "330A",
    "subid": "39226819"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers row , col",
      "code": "int row , col ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create 2d boolean array a with size 15 by 15 with a = { false }",
      "code": "bool a [ 15 ] [ 15 ] = { false } ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read row read col",
      "code": "cin >> row >> col ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integers coun , count with coun = 0 , count = 0",
      "code": "int coun = 0 , count = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create 2d character array arr with size 15 by 15",
      "code": "char arr [ 15 ] [ 15 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to row exclusive",
      "code": "for ( int i = 0 ; i < row ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = 0 to col exclusive , read arr [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < col ; j ++ ) { cin >> arr [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create integer res with res = 0",
      "code": "int res = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for w = 0 to row exclusive",
      "code": "for ( int w = 0 ; w < row ; w ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "create integer co with co = 0",
      "code": "int co = 0 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "for i = 0 to col exclusive",
      "code": "for ( int i = 0 ; i < col ; i ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if arr [ w ] [ i ] is ' . '",
      "code": "if ( arr [ w ] [ i ] == ' . ' )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increment co",
      "code": "co ++ ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "set a [ w ] [ i ] to true",
      "code": "a [ w ] [ i ] = true ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if co is col",
      "code": "if ( co == col )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increment res by col",
      "code": "res += col ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "for n = 0 to col exclusive , set a [ w ] [ n ] to false",
      "code": "for ( int n = 0 ; n < col ; n ++ ) { a [ w ] [ n ] = false ; }",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "for w = 0 to col exclusive",
      "code": "for ( int w = 0 ; w < col ; w ++ )",
      "indent": 1
    },
    {
      "line": 25,
      "text": "create integer co with co = 0",
      "code": "int co = 0 ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "for i = 0 to row exclusive",
      "code": "for ( int i = 0 ; i < row ; i ++ )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if arr [ i ] [ w ] is ' . '",
      "code": "if ( arr [ i ] [ w ] == ' . ' )",
      "indent": 3
    },
    {
      "line": 28,
      "text": "increment co",
      "code": "co ++ ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "if a [ i ] [ w ] is true , increment count",
      "code": "if ( a [ i ] [ w ] == true ) { count ++ ; }",
      "indent": 4
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 32,
      "text": "if co is row",
      "code": "if ( co == row )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "increment res by row",
      "code": "res += row ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "decrement res by count",
      "code": "res -= count ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "set count to 0",
      "code": "count = 0 ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 38,
      "text": "print res print newline",
      "code": "cout << res << endl ;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> row [ col ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int coun = 0 , count = 0 , count ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int count’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char arr [ 15 ] *= 15 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < row ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( w = 0 ; w < row ; w ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < col ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "a [ w ] [ j ] = true ;"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "for ( i = 0 ; i < row ; i ++ )"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        13,
        20
      ],
      "mod_code": [
        "if ( ! col )",
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        13,
        20,
        5
      ],
      "mod_code": [
        "if ( ! col )",
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "do",
        "char arr [ 15 ] *= 15 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        18,
        13,
        20,
        2
      ],
      "mod_code": [
        "if ( ! col )",
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "do",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        18,
        13,
        20,
        27
      ],
      "mod_code": [
        "if ( ! col )",
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "do",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        13,
        5
      ],
      "mod_code": [
        "if ( ! col )",
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "char arr [ 15 ] *= 15 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        18,
        13,
        5,
        2
      ],
      "mod_code": [
        "if ( ! col )",
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "char arr [ 15 ] *= 15 ;",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        18,
        13,
        5,
        27
      ],
      "mod_code": [
        "if ( ! col )",
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "char arr [ 15 ] *= 15 ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        18,
        13,
        2
      ],
      "mod_code": [
        "if ( ! col )",
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        18,
        13,
        2,
        27
      ],
      "mod_code": [
        "if ( ! col )",
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "bool a [ 15 ] = { false } = { false } ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        18,
        20
      ],
      "mod_code": [
        "if ( ! col )",
        "do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        20,
        5
      ],
      "mod_code": [
        "if ( ! col )",
        "do",
        "char arr [ 15 ] *= 15 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        18,
        20,
        5,
        2
      ],
      "mod_code": [
        "if ( ! col )",
        "do",
        "char arr [ 15 ] *= 15 ;",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        18,
        20,
        5,
        27
      ],
      "mod_code": [
        "if ( ! col )",
        "do",
        "char arr [ 15 ] *= 15 ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        18,
        20,
        2
      ],
      "mod_code": [
        "if ( ! col )",
        "do",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        18,
        20,
        2,
        27
      ],
      "mod_code": [
        "if ( ! col )",
        "do",
        "bool a [ 15 ] = { false } = { false } ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        18,
        20,
        27
      ],
      "mod_code": [
        "if ( ! col )",
        "do",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        5
      ],
      "mod_code": [
        "if ( ! col )",
        "char arr [ 15 ] *= 15 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        18,
        5,
        2
      ],
      "mod_code": [
        "if ( ! col )",
        "char arr [ 15 ] *= 15 ;",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        18,
        5,
        2,
        27
      ],
      "mod_code": [
        "if ( ! col )",
        "char arr [ 15 ] *= 15 ;",
        "bool a [ 15 ] = { false } = { false } ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        18,
        5,
        27
      ],
      "mod_code": [
        "if ( ! col )",
        "char arr [ 15 ] *= 15 ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        18,
        2
      ],
      "mod_code": [
        "if ( ! col )",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        18,
        2,
        27
      ],
      "mod_code": [
        "if ( ! col )",
        "bool a [ 15 ] = { false } = { false } ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        13,
        20
      ],
      "mod_code": [
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        20,
        5
      ],
      "mod_code": [
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "do",
        "char arr [ 15 ] *= 15 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        13,
        20,
        5,
        2
      ],
      "mod_code": [
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "do",
        "char arr [ 15 ] *= 15 ;",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        13,
        20,
        5,
        27
      ],
      "mod_code": [
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "do",
        "char arr [ 15 ] *= 15 ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        13,
        20,
        2
      ],
      "mod_code": [
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "do",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        13,
        20,
        2,
        27
      ],
      "mod_code": [
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "do",
        "bool a [ 15 ] = { false } = { false } ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        13,
        20,
        27
      ],
      "mod_code": [
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "do",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "char arr [ 15 ] *= 15 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        13,
        5,
        2
      ],
      "mod_code": [
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "char arr [ 15 ] *= 15 ;",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        13,
        5,
        2,
        27
      ],
      "mod_code": [
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "char arr [ 15 ] *= 15 ;",
        "bool a [ 15 ] = { false } = { false } ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        13,
        5,
        27
      ],
      "mod_code": [
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "char arr [ 15 ] *= 15 ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        13,
        2,
        27
      ],
      "mod_code": [
        "if ( ! arr [ w ] [ i ] == ' . ' )",
        "bool a [ 15 ] = { false } = { false } ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        20,
        5
      ],
      "mod_code": [
        "do",
        "char arr [ 15 ] *= 15 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        20,
        5,
        2
      ],
      "mod_code": [
        "do",
        "char arr [ 15 ] *= 15 ;",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        20,
        5,
        2,
        27
      ],
      "mod_code": [
        "do",
        "char arr [ 15 ] *= 15 ;",
        "bool a [ 15 ] = { false } = { false } ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        20,
        5,
        27
      ],
      "mod_code": [
        "do",
        "char arr [ 15 ] *= 15 ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        20,
        2
      ],
      "mod_code": [
        "do",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        20,
        2,
        27
      ],
      "mod_code": [
        "do",
        "bool a [ 15 ] = { false } = { false } ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        20,
        27
      ],
      "mod_code": [
        "do",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "char arr [ 15 ] *= 15 ;",
        "bool a [ 15 ] = { false } = { false } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        5,
        2,
        27
      ],
      "mod_code": [
        "char arr [ 15 ] *= 15 ;",
        "bool a [ 15 ] = { false } = { false } ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        5,
        27
      ],
      "mod_code": [
        "char arr [ 15 ] *= 15 ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        2,
        27
      ],
      "mod_code": [
        "bool a [ 15 ] = { false } = { false } ;",
        "if ( arr [ i ] [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    }
  ]
}