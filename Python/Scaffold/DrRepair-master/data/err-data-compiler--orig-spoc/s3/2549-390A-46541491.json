{
  "meta": {
    "index": 2549,
    "hitid": "3UOMW19E6D0O04GV0QE83OLUB0V5CV",
    "workerid": "AIWEXPJAU66D9",
    "probid": "390A",
    "subid": "46541491"
  },
  "lines": [
    {
      "line": 0,
      "text": "cnt = map from character to long long",
      "code": "map < char , long long > cnt ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare long longs disx and disy = 0",
      "code": "long long disx = 0 , disy = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare long long variable n",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read from the input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create long longs x and y",
      "code": "long long x , y ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let ax and ay be long long arrays with size 200",
      "code": "long long ax [ 200 ] , ay [ 200 ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set sizeof ( ax ) bytes at the pointer ax to 0",
      "code": "memset ( ax , 0 , sizeof ( ax ) ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set sizeof ( ay ) bytes at the pointer ay to 0",
      "code": "memset ( ay , 0 , sizeof ( ay ) ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i from 0 to n exclusive incrementing i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read x and y",
      "code": "cin >> x >> y ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if ax [ x ] is 0",
      "code": "if ( ax [ x ] == 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increment disx by one",
      "code": "disx ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "change ax [ x ] to 1",
      "code": "ax [ x ] = 1 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if ay [ y ] is 0",
      "code": "if ( ay [ y ] == 0 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increment disy",
      "code": "disy ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "assign 1 to ay [ y ]",
      "code": "ay [ y ] = 1 ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print min of disx and disy",
      "code": "cout << min ( disx , disy ) << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "{ cin >> n ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long x and y ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "memset ( ay , 0 ) ;"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "long long x and y ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        5,
        8
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "long long x and y ;",
        "memset ( ay , 0 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        5,
        8,
        7
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "long long x and y ;",
        "memset ( ay , 0 ) ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        5,
        8,
        11
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "long long x and y ;",
        "memset ( ay , 0 ) ;",
        "if ( ax [ x ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        5,
        8,
        15
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "long long x and y ;",
        "memset ( ay , 0 ) ;",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        5,
        7
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "long long x and y ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        5,
        7,
        11
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "long long x and y ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ax [ x ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        5,
        7,
        15
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "long long x and y ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        5,
        11
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "long long x and y ;",
        "if ( ax [ x ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        5,
        11,
        15
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "long long x and y ;",
        "if ( ax [ x ] == ' 0 ' )",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        5,
        15
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "long long x and y ;",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        8
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "memset ( ay , 0 ) ;"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        13,
        8,
        7
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "memset ( ay , 0 ) ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        8,
        7,
        11
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "memset ( ay , 0 ) ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ax [ x ] == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        8,
        7,
        15
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "memset ( ay , 0 ) ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        8,
        11
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "memset ( ay , 0 ) ;",
        "if ( ax [ x ] == ' 0 ' )"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        13,
        8,
        11,
        15
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "memset ( ay , 0 ) ;",
        "if ( ax [ x ] == ' 0 ' )",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        13,
        8,
        15
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "memset ( ay , 0 ) ;",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        7,
        11
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ax [ x ] == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        7,
        11,
        15
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ax [ x ] == ' 0 ' )",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        7,
        15
      ],
      "mod_code": [
        "ax [ ' x ' ] = 1 ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "long long x and y ;",
        "memset ( ay , 0 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        8,
        7
      ],
      "mod_code": [
        "long long x and y ;",
        "memset ( ay , 0 ) ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        8,
        7,
        11
      ],
      "mod_code": [
        "long long x and y ;",
        "memset ( ay , 0 ) ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ax [ x ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        8,
        7,
        15
      ],
      "mod_code": [
        "long long x and y ;",
        "memset ( ay , 0 ) ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        8,
        11
      ],
      "mod_code": [
        "long long x and y ;",
        "memset ( ay , 0 ) ;",
        "if ( ax [ x ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        8,
        11,
        15
      ],
      "mod_code": [
        "long long x and y ;",
        "memset ( ay , 0 ) ;",
        "if ( ax [ x ] == ' 0 ' )",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        8,
        15
      ],
      "mod_code": [
        "long long x and y ;",
        "memset ( ay , 0 ) ;",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "long long x and y ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        7,
        11
      ],
      "mod_code": [
        "long long x and y ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ax [ x ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        7,
        11,
        15
      ],
      "mod_code": [
        "long long x and y ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ax [ x ] == ' 0 ' )",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        7,
        15
      ],
      "mod_code": [
        "long long x and y ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "long long x and y ;",
        "if ( ax [ x ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        11,
        15
      ],
      "mod_code": [
        "long long x and y ;",
        "if ( ax [ x ] == ' 0 ' )",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        15
      ],
      "mod_code": [
        "long long x and y ;",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "memset ( ay , 0 ) ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        7,
        11
      ],
      "mod_code": [
        "memset ( ay , 0 ) ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ax [ x ] == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        7,
        11,
        15
      ],
      "mod_code": [
        "memset ( ay , 0 ) ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ax [ x ] == ' 0 ' )",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        7,
        15
      ],
      "mod_code": [
        "memset ( ay , 0 ) ;",
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "memset ( ay , 0 ) ;",
        "if ( ax [ x ] == ' 0 ' )"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        8,
        11,
        15
      ],
      "mod_code": [
        "memset ( ay , 0 ) ;",
        "if ( ax [ x ] == ' 0 ' )",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "memset ( ay , 0 ) ;",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ax [ x ] == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        11,
        15
      ],
      "mod_code": [
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ax [ x ] == ' 0 ' )",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "memset ( ax , 0 , sizeof ( ax ) ) ) ;",
        "if ( ay [ y ] == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}