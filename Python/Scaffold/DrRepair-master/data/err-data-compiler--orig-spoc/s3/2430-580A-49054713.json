{
  "meta": {
    "index": 2430,
    "hitid": "3XEDXEGFX3I7OV6IVXPUAC2BZ1Z0KO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "580A",
    "subid": "49054713"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers l , last , a , ret and mret where last = - 100 , and ret and mret = 0",
      "code": "int l , last = - 100 , a , ret = 0 , mret = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read input to l",
      "code": "cin >> l ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "decrement l and loop further , while l is not 0",
      "code": "while ( l -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read user input to a",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if a > = last",
      "code": "if ( a >= last )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment ret",
      "code": "++ ret ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if mret is less than ret , set mret to ret",
      "code": "if ( mret < ret ) mret = ret ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "change ret to 1",
      "code": "ret = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "assign the new value = a to last",
      "code": "last = a ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print mret if mret > ret , or ret otherwise ; then print ' \\ n '",
      "code": "cout << ( mret > ret ? mret : ret ) << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘last’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "ret to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << ( ( mret > ret ? mret : ret ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "if ( a = last )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        5,
        9
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "if ( a = last )",
        "ret to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        13,
        5,
        9,
        3
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "if ( a = last )",
        "ret to ;",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        5,
        9,
        7
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "if ( a = last )",
        "ret to ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        13,
        5,
        9,
        2
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "if ( a = last )",
        "ret to ;",
        "l >> l ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        13,
        5,
        3
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "if ( a = last )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        5,
        3,
        7
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "if ( a = last )",
        "while ( -- -- )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        5,
        3,
        2
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "if ( a = last )",
        "while ( -- -- )",
        "l >> l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        5,
        7
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "if ( a = last )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘last’"
    },
    {
      "mod_line": [
        13,
        5,
        7,
        2
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "if ( a = last )",
        "do",
        "l >> l ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘last’"
    },
    {
      "mod_line": [
        13,
        5,
        2
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "if ( a = last )",
        "l >> l ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "ret to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        13,
        9,
        3
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "ret to ;",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        9,
        3,
        7
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "ret to ;",
        "while ( -- -- )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        9,
        3,
        2
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "ret to ;",
        "while ( -- -- )",
        "l >> l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        9,
        7
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "ret to ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        13,
        9,
        7,
        2
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "ret to ;",
        "do",
        "l >> l ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        13,
        9,
        2
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "ret to ;",
        "l >> l ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        3,
        7
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "while ( -- -- )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        3,
        7,
        2
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "while ( -- -- )",
        "do",
        "l >> l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        3,
        2
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "while ( -- -- )",
        "l >> l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘last’"
    },
    {
      "mod_line": [
        13,
        7,
        2
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "do",
        "l >> l ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘last’"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "cout << ( mret > ret ? mret : ret ;",
        "l >> l ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "if ( a = last )",
        "ret to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        5,
        9,
        3
      ],
      "mod_code": [
        "if ( a = last )",
        "ret to ;",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        9,
        3,
        7
      ],
      "mod_code": [
        "if ( a = last )",
        "ret to ;",
        "while ( -- -- )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        9,
        3,
        2
      ],
      "mod_code": [
        "if ( a = last )",
        "ret to ;",
        "while ( -- -- )",
        "l >> l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        9,
        7
      ],
      "mod_code": [
        "if ( a = last )",
        "ret to ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        5,
        9,
        7,
        2
      ],
      "mod_code": [
        "if ( a = last )",
        "ret to ;",
        "do",
        "l >> l ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        5,
        9,
        2
      ],
      "mod_code": [
        "if ( a = last )",
        "ret to ;",
        "l >> l ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( a = last )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        3,
        7
      ],
      "mod_code": [
        "if ( a = last )",
        "while ( -- -- )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        3,
        7,
        2
      ],
      "mod_code": [
        "if ( a = last )",
        "while ( -- -- )",
        "do",
        "l >> l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        3,
        2
      ],
      "mod_code": [
        "if ( a = last )",
        "while ( -- -- )",
        "l >> l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( a = last )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘last’"
    },
    {
      "mod_line": [
        5,
        7,
        2
      ],
      "mod_code": [
        "if ( a = last )",
        "do",
        "l >> l ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘last’"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "ret to ;",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        3,
        7
      ],
      "mod_code": [
        "ret to ;",
        "while ( -- -- )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        3,
        7,
        2
      ],
      "mod_code": [
        "ret to ;",
        "while ( -- -- )",
        "do",
        "l >> l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        3,
        2
      ],
      "mod_code": [
        "ret to ;",
        "while ( -- -- )",
        "l >> l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "ret to ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        9,
        7,
        2
      ],
      "mod_code": [
        "ret to ;",
        "do",
        "l >> l ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "ret to ;",
        "l >> l ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "while ( -- -- )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        7,
        2
      ],
      "mod_code": [
        "while ( -- -- )",
        "do",
        "l >> l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "while ( -- -- )",
        "l >> l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "do",
        "l >> l ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘last’"
    }
  ]
}