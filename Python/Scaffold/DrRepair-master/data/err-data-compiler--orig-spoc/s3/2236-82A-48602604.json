{
  "meta": {
    "index": 2236,
    "hitid": "38F60IALAGB6REW5P63MB3P7IEN0TR",
    "workerid": "AIWEXPJAU66D9",
    "probid": "82A",
    "subid": "48602604"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new int variables n , sum = 0 , g = 0 , k and na = 0",
      "code": "int n , sum = 0 , g = 0 , k , na = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read standard input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n is greater than 5",
      "code": "if ( n > 5 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "in a for loop , change i from 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "assign 5 * pow ( 2 , i ) - 5 to k",
      "code": "k = 5 * pow ( 2 , i ) - 5 ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "if k is greater than n",
      "code": "if ( k > n )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "set g to i - 1",
      "code": "g = i - 1 ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "change n to n - ( 5 * ( pow ( 2 , g ) ) - 5 )",
      "code": "n = n - ( 5 * ( pow ( 2 , g ) ) - 5 ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if n < = 2 raised to the power of g",
      "code": "if ( n <= pow ( 2 , g ) )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" Sheldon \" to the standard output",
      "code": "cout << \" Sheldon \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else if n < = 2 * 2 raised to the power of g",
      "code": "else if ( n <= 2 * pow ( 2 , g ) )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" Leonard \" to the standard output",
      "code": "cout << \" Leonard \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else if n < = 3 * 2 raised to the power of g",
      "code": "else if ( n <= 3 * pow ( 2 , g ) )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" Penny \" to the standard output",
      "code": "cout << \" Penny \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else if n < = 4 * 2 int the power of g",
      "code": "else if ( n <= 4 * pow ( 2 , g ) )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" Rajesh \" to the standard output",
      "code": "cout << \" Rajesh \" << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if n < = 5 * 2 raised to the power of g , print \" Howard \" to the standard output",
      "code": "if ( n <= 5 * pow ( 2 , g ) ) { cout << \" Howard \" << endl ; }",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( n <= 2 ) { g ^= g ; }"
      ],
      "err_line": 15,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , sum = 0 , g = 0 , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 8,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n -= ( 5 * ( pow * 2 , g ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( n <= 2 ) { g = g - g ; }"
      ],
      "err_line": 15,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else if ( n <= 4 * 2 ) g ^= 2 ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "if ( n <= 2 ) { g ^= g ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        11,
        13,
        17
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "if ( n <= 2 ) { g ^= g ; }",
        "else if ( n <= 3 * 2 && n <= 3 )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        11,
        13,
        17,
        19
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "if ( n <= 2 ) { g ^= g ; }",
        "else if ( n <= 3 * 2 && n <= 3 )",
        "else if ( n <= 4 * 2 ) g ^= 2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        11,
        13,
        17,
        7
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "if ( n <= 2 ) { g ^= g ; }",
        "else if ( n <= 3 * 2 && n <= 3 )",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        19
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "if ( n <= 2 ) { g ^= g ; }",
        "else if ( n <= 4 * 2 ) g ^= 2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        11,
        13,
        19,
        7
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "if ( n <= 2 ) { g ^= g ; }",
        "else if ( n <= 4 * 2 ) g ^= 2 ;",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        7
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "if ( n <= 2 ) { g ^= g ; }",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        17
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "else if ( n <= 3 * 2 && n <= 3 )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        11,
        17,
        13
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "else if ( n <= 3 * 2 && n <= 3 )",
        "if ( n <= 2 ) { g = g - g ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        11,
        17,
        13,
        19
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "else if ( n <= 3 * 2 && n <= 3 )",
        "if ( n <= 2 ) { g = g - g ; }",
        "else if ( n <= 4 * 2 ) g ^= 2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        11,
        17,
        13,
        7
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "else if ( n <= 3 * 2 && n <= 3 )",
        "if ( n <= 2 ) { g = g - g ; }",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        17,
        19
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "else if ( n <= 3 * 2 && n <= 3 )",
        "else if ( n <= 4 * 2 ) g ^= 2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        11,
        17,
        19,
        7
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "else if ( n <= 3 * 2 && n <= 3 )",
        "else if ( n <= 4 * 2 ) g ^= 2 ;",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        17,
        7
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "else if ( n <= 3 * 2 && n <= 3 )",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "if ( n <= 2 ) { g = g - g ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        11,
        13,
        19
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "if ( n <= 2 ) { g = g - g ; }",
        "else if ( n <= 4 * 2 ) g ^= 2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        11,
        13,
        19,
        7
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "if ( n <= 2 ) { g = g - g ; }",
        "else if ( n <= 4 * 2 ) g ^= 2 ;",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        7
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "if ( n <= 2 ) { g = g - g ; }",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        19
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "else if ( n <= 4 * 2 ) g ^= 2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        11,
        19,
        7
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "else if ( n <= 4 * 2 ) g ^= 2 ;",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "n = n - ( 5 * ( pow * 2 , g ) ) ;",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17
      ],
      "mod_code": [
        "if ( n <= 2 ) { g ^= g ; }",
        "else if ( n <= 3 * 2 && n <= 3 )"
      ],
      "err_line": 15,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        17,
        19
      ],
      "mod_code": [
        "if ( n <= 2 ) { g ^= g ; }",
        "else if ( n <= 3 * 2 && n <= 3 )",
        "else if ( n <= 4 * 2 ) g ^= 2 ;"
      ],
      "err_line": 15,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        17,
        19,
        7
      ],
      "mod_code": [
        "if ( n <= 2 ) { g ^= g ; }",
        "else if ( n <= 3 * 2 && n <= 3 )",
        "else if ( n <= 4 * 2 ) g ^= 2 ;",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17,
        7
      ],
      "mod_code": [
        "if ( n <= 2 ) { g ^= g ; }",
        "else if ( n <= 3 * 2 && n <= 3 )",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19
      ],
      "mod_code": [
        "if ( n <= 2 ) { g ^= g ; }",
        "else if ( n <= 4 * 2 ) g ^= 2 ;"
      ],
      "err_line": 15,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        19,
        7
      ],
      "mod_code": [
        "if ( n <= 2 ) { g ^= g ; }",
        "else if ( n <= 4 * 2 ) g ^= 2 ;",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "if ( n <= 2 ) { g ^= g ; }",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        13
      ],
      "mod_code": [
        "else if ( n <= 3 * 2 && n <= 3 )",
        "if ( n <= 2 ) { g = g - g ; }"
      ],
      "err_line": 15,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        17,
        13,
        19
      ],
      "mod_code": [
        "else if ( n <= 3 * 2 && n <= 3 )",
        "if ( n <= 2 ) { g = g - g ; }",
        "else if ( n <= 4 * 2 ) g ^= 2 ;"
      ],
      "err_line": 15,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        17,
        13,
        19,
        7
      ],
      "mod_code": [
        "else if ( n <= 3 * 2 && n <= 3 )",
        "if ( n <= 2 ) { g = g - g ; }",
        "else if ( n <= 4 * 2 ) g ^= 2 ;",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        13,
        7
      ],
      "mod_code": [
        "else if ( n <= 3 * 2 && n <= 3 )",
        "if ( n <= 2 ) { g = g - g ; }",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        19
      ],
      "mod_code": [
        "else if ( n <= 3 * 2 && n <= 3 )",
        "else if ( n <= 4 * 2 ) g ^= 2 ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        17,
        19,
        7
      ],
      "mod_code": [
        "else if ( n <= 3 * 2 && n <= 3 )",
        "else if ( n <= 4 * 2 ) g ^= 2 ;",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        7
      ],
      "mod_code": [
        "else if ( n <= 3 * 2 && n <= 3 )",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19
      ],
      "mod_code": [
        "if ( n <= 2 ) { g = g - g ; }",
        "else if ( n <= 4 * 2 ) g ^= 2 ;"
      ],
      "err_line": 15,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        19,
        7
      ],
      "mod_code": [
        "if ( n <= 2 ) { g = g - g ; }",
        "else if ( n <= 4 * 2 ) g ^= 2 ;",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "if ( n <= 2 ) { g = g - g ; }",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        7
      ],
      "mod_code": [
        "else if ( n <= 4 * 2 ) g ^= 2 ;",
        "g = i - l ;"
      ],
      "err_line": 7,
      "err_msg": "‘l’ was not declared in this scope"
    }
  ]
}