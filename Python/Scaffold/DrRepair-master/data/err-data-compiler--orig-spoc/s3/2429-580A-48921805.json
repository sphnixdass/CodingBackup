{
  "meta": {
    "index": 2429,
    "hitid": "3VO4XFFP15G7H94XT1U0LDO76LWQ75",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "580A",
    "subid": "48921805"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "max = integer with 0",
      "code": "int max = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "count = integer with 0",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "arr = array of n integers",
      "code": "int arr [ n ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "Read n values into array arr",
      "code": "cin >> arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if i is equal to 0",
      "code": "if ( i == 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if count is greater than max , then set max to count",
      "code": "if ( count > max ) max = count ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if arr [ i ] is greater than or equal to arr [ i - 1 ]",
      "code": "if ( arr [ i ] >= arr [ i - 1 ] )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "if count is greater than max , then set max to count",
      "code": "if ( count > max ) max = count ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 16,
      "text": "set count to 1",
      "code": "count = 1 ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print max and a new line",
      "code": "cout << max << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "do",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        2,
        16
      ],
      "mod_code": [
        "do",
        "gets ( n ) ;",
        "int count = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        2,
        16,
        11
      ],
      "mod_code": [
        "do",
        "gets ( n ) ;",
        "int count = 1 ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        2,
        11
      ],
      "mod_code": [
        "do",
        "gets ( n ) ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "do",
        "int count = 1 ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        16,
        11
      ],
      "mod_code": [
        "do",
        "int count = 1 ;",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        11
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "gets ( n ) ;",
        "int count = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        16,
        11
      ],
      "mod_code": [
        "gets ( n ) ;",
        "int count = 1 ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "gets ( n ) ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        11
      ],
      "mod_code": [
        "int count = 1 ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}