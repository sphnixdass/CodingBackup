{
  "meta": {
    "index": 2388,
    "hitid": "37Y5RYYI0PZD94P13IN3ACGWPFWXSL",
    "workerid": "A1APYLD4DUK33J",
    "probid": "472A",
    "subid": "48579170"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers a , b",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create boolean flag with flag = 0",
      "code": "bool flag = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for a = 4 to n exclusive",
      "code": "for ( a = 4 ; a < n ; a ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 2 to a exclusive",
      "code": "for ( int j = 2 ; j < a ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a % j is 0",
      "code": "if ( a % j == 0 )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "set b to n - a",
      "code": "b = n - a ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "for k = 2 to b exclusive",
      "code": "for ( int k = 2 ; k < b ; k ++ )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if b % k is 0",
      "code": "if ( b % k == 0 )",
      "indent": 4
    },
    {
      "line": 17,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "break loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "print a print \" \" print b print newline",
      "code": "cout << a << \" \" << b << endl ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "flag = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( j = 2 ; j < a ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( k = 2 ; k < b ; k ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        14,
        18
      ],
      "mod_code": [
        "if ( ! a % j )",
        "b -= a ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        14,
        18,
        24
      ],
      "mod_code": [
        "if ( ! a % j )",
        "b -= a ;",
        "do",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        14,
        18,
        17
      ],
      "mod_code": [
        "if ( ! a % j )",
        "b -= a ;",
        "do",
        "int flag = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        14,
        18,
        16
      ],
      "mod_code": [
        "if ( ! a % j )",
        "b -= a ;",
        "do",
        "if ( ! b % k )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        14,
        24
      ],
      "mod_code": [
        "if ( ! a % j )",
        "b -= a ;",
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        14,
        24,
        17
      ],
      "mod_code": [
        "if ( ! a % j )",
        "b -= a ;",
        "do",
        "int flag = 1 ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        14,
        24,
        16
      ],
      "mod_code": [
        "if ( ! a % j )",
        "b -= a ;",
        "do",
        "if ( ! b % k )"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "if ( ! a % j )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        18,
        24
      ],
      "mod_code": [
        "if ( ! a % j )",
        "do",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        18,
        24,
        17
      ],
      "mod_code": [
        "if ( ! a % j )",
        "do",
        "do",
        "int flag = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        18,
        24,
        16
      ],
      "mod_code": [
        "if ( ! a % j )",
        "do",
        "do",
        "if ( ! b % k )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        18,
        17
      ],
      "mod_code": [
        "if ( ! a % j )",
        "do",
        "int flag = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        18,
        17,
        16
      ],
      "mod_code": [
        "if ( ! a % j )",
        "do",
        "int flag = 1 ;",
        "if ( ! b % k )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        18,
        16
      ],
      "mod_code": [
        "if ( ! a % j )",
        "do",
        "if ( ! b % k )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        24
      ],
      "mod_code": [
        "if ( ! a % j )",
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        24,
        17
      ],
      "mod_code": [
        "if ( ! a % j )",
        "do",
        "int flag = 1 ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        24,
        17,
        16
      ],
      "mod_code": [
        "if ( ! a % j )",
        "do",
        "int flag = 1 ;",
        "if ( ! b % k )"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        24,
        16
      ],
      "mod_code": [
        "if ( ! a % j )",
        "do",
        "if ( ! b % k )"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "b -= a ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18,
        24
      ],
      "mod_code": [
        "b -= a ;",
        "do",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18,
        24,
        17
      ],
      "mod_code": [
        "b -= a ;",
        "do",
        "do",
        "int flag = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18,
        24,
        16
      ],
      "mod_code": [
        "b -= a ;",
        "do",
        "do",
        "if ( ! b % k )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18,
        17
      ],
      "mod_code": [
        "b -= a ;",
        "do",
        "int flag = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18,
        17,
        16
      ],
      "mod_code": [
        "b -= a ;",
        "do",
        "int flag = 1 ;",
        "if ( ! b % k )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18,
        16
      ],
      "mod_code": [
        "b -= a ;",
        "do",
        "if ( ! b % k )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        24
      ],
      "mod_code": [
        "b -= a ;",
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        24,
        17
      ],
      "mod_code": [
        "b -= a ;",
        "do",
        "int flag = 1 ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        24,
        17,
        16
      ],
      "mod_code": [
        "b -= a ;",
        "do",
        "int flag = 1 ;",
        "if ( ! b % k )"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        24,
        16
      ],
      "mod_code": [
        "b -= a ;",
        "do",
        "if ( ! b % k )"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        24
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        24,
        17
      ],
      "mod_code": [
        "do",
        "do",
        "int flag = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        24,
        17,
        16
      ],
      "mod_code": [
        "do",
        "do",
        "int flag = 1 ;",
        "if ( ! b % k )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        24,
        16
      ],
      "mod_code": [
        "do",
        "do",
        "if ( ! b % k )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        17
      ],
      "mod_code": [
        "do",
        "int flag = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        17,
        16
      ],
      "mod_code": [
        "do",
        "int flag = 1 ;",
        "if ( ! b % k )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        16
      ],
      "mod_code": [
        "do",
        "if ( ! b % k )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        24,
        17
      ],
      "mod_code": [
        "do",
        "int flag = 1 ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        24,
        17,
        16
      ],
      "mod_code": [
        "do",
        "int flag = 1 ;",
        "if ( ! b % k )"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        24,
        16
      ],
      "mod_code": [
        "do",
        "if ( ! b % k )"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}