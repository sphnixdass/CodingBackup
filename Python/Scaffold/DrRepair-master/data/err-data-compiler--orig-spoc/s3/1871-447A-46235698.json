{
  "meta": {
    "index": 1871,
    "hitid": "30ZKOOGW2W01J7IEFPG5U3IPZH5A1G",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "447A",
    "subid": "46235698"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set integer n , p , i , j , k , x , ans to - 1",
      "code": "int n , p , i , j , k , x , ans = - 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read p , n",
      "code": "cin >> p >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create vector with boolean called used ( p , false )",
      "code": "vector < bool > used ( p , false ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for = 1 to less than or equal to n do the following",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if used [ x modulo p ] is true",
      "code": "if ( used [ x % p ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set ans to i",
      "code": "ans = i ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set used [ x modulo p ] to true",
      "code": "used [ x % p ] = true ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "output ans",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool used ( p , false ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "used [ x modulo p ] = true ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "int ans = i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        7,
        4
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "int ans = i ;",
        "for ( i = 1 ; j <= n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        7,
        4,
        3
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "int ans = i ;",
        "for ( i = 1 ; j <= n ; i ++ )",
        "bool used ( p , false ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        7,
        4,
        6
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "int ans = i ;",
        "for ( i = 1 ; j <= n ; i ++ )",
        "if ( ! used [ x % p ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        7,
        4,
        5
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "int ans = i ;",
        "for ( i = 1 ; j <= n ; i ++ )",
        "while ( cin >> x )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        7,
        3
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "int ans = i ;",
        "bool used ( p , false ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        7,
        3,
        6
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "int ans = i ;",
        "bool used ( p , false ) ;",
        "if ( ! used [ x % p ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        7,
        3,
        5
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "int ans = i ;",
        "bool used ( p , false ) ;",
        "while ( cin >> x )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        7,
        6
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "int ans = i ;",
        "if ( ! used [ x % p ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        7,
        6,
        5
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "int ans = i ;",
        "if ( ! used [ x % p ] )",
        "while ( cin >> x )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "int ans = i ;",
        "while ( cin >> x )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "for ( i = 1 ; j <= n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "for ( i = 1 ; j <= n ; i ++ )",
        "bool used ( p , false ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        4,
        3,
        6
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "for ( i = 1 ; j <= n ; i ++ )",
        "bool used ( p , false ) ;",
        "if ( ! used [ x % p ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        4,
        3,
        5
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "for ( i = 1 ; j <= n ; i ++ )",
        "bool used ( p , false ) ;",
        "while ( cin >> x )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        4,
        6
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "for ( i = 1 ; j <= n ; i ++ )",
        "if ( ! used [ x % p ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        5
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "for ( i = 1 ; j <= n ; i ++ )",
        "if ( ! used [ x % p ] )",
        "while ( cin >> x )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "for ( i = 1 ; j <= n ; i ++ )",
        "while ( cin >> x )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "bool used ( p , false ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        3,
        6
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "bool used ( p , false ) ;",
        "if ( ! used [ x % p ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        5
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "bool used ( p , false ) ;",
        "if ( ! used [ x % p ] )",
        "while ( cin >> x )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "bool used ( p , false ) ;",
        "while ( cin >> x )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "if ( ! used [ x % p ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "if ( ! used [ x % p ] )",
        "while ( cin >> x )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , p , i , j , k , x , ans , ans = - 1 ;",
        "while ( cin >> x )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        4,
        3
      ],
      "mod_code": [
        "int ans = i ;",
        "for ( i = 1 ; j <= n ; i ++ )",
        "bool used ( p , false ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        3,
        6
      ],
      "mod_code": [
        "int ans = i ;",
        "for ( i = 1 ; j <= n ; i ++ )",
        "bool used ( p , false ) ;",
        "if ( ! used [ x % p ] )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        3,
        5
      ],
      "mod_code": [
        "int ans = i ;",
        "for ( i = 1 ; j <= n ; i ++ )",
        "bool used ( p , false ) ;",
        "while ( cin >> x )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "int ans = i ;",
        "bool used ( p , false ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        3,
        6
      ],
      "mod_code": [
        "int ans = i ;",
        "bool used ( p , false ) ;",
        "if ( ! used [ x % p ] )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        3,
        6,
        5
      ],
      "mod_code": [
        "int ans = i ;",
        "bool used ( p , false ) ;",
        "if ( ! used [ x % p ] )",
        "while ( cin >> x )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        3,
        5
      ],
      "mod_code": [
        "int ans = i ;",
        "bool used ( p , false ) ;",
        "while ( cin >> x )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; j <= n ; i ++ )",
        "bool used ( p , false ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3,
        6
      ],
      "mod_code": [
        "for ( i = 1 ; j <= n ; i ++ )",
        "bool used ( p , false ) ;",
        "if ( ! used [ x % p ] )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3,
        6,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; j <= n ; i ++ )",
        "bool used ( p , false ) ;",
        "if ( ! used [ x % p ] )",
        "while ( cin >> x )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; j <= n ; i ++ )",
        "bool used ( p , false ) ;",
        "while ( cin >> x )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "bool used ( p , false ) ;",
        "if ( ! used [ x % p ] )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6,
        5
      ],
      "mod_code": [
        "bool used ( p , false ) ;",
        "if ( ! used [ x % p ] )",
        "while ( cin >> x )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "bool used ( p , false ) ;",
        "while ( cin >> x )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    }
  ]
}