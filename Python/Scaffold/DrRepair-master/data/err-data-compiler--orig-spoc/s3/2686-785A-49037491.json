{
  "meta": {
    "index": 2686,
    "hitid": "3VQTAXTYN3FMBEE4NRQL0G7SSWXUB4",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "785A",
    "subid": "49037491"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , hitung = integers with hitung = 0",
      "code": "int n , hitung = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "s = string",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "Read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if s [ 0 ] is equal to T",
      "code": "if ( s [ 0 ] == ' T ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set hitung to hitung + 4",
      "code": "hitung += 4 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if s [ 0 ] is equal to C",
      "code": "else if ( s [ 0 ] == ' C ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set hitung to hitung + 6",
      "code": "hitung += 6 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if s [ 0 ] is equal to O",
      "code": "else if ( s [ 0 ] == ' O ' )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set hitung to hitung + 8",
      "code": "hitung += 8 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if s [ 0 ] is equal to D",
      "code": "else if ( s [ 0 ] == ' D ' )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set hitung to hitung + 12",
      "code": "hitung += 12 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set hitung to hitung + 20",
      "code": "hitung += 20 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print hitung and a new line",
      "code": "cout << hitung << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )"
      ],
      "err_line": 10,
      "err_msg": "‘O’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "else if ( s [ 0 ] == O )"
      ],
      "err_line": 10,
      "err_msg": "‘O’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        10,
        5
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "else if ( s [ 0 ] == O )",
        "gets ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        10,
        5,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "else if ( s [ 0 ] == O )",
        "gets ( s ) ;",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        5,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "else if ( s [ 0 ] == O )",
        "gets ( s ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        10,
        5,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "else if ( s [ 0 ] == O )",
        "gets ( s ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "else if ( s [ 0 ] == O )",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        2,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "else if ( s [ 0 ] == O )",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        2,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "else if ( s [ 0 ] == O )",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "else if ( s [ 0 ] == O )",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "‘O’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        10,
        12,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "else if ( s [ 0 ] == O )",
        "else if ( s [ 0 ] == ' 0 ' )",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "‘O’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        10,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "else if ( s [ 0 ] == O )",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "‘O’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "gets ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        5,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "gets ( s ) ;",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "gets ( s ) ;",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "gets ( s ) ;",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "gets ( s ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        5,
        12,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "gets ( s ) ;",
        "else if ( s [ 0 ] == ' 0 ' )",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        5,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "gets ( s ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        12,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "gets ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        5,
        2
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "gets ( s ) ;",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        5,
        2,
        12
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "gets ( s ) ;",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        5,
        2,
        8
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "gets ( s ) ;",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        5,
        12
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "gets ( s ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        5,
        12,
        8
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "gets ( s ) ;",
        "else if ( s [ 0 ] == ' 0 ' )",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        5,
        8
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "gets ( s ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        2,
        12
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        2,
        12,
        8
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        2,
        8
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "‘O’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        12,
        8
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "else if ( s [ 0 ] == ' 0 ' )",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "‘O’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "else if ( s [ 0 ] == O )",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "‘O’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "gets ( s ) ;",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        2,
        12
      ],
      "mod_code": [
        "gets ( s ) ;",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        2,
        12,
        8
      ],
      "mod_code": [
        "gets ( s ) ;",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        2,
        8
      ],
      "mod_code": [
        "gets ( s ) ;",
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "gets ( s ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        12,
        8
      ],
      "mod_code": [
        "gets ( s ) ;",
        "else if ( s [ 0 ] == ' 0 ' )",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "gets ( s ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        12,
        8
      ],
      "mod_code": [
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "gets ( n ) ;",
        "else if ( s [ 0 ] == ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    }
  ]
}