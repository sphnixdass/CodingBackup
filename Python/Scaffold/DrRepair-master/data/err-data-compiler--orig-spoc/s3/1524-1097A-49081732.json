{
  "meta": {
    "index": 1524,
    "hitid": "3EHVO81VN5FGTUQSLVQXBP5TCCWH1Z",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "1097A",
    "subid": "49081732"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "ok = boolean false",
      "code": "bool ok = false ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 5 to n exclusive",
      "code": "for ( int i = 0 ; i < ( int ) ( 5 ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "t = string",
      "code": "string t ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "Read t",
      "code": "cin >> t ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if ( s [ 0 ] is t [ 0 ] OR s [ 1 ] is t [ 1 ] , then set ok = true",
      "code": "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) ok = true ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print YES if ok is true , if ok is false print NO and a new line",
      "code": "cout << ( ok ? \" YES \" : \" NO \" ) << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int i = 5 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char t ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( t ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        6
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        6,
        2
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( t ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        9,
        6,
        5
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( t ) ;",
        "char t ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        6,
        1
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( t ) ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        2
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        9,
        2,
        5
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( s ) ;",
        "char t ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        9,
        2,
        1
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( s ) ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        9,
        5
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "char t ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        5,
        1
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "char t ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        1
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "gets ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        2
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "gets ( t ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        6,
        2,
        5
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "gets ( t ) ;",
        "gets ( s ) ;",
        "char t ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        6,
        2,
        1
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "gets ( t ) ;",
        "gets ( s ) ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        6,
        5
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "gets ( t ) ;",
        "char t ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        5,
        1
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "gets ( t ) ;",
        "char t ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        1
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "gets ( t ) ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        2,
        5
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "gets ( s ) ;",
        "char t ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        2,
        5,
        1
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "gets ( s ) ;",
        "char t ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        2,
        1
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "gets ( s ) ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "char t ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        1
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "char t ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "for ( int i = 5 ; i < n ; i ++ )",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( t ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        6,
        2
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( t ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        6,
        2,
        5
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( t ) ;",
        "gets ( s ) ;",
        "char t ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        6,
        2,
        1
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( t ) ;",
        "gets ( s ) ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        5
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( t ) ;",
        "char t ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        5,
        1
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( t ) ;",
        "char t ;",
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        1
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( t ) ;",
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        2,
        5
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( s ) ;",
        "char t ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        2,
        5,
        1
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( s ) ;",
        "char t ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        2,
        1
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "gets ( s ) ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "char t ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        5,
        1
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "char t ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "cout << ( ok ? \" NO \" : \" NO \" ) << endl ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "gets ( t ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        5
      ],
      "mod_code": [
        "gets ( t ) ;",
        "gets ( s ) ;",
        "char t ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        5,
        1
      ],
      "mod_code": [
        "gets ( t ) ;",
        "gets ( s ) ;",
        "char t ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2,
        1
      ],
      "mod_code": [
        "gets ( t ) ;",
        "gets ( s ) ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "gets ( t ) ;",
        "char t ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        5,
        1
      ],
      "mod_code": [
        "gets ( t ) ;",
        "char t ;",
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "gets ( t ) ;",
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "gets ( s ) ;",
        "char t ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        1
      ],
      "mod_code": [
        "gets ( s ) ;",
        "char t ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( s ) ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "char t ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    }
  ]
}