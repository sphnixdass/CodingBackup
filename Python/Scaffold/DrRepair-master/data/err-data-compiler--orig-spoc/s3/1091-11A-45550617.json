{
  "meta": {
    "index": 1091,
    "hitid": "3SR6AEG6W5NDJ01VXKX6PCG3IVUYHY",
    "workerid": "AIWEXPJAU66D9",
    "probid": "11A",
    "subid": "45550617"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n and d",
      "code": "int n , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and d",
      "code": "cin >> n >> d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "integer pointer p pointed to new integer array of size n",
      "code": "int * p = new int [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n elemens into p",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> p [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integer prev with value p [ 0 ]",
      "code": "int prev = p [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set integer count to 0",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if p [ i ] is equal to prev",
      "code": "if ( p [ i ] == prev )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increase count by one",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "prev = p [ i ] + d",
      "code": "prev = p [ i ] + d ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if p [ i ] is less than prev",
      "code": "else if ( p [ i ] < prev )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "integer value = ( prev - p [ i ] ) + 1",
      "code": "int value = ( prev - p [ i ] ) + 1 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "c = integer",
      "code": "int c ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "if value % d is equal to 0",
      "code": "if ( value % d == 0 )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "c = value / d",
      "code": "c = value / d ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 17,
      "text": "set c to value / d + 1",
      "code": "c = value / d + 1 ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increase count by c",
      "code": "count += c ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "prev = p [ i ] + d * c",
      "code": "prev = p [ i ] + d * c ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 22,
      "text": "set value of prev to p [ i ]",
      "code": "prev = p [ i ] ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print count and ' \\ n '",
      "code": "cout << count << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n >> d )"
      ],
      "err_line": 4,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int p = new int [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘count’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "* prev = p [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        11,
        3
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "else if ( p [ i ] < ' prev ' )",
        "int p = new int [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        3,
        8
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "else if ( p [ i ] < ' prev ' )",
        "int p = new int [ n ] ;",
        "if ( p [ i ] == ' prev ' )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        3,
        22
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "else if ( p [ i ] < ' prev ' )",
        "int p = new int [ n ] ;",
        "* prev = p [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        3,
        21
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "else if ( p [ i ] < ' prev ' )",
        "int p = new int [ n ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        8,
        22
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "else if ( p [ i ] < ' prev ' )",
        "if ( p [ i ] == ' prev ' )",
        "* prev = p [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        11,
        8,
        21
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "else if ( p [ i ] < ' prev ' )",
        "if ( p [ i ] == ' prev ' )",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        11,
        22
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "else if ( p [ i ] < ' prev ' )",
        "* prev = p [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        11,
        22,
        21
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "else if ( p [ i ] < ' prev ' )",
        "* prev = p [ i ] ;",
        "do"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        11,
        21
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "else if ( p [ i ] < ' prev ' )",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "int p = new int [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        3,
        8
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "int p = new int [ n ] ;",
        "if ( p [ i ] == ' prev ' )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        3,
        8,
        22
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "int p = new int [ n ] ;",
        "if ( p [ i ] == ' prev ' )",
        "* prev = p [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        3,
        8,
        21
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "int p = new int [ n ] ;",
        "if ( p [ i ] == ' prev ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        3,
        22
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "int p = new int [ n ] ;",
        "* prev = p [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        3,
        22,
        21
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "int p = new int [ n ] ;",
        "* prev = p [ i ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        3,
        21
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "int p = new int [ n ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        8,
        22
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "if ( p [ i ] == ' prev ' )",
        "* prev = p [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        8,
        22,
        21
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "if ( p [ i ] == ' prev ' )",
        "* prev = p [ i ] ;",
        "do"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        8,
        21
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "if ( p [ i ] == ' prev ' )",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        22
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "* prev = p [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        22,
        21
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "* prev = p [ i ] ;",
        "do"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        21
      ],
      "mod_code": [
        "int prev = p [ i ] + d ;",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "else if ( p [ i ] < ' prev ' )",
        "int p = new int [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        3,
        8
      ],
      "mod_code": [
        "else if ( p [ i ] < ' prev ' )",
        "int p = new int [ n ] ;",
        "if ( p [ i ] == ' prev ' )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        3,
        8,
        22
      ],
      "mod_code": [
        "else if ( p [ i ] < ' prev ' )",
        "int p = new int [ n ] ;",
        "if ( p [ i ] == ' prev ' )",
        "* prev = p [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        3,
        8,
        21
      ],
      "mod_code": [
        "else if ( p [ i ] < ' prev ' )",
        "int p = new int [ n ] ;",
        "if ( p [ i ] == ' prev ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        3,
        22
      ],
      "mod_code": [
        "else if ( p [ i ] < ' prev ' )",
        "int p = new int [ n ] ;",
        "* prev = p [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        3,
        22,
        21
      ],
      "mod_code": [
        "else if ( p [ i ] < ' prev ' )",
        "int p = new int [ n ] ;",
        "* prev = p [ i ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        3,
        21
      ],
      "mod_code": [
        "else if ( p [ i ] < ' prev ' )",
        "int p = new int [ n ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        8,
        22
      ],
      "mod_code": [
        "else if ( p [ i ] < ' prev ' )",
        "if ( p [ i ] == ' prev ' )",
        "* prev = p [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        8,
        22,
        21
      ],
      "mod_code": [
        "else if ( p [ i ] < ' prev ' )",
        "if ( p [ i ] == ' prev ' )",
        "* prev = p [ i ] ;",
        "do"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        8,
        21
      ],
      "mod_code": [
        "else if ( p [ i ] < ' prev ' )",
        "if ( p [ i ] == ' prev ' )",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        22
      ],
      "mod_code": [
        "else if ( p [ i ] < ' prev ' )",
        "* prev = p [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        22,
        21
      ],
      "mod_code": [
        "else if ( p [ i ] < ' prev ' )",
        "* prev = p [ i ] ;",
        "do"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        21
      ],
      "mod_code": [
        "else if ( p [ i ] < ' prev ' )",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int p = new int [ n ] ;",
        "if ( p [ i ] == ' prev ' )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        22
      ],
      "mod_code": [
        "int p = new int [ n ] ;",
        "if ( p [ i ] == ' prev ' )",
        "* prev = p [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        22,
        21
      ],
      "mod_code": [
        "int p = new int [ n ] ;",
        "if ( p [ i ] == ' prev ' )",
        "* prev = p [ i ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        21
      ],
      "mod_code": [
        "int p = new int [ n ] ;",
        "if ( p [ i ] == ' prev ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "int p = new int [ n ] ;",
        "* prev = p [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        22,
        21
      ],
      "mod_code": [
        "int p = new int [ n ] ;",
        "* prev = p [ i ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        21
      ],
      "mod_code": [
        "int p = new int [ n ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        22
      ],
      "mod_code": [
        "if ( p [ i ] == ' prev ' )",
        "* prev = p [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        8,
        22,
        21
      ],
      "mod_code": [
        "if ( p [ i ] == ' prev ' )",
        "* prev = p [ i ] ;",
        "do"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        8,
        21
      ],
      "mod_code": [
        "if ( p [ i ] == ' prev ' )",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22,
        21
      ],
      "mod_code": [
        "* prev = p [ i ] ;",
        "do"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}