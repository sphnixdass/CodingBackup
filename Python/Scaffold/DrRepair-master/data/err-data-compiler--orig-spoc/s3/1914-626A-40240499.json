{
  "meta": {
    "index": 1914,
    "hitid": "3AXFSPQOYQS3AFFQGU83C4P2PROJF1",
    "workerid": "A1APYLD4DUK33J",
    "probid": "626A",
    "subid": "40240499"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer n , cnt , x , y , with cnt = 0",
      "code": "int n , cnt = 0 , x , y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n read s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 2 to n inclusive , increase i by 2",
      "code": "for ( int i = 2 ; i <= n ; i += 2 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to j + 1 is less than or equal to n , incrementing j",
      "code": "for ( int j = 0 ; j + i <= n ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set x to y to 0",
      "code": "x = y = 0 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "for k = 0 , jj = j , to k is less than i , incrementing k , incrementing jj",
      "code": "for ( int k = 0 , jj = j ; k < i ; k ++ , jj ++ )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if s [ jj ] is ' U '",
      "code": "if ( s [ jj ] == ' U ' )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "increment y",
      "code": "y ++ ;",
      "indent": 5
    },
    {
      "line": 10,
      "text": "else if s [ jj ] is ' D '",
      "code": "else if ( s [ jj ] == ' D ' )",
      "indent": 4
    },
    {
      "line": 11,
      "text": "decrement y",
      "code": "y -- ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "else if s [ jj ] is ' L '",
      "code": "else if ( s [ jj ] == ' L ' )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "decrement x",
      "code": "x -- ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 15,
      "text": "increment x",
      "code": "x ++ ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if x is 0 and y is 0 , increment cnt",
      "code": "if ( x == 0 && y == 0 ) cnt ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print cnt print newline",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i += 2 )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        5,
        7,
        14
      ],
      "mod_code": [
        "int n , cnt , x , y = 0 ;",
        "for ( int j = 0 ; j + 1 <= n ; j ++ )",
        "for ( int k = 0 , jj = j ; k < i ; jj ++ )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        5,
        14
      ],
      "mod_code": [
        "int n , cnt , x , y = 0 ;",
        "for ( int j = 0 ; j + 1 <= n ; j ++ )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        10
      ],
      "mod_code": [
        "int n , cnt , x , y = 0 ;",
        "for ( int j = 0 ; j + 1 <= n ; j ++ )",
        "do",
        "else if ( ! s [ jj ] == ' D ' )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        7
      ],
      "mod_code": [
        "int n , cnt , x , y = 0 ;",
        "for ( int j = 0 ; j + 1 <= n ; j ++ )",
        "do",
        "for ( int k = 0 , jj = j ; k < i ; jj ++ , jj ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        7,
        14
      ],
      "mod_code": [
        "int n , cnt , x , y = 0 ;",
        "for ( int k = 0 , jj = j ; k < i ; jj ++ )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        7,
        14,
        10
      ],
      "mod_code": [
        "int n , cnt , x , y = 0 ;",
        "for ( int k = 0 , jj = j ; k < i ; jj ++ )",
        "do",
        "else if ( ! s [ jj ] == ' D ' )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int n , cnt , x , y = 0 ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        14,
        10
      ],
      "mod_code": [
        "int n , cnt , x , y = 0 ;",
        "do",
        "else if ( ! s [ jj ] == ' D ' )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        14,
        10,
        7
      ],
      "mod_code": [
        "int n , cnt , x , y = 0 ;",
        "do",
        "else if ( ! s [ jj ] == ' D ' )",
        "for ( int k = 0 , jj = j ; k < i ; jj ++ , jj ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        14,
        7
      ],
      "mod_code": [
        "int n , cnt , x , y = 0 ;",
        "do",
        "for ( int k = 0 , jj = j ; k < i ; jj ++ , jj ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        7,
        14
      ],
      "mod_code": [
        "for ( int j = 0 ; j + 1 <= n ; j ++ )",
        "for ( int k = 0 , jj = j ; k < i ; jj ++ )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        7,
        14,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j + 1 <= n ; j ++ )",
        "for ( int k = 0 , jj = j ; k < i ; jj ++ )",
        "do",
        "else if ( ! s [ jj ] == ' D ' )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "for ( int j = 0 ; j + 1 <= n ; j ++ )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        14,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j + 1 <= n ; j ++ )",
        "do",
        "else if ( ! s [ jj ] == ' D ' )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        14,
        10,
        7
      ],
      "mod_code": [
        "for ( int j = 0 ; j + 1 <= n ; j ++ )",
        "do",
        "else if ( ! s [ jj ] == ' D ' )",
        "for ( int k = 0 , jj = j ; k < i ; jj ++ , jj ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        14,
        7
      ],
      "mod_code": [
        "for ( int j = 0 ; j + 1 <= n ; j ++ )",
        "do",
        "for ( int k = 0 , jj = j ; k < i ; jj ++ , jj ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "for ( int k = 0 , jj = j ; k < i ; jj ++ )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        14,
        10
      ],
      "mod_code": [
        "for ( int k = 0 , jj = j ; k < i ; jj ++ )",
        "do",
        "else if ( ! s [ jj ] == ' D ' )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "do",
        "else if ( ! s [ jj ] == ' D ' )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        10,
        7
      ],
      "mod_code": [
        "do",
        "else if ( ! s [ jj ] == ' D ' )",
        "for ( int k = 0 , jj = j ; k < i ; jj ++ , jj ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        7
      ],
      "mod_code": [
        "do",
        "for ( int k = 0 , jj = j ; k < i ; jj ++ , jj ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}