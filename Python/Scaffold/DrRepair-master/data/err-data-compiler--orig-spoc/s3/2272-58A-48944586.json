{
  "meta": {
    "index": 2272,
    "hitid": "3D0LPO3EABTNBHNI1XSW9LD4VJROY0",
    "workerid": "A28TIENUWLMMIP",
    "probid": "58A",
    "subid": "48944586"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while reading in s",
      "code": "while ( cin >> s )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let h , e , and o be booleans",
      "code": "bool h , e , o ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "let ll be an integer",
      "code": "int ll ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set h , e , ll , and o to 1",
      "code": "h = e = ll = o = 1 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "let ans be a string",
      "code": "string ans ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for i = 0 to i < s . size ( )",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s [ i ] is equal to ' h ' and h is true , add ' h ' to ans and set h to 0",
      "code": "if ( s [ i ] == ' h ' && h ) ans += ' h ' , h = 0 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if s [ i ] is equal to ' e ' and e is true and h is not true , add ' e ' to ans and set e to 0",
      "code": "if ( s [ i ] == ' e ' && e && ! h ) ans += ' e ' , e = 0 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if s [ i ] is equal to ' l ' and ll is less than or equal to 2 and e is not true , add ' l ' to ans and increment ll",
      "code": "if ( s [ i ] == ' l ' && ll <= 2 && ! e ) ans += ' l ' , ll ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if s [ i ] is equal to ' o ' and o is true and ll is equal to 3 , add ' o ' to ans and set o to 0",
      "code": "if ( s [ i ] == ' o ' && o && ll == 3 ) ans += ' o ' , o = 0 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if ans is equal to \" hello \"",
      "code": "if ( ans == \" hello \" )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "or else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool h , e , n ;"
      ],
      "err_line": 5,
      "err_msg": "‘o’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long h = 1 , e = 1 , ll = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘long long int h’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "char ans ;"
      ],
      "err_line": 13,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) ans ++ ;"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( s [ i ] == ' o ' && o && true && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        8,
        9
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        8,
        9,
        10
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        8,
        9,
        11
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        8,
        9,
        13
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        8,
        10
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        10,
        11
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        10,
        13
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        11
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        8,
        11,
        13
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 11,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        9,
        10
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        11
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        13
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        9,
        11
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        9,
        11,
        13
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        9,
        13
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        11
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        11,
        13
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        13
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        11,
        13
      ],
      "mod_code": [
        "h = e , e = 1 , ll = 1 ;",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 11,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        8,
        9,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        8,
        9,
        10,
        11
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        8,
        9,
        10,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        8,
        9,
        11
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        8,
        9,
        11,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        8,
        9,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        10,
        11
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        10,
        11,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        10,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        8,
        11,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' h ' && h ) ans += ' h ' ;",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 11,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        9,
        10,
        11
      ],
      "mod_code": [
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        9,
        10,
        11,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        9,
        10,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        9,
        11,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' e ' && e && h ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 9,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' l ' && ll <= 2 && e != ' l ' && e != ' l ' ) { ans ++ ; }",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 10,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' o ' && o && ll == 3 && ll == 3 ) ans = 0 ;",
        "if ( ans == \" [] \" )"
      ],
      "err_line": 11,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    }
  ]
}