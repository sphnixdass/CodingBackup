{
  "meta": {
    "index": 2302,
    "hitid": "3JGHED38EDLGQBVJKBBUYZR95UGY7J",
    "workerid": "A1AYVATMT88U1W",
    "probid": "696A",
    "subid": "23364696"
  },
  "lines": [
    {
      "line": 0,
      "text": "value = map from pair < long long , long long > to long long",
      "code": "map < pair < long long , long long > , long long > value ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let getPr be a function that accepts long long u , long long v and returns a long integer value",
      "code": "long long getPr ( long long u , long long v )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if u is equal to v , return u",
      "code": "if ( u == v ) return u ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if u is greater than v , return getPr ( u / 2 , v )",
      "code": "if ( u > v ) return getPr ( u / 2 , v ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if u is less than v , return getPr ( u , v / 2 )",
      "code": "if ( u < v ) return getPr ( u , v / 2 ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "let getAns be a function that accepts long long start , long long finish and returns a long integer value",
      "code": "long long getAns ( long long start , long long finish )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "if start is equal to finish , return 0",
      "code": "if ( start == finish ) return 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return the value of value [ make_pair ( start / 2 , start ) ] + getAns ( start / 2 , finish )",
      "code": "return value [ make_pair ( start / 2 , start ) ] + getAns ( start / 2 , finish ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "let setTree be a void function that accepts long long v , long long end , long long c",
      "code": "void setTree ( long long v , long long end , long long c )",
      "indent": 0
    },
    {
      "line": 11,
      "text": "if v is equal to end",
      "code": "if ( v == end )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return nothing",
      "code": "return ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "increment value [ make_pair ( v / 2 , v ) ] by c",
      "code": "value [ make_pair ( v / 2 , v ) ] += c ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "send v / 2 , end , c into setTree",
      "code": "setTree ( v / 2 , end , c ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 19,
      "text": "let q be a long integer",
      "code": "long long q ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read q",
      "code": "cin >> q ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for long integer i = 0 to q exclusive",
      "code": "for ( long long i = 0 ; i < q ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "let c be a character",
      "code": "char c ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if c is equal to 1",
      "code": "if ( c == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "let v , u , w be long integers",
      "code": "long long v , u , w ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "read u , v , w",
      "code": "cin >> u >> v >> w ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "the long integer value of pr = getPr ( u , v )",
      "code": "long long pr = getPr ( u , v ) ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "send u , pr , w into setTree",
      "code": "setTree ( u , pr , w ) ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "send v , pr , w into setTree",
      "code": "setTree ( v , pr , w ) ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 31,
      "text": "let v , u be long integers",
      "code": "long long v , u ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "read u , v",
      "code": "cin >> u >> v ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "the long integer value of pr = getPr ( u , v )",
      "code": "long long pr = getPr ( u , v ) ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "print getAns ( u , pr ) + getAns ( v , pr ) and newline",
      "code": "cout << getAns ( u , pr ) + getAns ( v , pr ) << endl ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "map < long long , long long > value ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "return nothing ;"
      ],
      "err_line": 12,
      "err_msg": "‘nothing’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "setTree . push_back ( v / 2 , end ) ;"
      ],
      "err_line": 15,
      "err_msg": "request for member ‘push_back’ in ‘setTree’, which is of non-class type ‘void(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "map < long long , long long , long long > value ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "return make_pair ( make_pair ( start / 2 , start ) ] + getAns ( start / 2 , finish ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "setTree . send ( v / 2 , end ) ;"
      ],
      "err_line": 15,
      "err_msg": "request for member ‘send’ in ‘setTree’, which is of non-class type ‘void(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "cout << cin >> q ;"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ and ‘long long int’)"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "char c ="
      ],
      "err_line": 23,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "gets ( c ) ;"
      ],
      "err_line": 23,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "setTree . send ( u , pr , w ) ;"
      ],
      "err_line": 28,
      "err_msg": "request for member ‘send’ in ‘setTree’, which is of non-class type ‘void(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "setTree . send ( v , pr , w ) ;"
      ],
      "err_line": 29,
      "err_msg": "request for member ‘send’ in ‘setTree’, which is of non-class type ‘void(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 36,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "while ( cin >> u >> v )"
      ],
      "err_line": 34,
      "err_msg": "‘pr’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "void setTree ( long long v , long long end , long long end )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        10,
        12
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "void setTree ( long long v , long long end , long long end )",
        "return nothing ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        10,
        12,
        15
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "void setTree ( long long v , long long end , long long end )",
        "return nothing ;",
        "setTree . push_back ( v / 2 , end ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        10,
        12,
        24
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "void setTree ( long long v , long long end , long long end )",
        "return nothing ;",
        "if ( c == 1 )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        10,
        12,
        14
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "void setTree ( long long v , long long end , long long end )",
        "return nothing ;",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        10,
        15
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "void setTree ( long long v , long long end , long long end )",
        "setTree . push_back ( v / 2 , end ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        10,
        15,
        24
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "void setTree ( long long v , long long end , long long end )",
        "setTree . push_back ( v / 2 , end ) ;",
        "if ( c == 1 )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        10,
        15,
        14
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "void setTree ( long long v , long long end , long long end )",
        "setTree . push_back ( v / 2 , end ) ;",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        10,
        24
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "void setTree ( long long v , long long end , long long end )",
        "if ( c == 1 )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        10,
        24,
        14
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "void setTree ( long long v , long long end , long long end )",
        "if ( c == 1 )",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        10,
        14
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "void setTree ( long long v , long long end , long long end )",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "return nothing ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        12,
        15
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "return nothing ;",
        "setTree . push_back ( v / 2 , end ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        12,
        15,
        24
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "return nothing ;",
        "setTree . push_back ( v / 2 , end ) ;",
        "if ( c == 1 )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        12,
        15,
        14
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "return nothing ;",
        "setTree . push_back ( v / 2 , end ) ;",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        12,
        24
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "return nothing ;",
        "if ( c == 1 )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        12,
        24,
        14
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "return nothing ;",
        "if ( c == 1 )",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        12,
        14
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "return nothing ;",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "setTree . push_back ( v / 2 , end ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        15,
        24
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "setTree . push_back ( v / 2 , end ) ;",
        "if ( c == 1 )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        15,
        24,
        14
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "setTree . push_back ( v / 2 , end ) ;",
        "if ( c == 1 )",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        15,
        14
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "setTree . push_back ( v / 2 , end ) ;",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        24
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "if ( c == 1 )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        24,
        14
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "if ( c == 1 )",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "map < long long , long long > value ;",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int>’ and ‘std::pair<long long int, long long int>’)"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "return nothing ;"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        10,
        12,
        15
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "return nothing ;",
        "setTree . push_back ( v / 2 , end ) ;"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        10,
        12,
        15,
        24
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "return nothing ;",
        "setTree . push_back ( v / 2 , end ) ;",
        "if ( c == 1 )"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        10,
        12,
        15,
        14
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "return nothing ;",
        "setTree . push_back ( v / 2 , end ) ;",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        10,
        12,
        24
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "return nothing ;",
        "if ( c == 1 )"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        10,
        12,
        24,
        14
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "return nothing ;",
        "if ( c == 1 )",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        10,
        12,
        14
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "return nothing ;",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "setTree . push_back ( v / 2 , end ) ;"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        10,
        15,
        24
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "setTree . push_back ( v / 2 , end ) ;",
        "if ( c == 1 )"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        10,
        15,
        24,
        14
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "setTree . push_back ( v / 2 , end ) ;",
        "if ( c == 1 )",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        10,
        15,
        14
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "setTree . push_back ( v / 2 , end ) ;",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        10,
        24
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "if ( c == 1 )"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        10,
        24,
        14
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "if ( c == 1 )",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "void setTree ( long long v , long long end , long long end )",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘long long int end’"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "return nothing ;",
        "setTree . push_back ( v / 2 , end ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘nothing’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        15,
        24
      ],
      "mod_code": [
        "return nothing ;",
        "setTree . push_back ( v / 2 , end ) ;",
        "if ( c == 1 )"
      ],
      "err_line": 12,
      "err_msg": "‘nothing’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        15,
        24,
        14
      ],
      "mod_code": [
        "return nothing ;",
        "setTree . push_back ( v / 2 , end ) ;",
        "if ( c == 1 )",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 12,
      "err_msg": "‘nothing’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        15,
        14
      ],
      "mod_code": [
        "return nothing ;",
        "setTree . push_back ( v / 2 , end ) ;",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 12,
      "err_msg": "‘nothing’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        24
      ],
      "mod_code": [
        "return nothing ;",
        "if ( c == 1 )"
      ],
      "err_line": 12,
      "err_msg": "‘nothing’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        24,
        14
      ],
      "mod_code": [
        "return nothing ;",
        "if ( c == 1 )",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 12,
      "err_msg": "‘nothing’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "return nothing ;",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 12,
      "err_msg": "‘nothing’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        24
      ],
      "mod_code": [
        "setTree . push_back ( v / 2 , end ) ;",
        "if ( c == 1 )"
      ],
      "err_line": 15,
      "err_msg": "request for member ‘push_back’ in ‘setTree’, which is of non-class type ‘void(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        15,
        24,
        14
      ],
      "mod_code": [
        "setTree . push_back ( v / 2 , end ) ;",
        "if ( c == 1 )",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 15,
      "err_msg": "request for member ‘push_back’ in ‘setTree’, which is of non-class type ‘void(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "setTree . push_back ( v / 2 , end ) ;",
        "value [ make_pair ( v / 2 , v ) ] ++ ;"
      ],
      "err_line": 15,
      "err_msg": "request for member ‘push_back’ in ‘setTree’, which is of non-class type ‘void(long long int, long long int, long long int)’"
    }
  ]
}