{
  "meta": {
    "index": 2788,
    "hitid": "3CESM1J3EIXTX6MEM0OE7O6XZBV6WS",
    "workerid": "A1AYVATMT88U1W",
    "probid": "454A",
    "subid": "47796680"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let x , i , m , n , j be integers with m = 1",
      "code": "int x , i , m = 1 , n , j ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "increment m by x / 2",
      "code": "m += ( x / 2 ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "n equals to m",
      "code": "n = m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 1 to x inclusive",
      "code": "for ( j = 1 ; j <= x ; j ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to x inclusive",
      "code": "for ( i = 1 ; i <= x ; i ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if i is greater than or equal to m and i is less than or equal to n ,",
      "code": "if ( i >= m && i <= n )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "print D",
      "code": "cout << \" D \" ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 10,
      "text": "print *",
      "code": "cout << \" * \" ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if j < ( x / 2 ) + 1 is true",
      "code": "if ( j < ( x / 2 ) + 1 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "decrement m by 1",
      "code": "m -- ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "increment n by 1",
      "code": "n ++ ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increment m by 1",
      "code": "m ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "decrement n by 1",
      "code": "n -- ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int n = m ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int x , i , m , n , j = 1 ;",
        "int n = m ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        4,
        13
      ],
      "mod_code": [
        "int x , i , m , n , j = 1 ;",
        "int n = m ;",
        "if ( ! j < ( x / 2 ) + 1 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        4,
        13,
        16
      ],
      "mod_code": [
        "int x , i , m , n , j = 1 ;",
        "int n = m ;",
        "if ( ! j < ( x / 2 ) + 1 )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        4,
        13,
        9
      ],
      "mod_code": [
        "int x , i , m , n , j = 1 ;",
        "int n = m ;",
        "if ( ! j < ( x / 2 ) + 1 )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        4,
        16
      ],
      "mod_code": [
        "int x , i , m , n , j = 1 ;",
        "int n = m ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        4,
        16,
        9
      ],
      "mod_code": [
        "int x , i , m , n , j = 1 ;",
        "int n = m ;",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        4,
        9
      ],
      "mod_code": [
        "int x , i , m , n , j = 1 ;",
        "int n = m ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        13,
        16
      ],
      "mod_code": [
        "int x , i , m , n , j = 1 ;",
        "if ( ! j < ( x / 2 ) + 1 )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        13,
        16,
        9
      ],
      "mod_code": [
        "int x , i , m , n , j = 1 ;",
        "if ( ! j < ( x / 2 ) + 1 )",
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        13,
        9
      ],
      "mod_code": [
        "int x , i , m , n , j = 1 ;",
        "if ( ! j < ( x / 2 ) + 1 )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int x , i , m , n , j = 1 ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        16,
        9
      ],
      "mod_code": [
        "int x , i , m , n , j = 1 ;",
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int x , i , m , n , j = 1 ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "int n = m ;",
        "int x , i , m , n = 1 , j ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        1,
        13
      ],
      "mod_code": [
        "int n = m ;",
        "int x , i , m , n = 1 , j ;",
        "if ( ! j < ( x / 2 ) + 1 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        1,
        13,
        16
      ],
      "mod_code": [
        "int n = m ;",
        "int x , i , m , n = 1 , j ;",
        "if ( ! j < ( x / 2 ) + 1 )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        1,
        13,
        9
      ],
      "mod_code": [
        "int n = m ;",
        "int x , i , m , n = 1 , j ;",
        "if ( ! j < ( x / 2 ) + 1 )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        1,
        16
      ],
      "mod_code": [
        "int n = m ;",
        "int x , i , m , n = 1 , j ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        1,
        16,
        9
      ],
      "mod_code": [
        "int n = m ;",
        "int x , i , m , n = 1 , j ;",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        1,
        9
      ],
      "mod_code": [
        "int n = m ;",
        "int x , i , m , n = 1 , j ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "int n = m ;",
        "if ( ! j < ( x / 2 ) + 1 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        13,
        16
      ],
      "mod_code": [
        "int n = m ;",
        "if ( ! j < ( x / 2 ) + 1 )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        13,
        16,
        9
      ],
      "mod_code": [
        "int n = m ;",
        "if ( ! j < ( x / 2 ) + 1 )",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        13,
        9
      ],
      "mod_code": [
        "int n = m ;",
        "if ( ! j < ( x / 2 ) + 1 )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "int n = m ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        16,
        9
      ],
      "mod_code": [
        "int n = m ;",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "int n = m ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        13,
        16
      ],
      "mod_code": [
        "int x , i , m , n = 1 , j ;",
        "if ( ! j < ( x / 2 ) + 1 )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        13,
        16,
        9
      ],
      "mod_code": [
        "int x , i , m , n = 1 , j ;",
        "if ( ! j < ( x / 2 ) + 1 )",
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        13,
        9
      ],
      "mod_code": [
        "int x , i , m , n = 1 , j ;",
        "if ( ! j < ( x / 2 ) + 1 )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int x , i , m , n = 1 , j ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        16,
        9
      ],
      "mod_code": [
        "int x , i , m , n = 1 , j ;",
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int x , i , m , n = 1 , j ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "if ( ! j < ( x / 2 ) + 1 )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        16,
        9
      ],
      "mod_code": [
        "if ( ! j < ( x / 2 ) + 1 )",
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "if ( ! j < ( x / 2 ) + 1 )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}