{
  "meta": {
    "index": 1515,
    "hitid": "39TX062QX1I9PN4MD3M2248KYMT3X6",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "1097A",
    "subid": "49052674"
  },
  "lines": [
    {
      "line": 0,
      "text": "set N to 1e4 + 7",
      "code": "const int N = 1e4 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set INF to 1e9 + 7",
      "code": "const int INF = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create strings s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create char ch1 and ch2",
      "code": "char ch1 , ch2 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "read ch1 , ch2",
      "code": "cin >> ch1 >> ch2 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to 5 inclusive",
      "code": "for ( int i = 1 ; i <= 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "id s [ 0 ] = ch1 or s [ 1 ] = ch2",
      "code": "if ( s [ 0 ] == ch1 || s [ 1 ] == ch2 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print YES and a newline",
      "code": "cout << \" YES\\n \" ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print NO and a newline",
      "code": "cout << \" NO\\n \" ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "break ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "for ( i = 1 ; i <= 5 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        6,
        2
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "break ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        8,
        6,
        2,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "break ;",
        "int ch1 , ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        8,
        6,
        2,
        7
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "break ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        8,
        6,
        2,
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "break ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        8,
        6,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "int ch1 , ch2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        6,
        3,
        7
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "int ch1 , ch2 ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        6,
        3,
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "int ch1 , ch2 ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        6,
        7
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        6,
        7,
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "s >> s ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        6,
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "break ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        8,
        2,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "break ;",
        "int ch1 , ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        8,
        2,
        3,
        7
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "break ;",
        "int ch1 , ch2 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        8,
        2,
        3,
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "break ;",
        "int ch1 , ch2 ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        8,
        2,
        7
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "break ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        8,
        2,
        7,
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "break ;",
        "s >> s ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        8,
        2,
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "break ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        8,
        3,
        7
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "int ch1 , ch2 ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        3,
        7,
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "int ch1 , ch2 ;",
        "s >> s ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        7,
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' ch1 ' || s [ 1 ] == ' ch2 ' )",
        "s >> s ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "break ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        6,
        2,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "break ;",
        "int ch1 , ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        6,
        2,
        3,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "break ;",
        "int ch1 , ch2 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        6,
        2,
        3,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "break ;",
        "int ch1 , ch2 ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        6,
        2,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "break ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        6,
        2,
        7,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "break ;",
        "s >> s ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        6,
        2,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "break ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "int ch1 , ch2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "int ch1 , ch2 ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3,
        7,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "int ch1 , ch2 ;",
        "s >> s ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "int ch1 , ch2 ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "s >> s ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "break ;",
        "int ch1 , ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "break ;",
        "int ch1 , ch2 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        5
      ],
      "mod_code": [
        "break ;",
        "int ch1 , ch2 ;",
        "s >> s ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "break ;",
        "int ch1 , ch2 ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "break ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        2,
        7,
        5
      ],
      "mod_code": [
        "break ;",
        "s >> s ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "break ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘break’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int ch1 , ch2 ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        7,
        5
      ],
      "mod_code": [
        "int ch1 , ch2 ;",
        "s >> s ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "ch1 >> ch1 >> ch2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}