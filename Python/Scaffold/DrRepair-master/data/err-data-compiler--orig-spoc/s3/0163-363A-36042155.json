{
  "meta": {
    "index": 163,
    "hitid": "31SIZS5W599HZSOC2FS6QUF77XMQR0",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "363A",
    "subid": "36042155"
  },
  "lines": [
    {
      "line": 0,
      "text": "mymap = int and string map",
      "code": "map < int , string > mymap ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "in function init",
      "code": "void init ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "set mymap [ 0 ] to \" O - | - OOOO \"",
      "code": "mymap [ 0 ] = \" O-|-OOOO \" ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set mymap [ 1 ] to \" O - | O - OOO \"",
      "code": "mymap [ 1 ] = \" O-|O-OOO \" ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set mymap [ 2 ] to \" O - | OO - OO \"",
      "code": "mymap [ 2 ] = \" O-|OO-OO \" ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set mymap [ 3 ] to \" O - | OOO - O \"",
      "code": "mymap [ 3 ] = \" O-|OOO-O \" ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set mymap [ 4 ] to \" O - | OOOO - \"",
      "code": "mymap [ 4 ] = \" O-|OOOO- \" ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set mymap [ 5 ] to \" - O | - OOOO \"",
      "code": "mymap [ 5 ] = \" -O|-OOOO \" ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set mymap [ 6 ] to \" - O | O - OOO \"",
      "code": "mymap [ 6 ] = \" -O|O-OOO \" ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set mymap [ 7 ] to \" - O | OO - OO \"",
      "code": "mymap [ 7 ] = \" -O|OO-OO \" ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set mymap [ 8 ] to \" - O | OOO - O \"",
      "code": "mymap [ 8 ] = \" -O|OOO-O \" ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set mymap [ 9 ] to \" - O | OOOO - \"",
      "code": "mymap [ 9 ] = \" -O|OOOO- \" ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 14,
      "text": "call init",
      "code": "init ( ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = length of s - 1 to 0 inclusive decrementing i print mymap [ s [ i ] - ' 0 ' ]",
      "code": "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) { cout << mymap [ s [ i ] - ' 0 ' ] << endl ; }",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "map < int , int > mymap ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "map < string , int > mymap ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<std::__cxx11::basic_string<char>, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "init ( )"
      ],
      "err_line": 1,
      "err_msg": "ISO C++ forbids declaration of ‘init’ with no type [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "return init ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "void value not ignored as it ought to be"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 17,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        3
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 1 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        4
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "mymap [ 2 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        5
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "mymap [ 3 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        9
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        4
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 2 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        4,
        5
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 2 ] = \" \\0 \" ;",
        "mymap [ 3 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        4,
        9
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 2 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        4,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 2 ] = \" \\0 \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        5
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 3 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        5,
        9
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 3 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        5,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 3 ] = \" \\0 \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        9
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        9,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 0 ] = \" \\0 \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 1 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        4
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "mymap [ 2 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        5
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "mymap [ 2 ] = \" \\0 \" ;",
        "mymap [ 3 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        9
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "mymap [ 2 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "mymap [ 2 ] = \" \\0 \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "mymap [ 3 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        9
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "mymap [ 3 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "mymap [ 3 ] = \" \\0 \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        9
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 1 ] = \" \\0 \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 2 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        5
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 2 ] = \" \\0 \" ;",
        "mymap [ 3 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        9
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 2 ] = \" \\0 \" ;",
        "mymap [ 3 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 2 ] = \" \\0 \" ;",
        "mymap [ 3 ] = \" \\0 \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        9
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 2 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        9,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 2 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 2 ] = \" \\0 \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 3 ] = \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        9
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 3 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 3 ] = \" \\0 \" ;",
        "mymap [ 7 ] = \" - \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 3 ] = \" \\0 \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 7 ] = \" - \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "mymap [ 7 ] = \" - \" ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "map < int , int > mymap ;",
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << mymap [ s [ i ] - ' 0 ' ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::mapped_type {aka int}’ [-fpermissive]"
    }
  ]
}