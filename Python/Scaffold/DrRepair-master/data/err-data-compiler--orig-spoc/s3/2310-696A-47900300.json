{
  "meta": {
    "index": 2310,
    "hitid": "3SNR5F7R92NF9QVO313XILP21YMIEJ",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "696A",
    "subid": "47900300"
  },
  "lines": [
    {
      "line": 0,
      "text": "q , ans = long long",
      "code": "long long q , ans ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "m = long long , long long pair , long long map",
      "code": "map < pair < long long , long long > , long long > m ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "in function depth taking long long x and returning long long",
      "code": "long long depth ( long long x )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "ret = long long with ret = 0",
      "code": "long long ret = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "loop while x",
      "code": "while ( x )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set x to x bitshift right by 1",
      "code": "x = ( x >> 1 ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment ret",
      "code": "ret ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return ret",
      "code": "return ret ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "in function lca taking long long a , long long b and returning long long",
      "code": "long long lca ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 11,
      "text": "if a is b return a",
      "code": "if ( a == b ) return a ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "loop while a is not b",
      "code": "while ( a != b )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if depth of a > depth of b",
      "code": "if ( depth ( a ) > depth ( b ) )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "t = long long with t = a",
      "code": "long long t = a ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set a to b",
      "code": "a = b ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "set b to t",
      "code": "b = t ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set b to b / 2",
      "code": "b /= 2 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "return a",
      "code": "return a ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 22,
      "text": "in function add taking long long a , long long b , long long c",
      "code": "void add ( long long a , long long b , long long c )",
      "indent": 0
    },
    {
      "line": 23,
      "text": "loop while a is not b",
      "code": "while ( a != b )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "increment m [ { a , a / 2 } ] by c",
      "code": "m [ { a , a / 2 } ] += c ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "set a to a / 2",
      "code": "a /= 2 ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 28,
      "text": "in function dis taking long long a , long long b and returning long long",
      "code": "long long dis ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 29,
      "text": "ret = long long with ret = 0",
      "code": "long long ret = 0 ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "loop while a is not b",
      "code": "while ( a != b )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "increment ret by m [ { b , b / 2 } ]",
      "code": "ret += m [ { b , b / 2 } ] ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "set b to b / 2",
      "code": "b /= 2 ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "return ret",
      "code": "return ret ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 37,
      "text": "read q",
      "code": "cin >> q ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "loop q times",
      "code": "while ( q -- )",
      "indent": 1
    },
    {
      "line": 39,
      "text": "a , b , c , d = long long",
      "code": "long long a , b , c , d ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "set ans to 0",
      "code": "ans = 0 ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "if a is 1",
      "code": "if ( a == 1 )",
      "indent": 2
    },
    {
      "line": 43,
      "text": "read b then c then d",
      "code": "cin >> b >> c >> d ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "anc = long long with anc = lca of b , c",
      "code": "long long anc = lca ( b , c ) ;",
      "indent": 3
    },
    {
      "line": 45,
      "text": "call add of b , anc , d",
      "code": "add ( b , anc , d ) ;",
      "indent": 3
    },
    {
      "line": 46,
      "text": "call add of c , anc , d",
      "code": "add ( c , anc , d ) ;",
      "indent": 3
    },
    {
      "line": 47,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 48,
      "text": "read b then c",
      "code": "cin >> b >> c ;",
      "indent": 3
    },
    {
      "line": 49,
      "text": "anc = long long with anc = lca of b , c",
      "code": "long long anc = lca ( b , c ) ;",
      "indent": 3
    },
    {
      "line": 50,
      "text": "increment ans by dis of anc , b + dis of anc , c",
      "code": "ans += dis ( anc , b ) + dis ( anc , c ) ;",
      "indent": 3
    },
    {
      "line": 51,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 3
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "map < long long , long long > m , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "ans += dis ( anc , b + dis ) , c ++ ;"
      ],
      "err_line": 50,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "map < long long , long long , long long > m ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<long long int, long long int, long long int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long long depth ( const long x )"
      ],
      "err_line": 5,
      "err_msg": "assignment of read-only parameter ‘x’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘ret’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "long long lca ( long long a , const long long b )"
      ],
      "err_line": 16,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "void add ( long long a , long long b , long long b )"
      ],
      "err_line": 22,
      "err_msg": "redefinition of ‘long long int b’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "m [ { a , a / 2 } ] ] += c ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "cout << cin >> q ;"
      ],
      "err_line": 37,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ and ‘long long int’)"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 41,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "long long anc = lca ( b ) , c ;"
      ],
      "err_line": 44,
      "err_msg": "too few arguments to function ‘long long int lca(long long int, long long int)’"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "add ( b , anc ) ;"
      ],
      "err_line": 45,
      "err_msg": "too few arguments to function ‘void add(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "add ( c , anc ) ;"
      ],
      "err_line": 46,
      "err_msg": "too few arguments to function ‘void add(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        47
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 53,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "long long anc = lca ( b ) , c ;"
      ],
      "err_line": 49,
      "err_msg": "too few arguments to function ‘long long int lca(long long int, long long int)’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "if ( a )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        13,
        50
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "if ( a )",
        "ans += dis ( anc , b + dis ) , c ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        13,
        50,
        48
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "if ( a )",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cin >> b >> b ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        13,
        50,
        28
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "if ( a )",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        13,
        50,
        51
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "if ( a )",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        13,
        48
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "if ( a )",
        "cin >> b >> b ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        13,
        48,
        28
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "if ( a )",
        "cin >> b >> b ;",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        13,
        48,
        51
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "if ( a )",
        "cin >> b >> b ;",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        13,
        28
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "if ( a )",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        13,
        28,
        51
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "if ( a )",
        "long long dis ( long long a , const long long b )",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        13,
        51
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "if ( a )",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        50
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "ans += dis ( anc , b + dis ) , c ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        50,
        48
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cin >> b >> b ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        50,
        48,
        28
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cin >> b >> b ;",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        50,
        48,
        51
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cin >> b >> b ;",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        50,
        28
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        50,
        28,
        51
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "long long dis ( long long a , const long long b )",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        50,
        51
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        48
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "cin >> b >> b ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        48,
        28
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "cin >> b >> b ;",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        48,
        28,
        51
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "cin >> b >> b ;",
        "long long dis ( long long a , const long long b )",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        48,
        51
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "cin >> b >> b ;",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        28
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        28,
        51
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "long long dis ( long long a , const long long b )",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        1,
        51
      ],
      "mod_code": [
        "map < long long , long long > m , m ;",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::map<long long int, long long int> m’"
    },
    {
      "mod_line": [
        13,
        50
      ],
      "mod_code": [
        "if ( a )",
        "ans += dis ( anc , b + dis ) , c ++ ;"
      ],
      "err_line": 50,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        50,
        48
      ],
      "mod_code": [
        "if ( a )",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cin >> b >> b ;"
      ],
      "err_line": 50,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        50,
        48,
        28
      ],
      "mod_code": [
        "if ( a )",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cin >> b >> b ;",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        13,
        50,
        48,
        51
      ],
      "mod_code": [
        "if ( a )",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cin >> b >> b ;",
        "cout << ans ;"
      ],
      "err_line": 50,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        50,
        28
      ],
      "mod_code": [
        "if ( a )",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        13,
        50,
        28,
        51
      ],
      "mod_code": [
        "if ( a )",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "long long dis ( long long a , const long long b )",
        "cout << ans ;"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        13,
        50,
        51
      ],
      "mod_code": [
        "if ( a )",
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cout << ans ;"
      ],
      "err_line": 50,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        48,
        28
      ],
      "mod_code": [
        "if ( a )",
        "cin >> b >> b ;",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        13,
        48,
        28,
        51
      ],
      "mod_code": [
        "if ( a )",
        "cin >> b >> b ;",
        "long long dis ( long long a , const long long b )",
        "cout << ans ;"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        13,
        28
      ],
      "mod_code": [
        "if ( a )",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        13,
        28,
        51
      ],
      "mod_code": [
        "if ( a )",
        "long long dis ( long long a , const long long b )",
        "cout << ans ;"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        50,
        48
      ],
      "mod_code": [
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cin >> b >> b ;"
      ],
      "err_line": 50,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        50,
        48,
        28
      ],
      "mod_code": [
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cin >> b >> b ;",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        50,
        48,
        28,
        51
      ],
      "mod_code": [
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cin >> b >> b ;",
        "long long dis ( long long a , const long long b )",
        "cout << ans ;"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        50,
        48,
        51
      ],
      "mod_code": [
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cin >> b >> b ;",
        "cout << ans ;"
      ],
      "err_line": 50,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        50,
        28
      ],
      "mod_code": [
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        50,
        28,
        51
      ],
      "mod_code": [
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "long long dis ( long long a , const long long b )",
        "cout << ans ;"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        50,
        51
      ],
      "mod_code": [
        "ans += dis ( anc , b + dis ) , c ++ ;",
        "cout << ans ;"
      ],
      "err_line": 50,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        48,
        28
      ],
      "mod_code": [
        "cin >> b >> b ;",
        "long long dis ( long long a , const long long b )"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        48,
        28,
        51
      ],
      "mod_code": [
        "cin >> b >> b ;",
        "long long dis ( long long a , const long long b )",
        "cout << ans ;"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    },
    {
      "mod_line": [
        28,
        51
      ],
      "mod_code": [
        "long long dis ( long long a , const long long b )",
        "cout << ans ;"
      ],
      "err_line": 32,
      "err_msg": "assignment of read-only parameter ‘b’"
    }
  ]
}