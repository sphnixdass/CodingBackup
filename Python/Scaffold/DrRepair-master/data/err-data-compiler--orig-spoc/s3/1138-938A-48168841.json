{
  "meta": {
    "index": 1138,
    "hitid": "3EHVO81VN5FGTUQSLVQXBP5TBP41HG",
    "workerid": "AIWEXPJAU66D9",
    "probid": "938A",
    "subid": "48168841"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare long long variable n",
      "code": "long long n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare boolean variable flag",
      "code": "bool flag ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "boolean method isvowel with char argument c",
      "code": "bool isvowel ( char c )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "return true if c = ' a ' or c = ' e ' or c = ' i ' or c = ' o ' or c = ' u ' or c = ' y ' , else return false",
      "code": "return ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' || c == ' y ' ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "discard the input",
      "code": "cin . ignore ( ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "flag = true",
      "code": "flag = true ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "while flag is true",
      "code": "while ( flag )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "set flag to false",
      "code": "flag = false ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "new string t = \" \"",
      "code": "string t = \" \" ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "append s [ 0 ] to t",
      "code": "t = t + s [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for i = 1 to length of s - 1 inclusive",
      "code": "for ( int i = 1 ; i <= s . length ( ) - 1 ; i ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if isvowel ( s [ i ] ) or isvowel ( s [ i - 1 ] ) is false",
      "code": "if ( ! isvowel ( s [ i ] ) || ! isvowel ( s [ i - 1 ] ) ) { t = t + s [ i ] ; }",
      "indent": 3
    },
    {
      "line": 17,
      "text": "assign value of t to s",
      "code": "s = t ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "string t , \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) == false )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        13,
        16
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "string t = \" \" ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        13,
        16,
        1
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "string t = \" \" ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "char s ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        13,
        16,
        2
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "string t = \" \" ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        4,
        13,
        1
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "string t = \" \" ;",
        "char s ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        13,
        1,
        2
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "string t = \" \" ;",
        "char s ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        4,
        13,
        2
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "string t = \" \" ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        16,
        1
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "char s ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        16,
        1,
        2
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "char s ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        4,
        16,
        2
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "char s ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        1,
        2
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "char s ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "string t = \" \" ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        16,
        1
      ],
      "mod_code": [
        "string t = \" \" ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "char s ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        16,
        1,
        4
      ],
      "mod_code": [
        "string t = \" \" ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "char s ;",
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' || c == ' y ' || c == ' y ' ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        16,
        1,
        2
      ],
      "mod_code": [
        "string t = \" \" ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "char s ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        13,
        16,
        4
      ],
      "mod_code": [
        "string t = \" \" ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' || c == ' y ' || c == ' y ' ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        16,
        4,
        2
      ],
      "mod_code": [
        "string t = \" \" ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        13,
        16,
        2
      ],
      "mod_code": [
        "string t = \" \" ;",
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        13,
        1
      ],
      "mod_code": [
        "string t = \" \" ;",
        "char s ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        1,
        4
      ],
      "mod_code": [
        "string t = \" \" ;",
        "char s ;",
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' || c == ' y ' || c == ' y ' ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        1,
        4,
        2
      ],
      "mod_code": [
        "string t = \" \" ;",
        "char s ;",
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        13,
        1,
        2
      ],
      "mod_code": [
        "string t = \" \" ;",
        "char s ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        13,
        4,
        2
      ],
      "mod_code": [
        "string t = \" \" ;",
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "string t = \" \" ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        16,
        1
      ],
      "mod_code": [
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "char s ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        1,
        4
      ],
      "mod_code": [
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "char s ;",
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' || c == ' y ' || c == ' y ' ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        1,
        4,
        2
      ],
      "mod_code": [
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "char s ;",
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        16,
        1,
        2
      ],
      "mod_code": [
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "char s ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        16,
        4
      ],
      "mod_code": [
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' || c == ' y ' || c == ' y ' ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        4,
        2
      ],
      "mod_code": [
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        16,
        2
      ],
      "mod_code": [
        "if ( isvowel ( s [ i ] ) || isvowel ( s [ i - 1 ] ) )",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "char s ;",
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' || c == ' y ' || c == ' y ' ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        4,
        2
      ],
      "mod_code": [
        "char s ;",
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char s ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' || c == ' y ' || c == ' y ' ;",
        "flag ;"
      ],
      "err_line": 2,
      "err_msg": "‘flag’ does not name a type"
    }
  ]
}