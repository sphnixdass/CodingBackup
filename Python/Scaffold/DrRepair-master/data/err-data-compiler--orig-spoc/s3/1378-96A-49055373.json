{
  "meta": {
    "index": 1378,
    "hitid": "3OZ4VAIBEX9S6C1GG9D7UQSODLCJVP",
    "workerid": "A1APYLD4DUK33J",
    "probid": "96A",
    "subid": "49055373"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create constant integer size with size = 101",
      "code": "const int size = 101 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create character array str of size size",
      "code": "char str [ size ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create character array str_1 with str_1 = \" 1111111 \"",
      "code": "char str_1 [ ] = \" 1111111 \" ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create character array str_0 with str_0 = \" 0000000 \"",
      "code": "char str_0 [ ] = \" 0000000 \" ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read line into str with maximum size of size",
      "code": "cin . getline ( str , size ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if first index of str_0 in str or first index of str_1 in str",
      "code": "if ( strstr ( str , str_0 ) || strstr ( str , str_1 ) )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const int size [ 101 ] ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;"
      ],
      "err_line": 3,
      "err_msg": "size of array ‘str_1’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;"
      ],
      "err_line": 4,
      "err_msg": "size of array ‘str_0’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "getline ( cin , str . size ( ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘find’ in ‘str’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char str_1 [ \" 1111111 \" ] ;"
      ],
      "err_line": 3,
      "err_msg": "size of array ‘str_1’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 4,
      "err_msg": "size of array ‘str_0’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "getline ( str , str . size ( ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( str . find ( str_0 ) == str . front ( ) )"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘find’ in ‘str’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        5
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;",
        "getline ( cin , str . size ( ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        6
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "getline ( cin , str . size ( ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        6
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "getline ( cin , str . size ( ) ) ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        4
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "getline ( cin , str . size ( ) ) ;",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        6
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        4
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "if ( str . find ( str_0 ) == str . end ( ) )",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;",
        "getline ( cin , str . size ( ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        6
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;",
        "getline ( cin , str . size ( ) ) ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4,
        6
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "getline ( cin , str . size ( ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "getline ( cin , str . size ( ) ) ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        4
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "getline ( cin , str . size ( ) ) ;",
        "if ( str . find ( str_0 ) == str . end ( ) )",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "getline ( cin , str . size ( ) ) ;",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        4
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "if ( str . find ( str_0 ) == str . end ( ) )",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "const int size [ 101 ] ;",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘size’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;"
      ],
      "err_line": 3,
      "err_msg": "size of array ‘str_1’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;",
        "getline ( cin , str . size ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "size of array ‘str_1’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        6
      ],
      "mod_code": [
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;",
        "getline ( cin , str . size ( ) ) ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 3,
      "err_msg": "size of array ‘str_1’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 3,
      "err_msg": "size of array ‘str_1’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "getline ( cin , str . size ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "size of array ‘str_1’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "getline ( cin , str . size ( ) ) ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 3,
      "err_msg": "size of array ‘str_1’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        4
      ],
      "mod_code": [
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "getline ( cin , str . size ( ) ) ;",
        "if ( str . find ( str_0 ) == str . end ( ) )",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 3,
      "err_msg": "size of array ‘str_1’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        3,
        5,
        4
      ],
      "mod_code": [
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "getline ( cin , str . size ( ) ) ;",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 3,
      "err_msg": "size of array ‘str_1’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 3,
      "err_msg": "size of array ‘str_1’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        3,
        6,
        4
      ],
      "mod_code": [
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "if ( str . find ( str_0 ) == str . end ( ) )",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 3,
      "err_msg": "size of array ‘str_1’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "char str_1 [ \" 1111111 \" ] = \" 1111111 \" ;",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 3,
      "err_msg": "size of array ‘str_1’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;",
        "getline ( cin , str . size ( ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "size of array ‘str_0’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;",
        "getline ( cin , str . size ( ) ) ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 4,
      "err_msg": "size of array ‘str_0’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "char str_0 [ \" 0000000 \" ] = \" 0000000 \" ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 4,
      "err_msg": "size of array ‘str_0’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "getline ( cin , str . size ( ) ) ;",
        "if ( str . find ( str_0 ) == str . end ( ) )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        5,
        6,
        4
      ],
      "mod_code": [
        "getline ( cin , str . size ( ) ) ;",
        "if ( str . find ( str_0 ) == str . end ( ) )",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 4,
      "err_msg": "size of array ‘str_0’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "getline ( cin , str . size ( ) ) ;",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 4,
      "err_msg": "size of array ‘str_0’ has non-integral type ‘const char [8]’"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( str . find ( str_0 ) == str . end ( ) )",
        "char str_0 [ \" 0000000 \" ] ;"
      ],
      "err_line": 4,
      "err_msg": "size of array ‘str_0’ has non-integral type ‘const char [8]’"
    }
  ]
}