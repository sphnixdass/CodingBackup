{
  "meta": {
    "index": 1169,
    "hitid": "3W1K7D6QSBB3XD8ETEPTH8M7UEDBZB",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "839A",
    "subid": "47828865"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , i , k , j , t , m = integers with t = 0",
      "code": "int n , i , k , j , t = 0 , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "Read j",
      "code": "cin >> j ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set j to j + t",
      "code": "j += t ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set t to 0",
      "code": "t = 0 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if j is greater than or equal to 8",
      "code": "if ( j >= 8 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set t to t + j - 8",
      "code": "t += j - 8 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set j to 8",
      "code": "j = 8 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set k to k - j",
      "code": "k -= j ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if k is greater than or equal to 0 , then Terminate the loop",
      "code": "if ( k <= 0 ) { break ; }",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if k is greater than 0",
      "code": "if ( k > 0 )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print - 1 and new line",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print i + 1 and a new line",
      "code": "cout << i + 1 << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , i , k , j , t , m , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        3,
        12,
        4
      ],
      "mod_code": [
        "int n , i , k , j , t , m = 0 ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k >= 0 ) break ;",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        12,
        4
      ],
      "mod_code": [
        "int n , i , k , j , t , m = 0 ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k >= ' 0 ' ) break ;",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        4
      ],
      "mod_code": [
        "int n , i , k , j , t , m = 0 ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( j >= ' 8 ' )",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "int n , i , k , j , t , m = 0 ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        12,
        7,
        4
      ],
      "mod_code": [
        "int n , i , k , j , t , m = 0 ;",
        "if ( k >= 0 ) break ;",
        "if ( j >= ' 8 ' )",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        12,
        4
      ],
      "mod_code": [
        "int n , i , k , j , t , m = 0 ;",
        "if ( k >= 0 ) break ;",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        12,
        7,
        4
      ],
      "mod_code": [
        "int n , i , k , j , t , m = 0 ;",
        "if ( k >= ' 0 ' ) break ;",
        "if ( j >= ' 8 ' )",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        12,
        4
      ],
      "mod_code": [
        "int n , i , k , j , t , m = 0 ;",
        "if ( k >= ' 0 ' ) break ;",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        7,
        4
      ],
      "mod_code": [
        "int n , i , k , j , t , m = 0 ;",
        "if ( j >= ' 8 ' )",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , i , k , j , t , m = 0 ;",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        12,
        7,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k >= 0 ) break ;",
        "if ( j >= ' 8 ' )",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        12,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k >= 0 ) break ;",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        12,
        7,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k >= ' 0 ' ) break ;",
        "if ( j >= ' 8 ' )",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        12,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k >= ' 0 ' ) break ;",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( j >= ' 8 ' )",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        7,
        4
      ],
      "mod_code": [
        "if ( k >= 0 ) break ;",
        "if ( j >= ' 8 ' )",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "if ( k >= 0 ) break ;",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        7,
        4
      ],
      "mod_code": [
        "if ( k >= ' 0 ' ) break ;",
        "if ( j >= ' 8 ' )",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "if ( k >= ' 0 ' ) break ;",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "if ( j >= ' 8 ' )",
        "gets ( j ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    }
  ]
}