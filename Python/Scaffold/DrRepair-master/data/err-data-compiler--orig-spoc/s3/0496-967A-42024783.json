{
  "meta": {
    "index": 496,
    "hitid": "3B9XR6P1WEPDXY3ABSM7TEYHBGYBJO",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "967A",
    "subid": "42024783"
  },
  "lines": [
    {
      "line": 0,
      "text": "T = 1600 = const int",
      "code": "const int T = 1600 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , s , h , m , t , tab be ints with tab an array of length T",
      "code": "int n , s , h , m , t , tab [ T ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n , s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read h , m",
      "code": "cin >> h >> m ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set t to h * 60 + m",
      "code": "t = h * 60 + m ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment tab at max ( t - s , 0 )",
      "code": "tab [ max ( t - s , 0 ) ] ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "decrement tab at t + s + 1",
      "code": "tab [ t + s + 1 ] -- ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to T exclusive",
      "code": "for ( int i = 0 ; i < T ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if i is non zero positive then increment tab [ i ] by tab [ i - 1 ]",
      "code": "if ( i > 0 ) tab [ i ] += tab [ i - 1 ] ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if tab [ i ] = 0",
      "code": "if ( tab [ i ] == 0 )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print i / 60 and space and i % 60",
      "code": "cout << i / 60 << ' ' << i % 60 << endl ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "tab [ max ( t - s , 0 ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int T , 1600 ;"
      ],
      "err_line": 0,
      "err_msg": "uninitialized const ‘T’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "tab ( max ( t - s , 0 ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘tab’ cannot be used as a function"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘tab’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "tab [ max ( t - s , 0 ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        7,
        12
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "tab [ max ( t - s , 0 ) ) ;",
        "if ( tab [ i ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        7,
        12,
        6
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "tab [ max ( t - s , 0 ) ) ;",
        "if ( tab [ i ] == ' 0 ' )",
        "t *= 60 + m ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        7,
        12,
        8
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "tab [ max ( t - s , 0 ) ) ;",
        "if ( tab [ i ] == ' 0 ' )",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        7,
        6
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "tab [ max ( t - s , 0 ) ) ;",
        "t *= 60 + m ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        7,
        6,
        8
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "tab [ max ( t - s , 0 ) ) ;",
        "t *= 60 + m ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        7,
        8
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "tab [ max ( t - s , 0 ) ) ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "if ( tab [ i ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        12,
        7
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "if ( tab [ i ] == ' 0 ' )",
        "tab ( max ( t - s , 0 ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        12,
        7,
        6
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "if ( tab [ i ] == ' 0 ' )",
        "tab ( max ( t - s , 0 ) ) ;",
        "t *= 60 + m ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        12,
        7,
        8
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "if ( tab [ i ] == ' 0 ' )",
        "tab ( max ( t - s , 0 ) ) ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        12,
        6
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "if ( tab [ i ] == ' 0 ' )",
        "t *= 60 + m ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        12,
        6,
        8
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "if ( tab [ i ] == ' 0 ' )",
        "t *= 60 + m ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        12,
        8
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "if ( tab [ i ] == ' 0 ' )",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "tab ( max ( t - s , 0 ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        7,
        6
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "tab ( max ( t - s , 0 ) ) ;",
        "t *= 60 + m ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        7,
        6,
        8
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "tab ( max ( t - s , 0 ) ) ;",
        "t *= 60 + m ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        7,
        8
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "tab ( max ( t - s , 0 ) ) ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "t *= 60 + m ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "t *= 60 + m ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int n , s , h [ T ] , m , t , tab [ T ] ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1600]’)"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "tab [ max ( t - s , 0 ) ) ;",
        "if ( tab [ i ] == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        12,
        6
      ],
      "mod_code": [
        "tab [ max ( t - s , 0 ) ) ;",
        "if ( tab [ i ] == ' 0 ' )",
        "t *= 60 + m ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        12,
        6,
        8
      ],
      "mod_code": [
        "tab [ max ( t - s , 0 ) ) ;",
        "if ( tab [ i ] == ' 0 ' )",
        "t *= 60 + m ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        12,
        8
      ],
      "mod_code": [
        "tab [ max ( t - s , 0 ) ) ;",
        "if ( tab [ i ] == ' 0 ' )",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "tab [ max ( t - s , 0 ) ) ;",
        "t *= 60 + m ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        6,
        8
      ],
      "mod_code": [
        "tab [ max ( t - s , 0 ) ) ;",
        "t *= 60 + m ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "tab [ max ( t - s , 0 ) ) ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "if ( tab [ i ] == ' 0 ' )",
        "tab ( max ( t - s , 0 ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘tab’ cannot be used as a function"
    },
    {
      "mod_line": [
        12,
        7,
        6
      ],
      "mod_code": [
        "if ( tab [ i ] == ' 0 ' )",
        "tab ( max ( t - s , 0 ) ) ;",
        "t *= 60 + m ;"
      ],
      "err_line": 7,
      "err_msg": "‘tab’ cannot be used as a function"
    },
    {
      "mod_line": [
        12,
        7,
        6,
        8
      ],
      "mod_code": [
        "if ( tab [ i ] == ' 0 ' )",
        "tab ( max ( t - s , 0 ) ) ;",
        "t *= 60 + m ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘tab’ cannot be used as a function"
    },
    {
      "mod_line": [
        12,
        7,
        8
      ],
      "mod_code": [
        "if ( tab [ i ] == ' 0 ' )",
        "tab ( max ( t - s , 0 ) ) ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘tab’ cannot be used as a function"
    },
    {
      "mod_line": [
        12,
        6,
        8
      ],
      "mod_code": [
        "if ( tab [ i ] == ' 0 ' )",
        "t *= 60 + m ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘tab’"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "if ( tab [ i ] == ' 0 ' )",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘tab’"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "tab ( max ( t - s , 0 ) ) ;",
        "t *= 60 + m ;"
      ],
      "err_line": 7,
      "err_msg": "‘tab’ cannot be used as a function"
    },
    {
      "mod_line": [
        7,
        6,
        8
      ],
      "mod_code": [
        "tab ( max ( t - s , 0 ) ) ;",
        "t *= 60 + m ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘tab’ cannot be used as a function"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "tab ( max ( t - s , 0 ) ) ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘tab’ cannot be used as a function"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "t *= 60 + m ;",
        "tab tab ( t + s + 1 ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘tab’"
    }
  ]
}