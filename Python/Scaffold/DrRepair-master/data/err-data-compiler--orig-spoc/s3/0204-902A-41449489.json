{
  "meta": {
    "index": 204,
    "hitid": "38Z7YZ2SB3W46TLTCSYXC2EGK18IQT",
    "workerid": "A1APYLD4DUK33J",
    "probid": "902A",
    "subid": "41449489"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer MAX = 1e5",
      "code": "const int MAX = 1e5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare boolean array x size 150",
      "code": "bool x [ 150 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set bytes from x to size of x to value false",
      "code": "memset ( x , false , sizeof ( x ) ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integers n , m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare integers l , r",
      "code": "int l , r ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare integers i , j",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read l and r",
      "code": "cin >> l >> r ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for j = l to r exclusive , let x [ j ] be true",
      "code": "for ( j = l ; j < r ; j ++ ) x [ j ] = true ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to m exclusive",
      "code": "for ( i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if not x [ i ] , end loop",
      "code": "if ( ! x [ i ] ) break ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if i is less than m",
      "code": "if ( i < m )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" NO \" and newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" YES \" and newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        16,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ )",
        "do",
        "while ( ! x [ i ] ) break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        16,
        13,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ )",
        "do",
        "while ( ! x [ i ] ) break ;",
        "if ( i <= m )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        16,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ )",
        "do",
        "if ( i <= m )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        13
      ],
      "mod_code": [
        "do",
        "while ( ! x [ i ] ) break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        13,
        14
      ],
      "mod_code": [
        "do",
        "while ( ! x [ i ] ) break ;",
        "if ( i <= m )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        14
      ],
      "mod_code": [
        "do",
        "if ( i <= m )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}