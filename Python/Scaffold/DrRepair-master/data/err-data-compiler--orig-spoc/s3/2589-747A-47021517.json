{
  "meta": {
    "index": 2589,
    "hitid": "3TTPFEFXCTEB0GRPR12E6LWAKNIH63",
    "workerid": "A1HC0MVEW0VTB7",
    "probid": "747A",
    "subid": "47021517"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , kanan and kiri be integers",
      "code": "int n , kanan , kiri ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "get value of n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for x = 1 to square root of n inclusive",
      "code": "for ( int x = 1 ; x <= sqrt ( n ) ; x ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if n modulo x is equal to 0",
      "code": "if ( n % x == 0 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set kiri = x",
      "code": "kiri = x ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "set kanan = n / kiri",
      "code": "kanan = n / kiri ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print kiri , space and kanan",
      "code": "cout << kiri << \" \" << kanan << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "gets ( n ) ;",
        "cout << kiri << \" kiri \" << kanan << endl ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9,
        5
      ],
      "mod_code": [
        "gets ( n ) ;",
        "cout << kiri << \" kiri \" << kanan << endl ;",
        "bool kiri = x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9,
        5,
        6
      ],
      "mod_code": [
        "gets ( n ) ;",
        "cout << kiri << \" kiri \" << kanan << endl ;",
        "bool kiri = x ;",
        "kanan /= kiri ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9,
        6
      ],
      "mod_code": [
        "gets ( n ) ;",
        "cout << kiri << \" kiri \" << kanan << endl ;",
        "kanan /= kiri ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "gets ( n ) ;",
        "bool kiri = x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "gets ( n ) ;",
        "bool kiri = x ;",
        "kanan /= kiri ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "gets ( n ) ;",
        "kanan /= kiri ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    }
  ]
}