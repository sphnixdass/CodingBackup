{
  "meta": {
    "index": 2169,
    "hitid": "3B9XR6P1WEPDXY3ABSM7TEYHATWJBJ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "330A",
    "subid": "42140170"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers r , c",
      "code": "int r , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read r read c",
      "code": "cin >> r >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string vector v initialized with r",
      "code": "vector < string > v ( r ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to r exclusive read v [ i ]",
      "code": "for ( int i = 0 ; i < r ; ++ i ) { cin >> v [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create boolean vectors hor , ver , with hor initialized with c , false , ver initialized with r , false",
      "code": "vector < bool > hor ( c , false ) , ver ( r , false ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for y = 0 to r exclusive",
      "code": "for ( int y = 0 ; y < r ; ++ y )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for x = 0 to c exclusive",
      "code": "for ( int x = 0 ; x < c ; ++ x )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if v [ y ] [ x ] is ' S '",
      "code": "if ( v [ y ] [ x ] == ' S ' )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set hor [ x ] to true",
      "code": "hor [ x ] = true ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "set ver [ y ] to true",
      "code": "ver [ y ] = true ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "create integer res with res = 0",
      "code": "int res = 0 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for y = 0 to r exclusive",
      "code": "for ( int y = 0 ; y < r ; ++ y )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for x = 0 to c exclusive",
      "code": "for ( int x = 0 ; x < c ; ++ x )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if not hor [ x ] or not ver [ y ] , increment res",
      "code": "if ( ! hor [ x ] || ! ver [ y ] ) res ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print res print newline",
      "code": "cout << res << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "vector < int > v ( r ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "vector < int > v ( r ) ;"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        3,
        16
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "vector < int > v ( r ) ;",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        3,
        16,
        9
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "vector < int > v ( r ) ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "hor [ ' x ' ] = true ;"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        3,
        16,
        7
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "vector < int > v ( r ) ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        3,
        9
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "vector < int > v ( r ) ;",
        "hor [ ' x ' ] = true ;"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        3,
        9,
        7
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "vector < int > v ( r ) ;",
        "hor [ ' x ' ] = true ;",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        3,
        7
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "vector < int > v ( r ) ;",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        16
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        16,
        9
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "hor [ ' x ' ] = true ;"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        16,
        9,
        7
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "hor [ ' x ' ] = true ;",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        16,
        7
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "hor [ ' x ' ] = true ;"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        7
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "hor [ ' x ' ] = true ;",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "bool hor ( c ) , ver ( r , false ) ;",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 5,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        16,
        9
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "hor [ ' x ' ] = true ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        16,
        9,
        7
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "hor [ ' x ' ] = true ;",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16,
        9,
        5
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "hor [ ' x ' ] = true ;",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16,
        7
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16,
        7,
        5
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "for ( x = 0 ; x < c ; x ++ )",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16,
        5
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "hor [ ' x ' ] = true ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        7
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "hor [ ' x ' ] = true ;",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        7,
        5
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "hor [ ' x ' ] = true ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        5
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "hor [ ' x ' ] = true ;",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        5
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "vector < int > v ( r ) ;",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "for ( x = 0 ; x < c ; x ++ )",
        "hor [ ' x ' ] = true ;"
      ],
      "err_line": 16,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        9,
        7
      ],
      "mod_code": [
        "for ( x = 0 ; x < c ; x ++ )",
        "hor [ ' x ' ] = true ;",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        9,
        7,
        5
      ],
      "mod_code": [
        "for ( x = 0 ; x < c ; x ++ )",
        "hor [ ' x ' ] = true ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        9,
        5
      ],
      "mod_code": [
        "for ( x = 0 ; x < c ; x ++ )",
        "hor [ ' x ' ] = true ;",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        7
      ],
      "mod_code": [
        "for ( x = 0 ; x < c ; x ++ )",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        7,
        5
      ],
      "mod_code": [
        "for ( x = 0 ; x < c ; x ++ )",
        "for ( x = 0 ; x < c ; x ++ )",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        5
      ],
      "mod_code": [
        "for ( x = 0 ; x < c ; x ++ )",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "hor [ ' x ' ] = true ;",
        "for ( x = 0 ; x < c ; x ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        7,
        5
      ],
      "mod_code": [
        "hor [ ' x ' ] = true ;",
        "for ( x = 0 ; x < c ; x ++ )",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "hor [ ' x ' ] = true ;",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "for ( x = 0 ; x < c ; x ++ )",
        "bool hor ( c , false , ver ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘ver’ was not declared in this scope"
    }
  ]
}