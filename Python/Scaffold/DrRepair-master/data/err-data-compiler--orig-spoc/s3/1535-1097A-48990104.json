{
  "meta": {
    "index": 1535,
    "hitid": "3SV8KD29L4M4QGC8ZR2MGB5XH8CZK9",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "1097A",
    "subid": "48990104"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function the_same that takes string s1 , s2 and returns bool",
      "code": "bool the_same ( string s1 , string s2 )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return s1 [ 0 ] is s2 [ 0 ] or s1 [ 1 ] is s2 [ 1 ]",
      "code": "return ( s1 [ 0 ] == s2 [ 0 ] || s1 [ 1 ] == s2 [ 1 ] ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "ok = bool with ok = false",
      "code": "bool ok = false ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "s1 , s2 = string",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read s1",
      "code": "cin >> s1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to 4",
      "code": "for ( int i = 0 ; i < 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read s2",
      "code": "cin >> s2 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if the_same ( s1 , s2 ) , ok = true",
      "code": "if ( the_same ( s1 , s2 ) ) ok = true ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if ok",
      "code": "if ( ok )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print YES",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "cin >> s2 >> s2 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        8,
        1
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "cin >> s2 >> s2 ;",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        8,
        1,
        6
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "cin >> s2 >> s2 ;",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        8,
        1,
        5
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "cin >> s2 >> s2 ;",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "string s1 , s2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        8,
        1,
        7
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "cin >> s2 >> s2 ;",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        8,
        6
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "cin >> s2 >> s2 ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        8,
        6,
        5
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "cin >> s2 >> s2 ;",
        "gets ( s1 ) ;",
        "string s1 , s2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        8,
        6,
        7
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "cin >> s2 >> s2 ;",
        "gets ( s1 ) ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        8,
        5
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "cin >> s2 >> s2 ;",
        "string s1 , s2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        8,
        5,
        7
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "cin >> s2 >> s2 ;",
        "string s1 , s2 = 0 ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        8,
        7
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "cin >> s2 >> s2 ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        1,
        6
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        5
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "gets ( s1 ) ;",
        "string s1 , s2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        7
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "gets ( s1 ) ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        1,
        5
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "string s1 , s2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        7
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "string s1 , s2 = 0 ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        1,
        7
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "gets ( s1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        5
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "gets ( s1 ) ;",
        "string s1 , s2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        5,
        7
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "gets ( s1 ) ;",
        "string s1 , s2 = 0 ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        7
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "gets ( s1 ) ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "string s1 , s2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        5,
        7
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "string s1 , s2 = 0 ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "bool the_same ( string s1 , bool s2 )",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "cin >> s2 >> s2 ;",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        1,
        6
      ],
      "mod_code": [
        "cin >> s2 >> s2 ;",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        1,
        6,
        5
      ],
      "mod_code": [
        "cin >> s2 >> s2 ;",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "gets ( s1 ) ;",
        "string s1 , s2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        1,
        6,
        7
      ],
      "mod_code": [
        "cin >> s2 >> s2 ;",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "gets ( s1 ) ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        1,
        5
      ],
      "mod_code": [
        "cin >> s2 >> s2 ;",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "string s1 , s2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        1,
        5,
        7
      ],
      "mod_code": [
        "cin >> s2 >> s2 ;",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "string s1 , s2 = 0 ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        1,
        7
      ],
      "mod_code": [
        "cin >> s2 >> s2 ;",
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "cin >> s2 >> s2 ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        6,
        5
      ],
      "mod_code": [
        "cin >> s2 >> s2 ;",
        "gets ( s1 ) ;",
        "string s1 , s2 = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        6,
        5,
        7
      ],
      "mod_code": [
        "cin >> s2 >> s2 ;",
        "gets ( s1 ) ;",
        "string s1 , s2 = 0 ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        6,
        7
      ],
      "mod_code": [
        "cin >> s2 >> s2 ;",
        "gets ( s1 ) ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "gets ( s1 ) ;",
        "string s1 , s2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        6,
        5,
        7
      ],
      "mod_code": [
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "gets ( s1 ) ;",
        "string s1 , s2 = 0 ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        6,
        7
      ],
      "mod_code": [
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "gets ( s1 ) ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "string s1 , s2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "string s1 , s2 = 0 ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "return s1 [ 0 ] == s2 [ 0 ] ? s1 [ 1 ] == s2 [ 1 ] ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "string s1 , s2 = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        5,
        7
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "string s1 , s2 = 0 ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "for ( int i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}