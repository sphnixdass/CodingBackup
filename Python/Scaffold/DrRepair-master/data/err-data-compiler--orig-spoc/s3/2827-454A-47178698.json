{
  "meta": {
    "index": 2827,
    "hitid": "3P7RGTLO6E73P840NZMNZIEO8NCKA0",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "454A",
    "subid": "47178698"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integer as n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to less than n do the following",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "integer as k = 0",
      "code": "int k = 0 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if i is less than ( n / 2 then do the following + 1",
      "code": "if ( i < ( n / 2 ) + 1 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set k to i",
      "code": "k = i ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set k to n - 1 - i",
      "code": "k = n - 1 - i ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "for j = 1 to less than or equal to n do the following",
      "code": "for ( int j = 1 ; j <= n ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if abs is less than or equal to k then do the following",
      "code": "if ( abs ( j - ( n / 2 ) - 1 ) <= k )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "output D",
      "code": "cout << \" D \" ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 13,
      "text": "output *",
      "code": "cout << \" * \" ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "output endl",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "while ( abs ( k ) )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "<< endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "<< endl ;"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        15,
        7
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "<< endl ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        10,
        15,
        7,
        8
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "<< endl ;",
        "do",
        "k -= 1 - i ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        10,
        15,
        7,
        13
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "<< endl ;",
        "do",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        10,
        15,
        8
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "<< endl ;",
        "k -= 1 - i ;"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        15,
        8,
        13
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "<< endl ;",
        "k -= 1 - i ;",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        15,
        13
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "<< endl ;",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        10,
        7,
        8
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "do",
        "k -= 1 - i ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        10,
        7,
        8,
        13
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "do",
        "k -= 1 - i ;",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        10,
        7,
        13
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "do",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "k -= 1 - i ;"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        8,
        13
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "k -= 1 - i ;",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "while ( abs ( k ) )",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        7
      ],
      "mod_code": [
        "<< endl ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        15,
        7,
        8
      ],
      "mod_code": [
        "<< endl ;",
        "do",
        "k -= 1 - i ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        15,
        7,
        8,
        13
      ],
      "mod_code": [
        "<< endl ;",
        "do",
        "k -= 1 - i ;",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        15,
        7,
        8,
        10
      ],
      "mod_code": [
        "<< endl ;",
        "do",
        "k -= 1 - i ;",
        "if ( abs ( k ) )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        15,
        7,
        13
      ],
      "mod_code": [
        "<< endl ;",
        "do",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        15,
        7,
        13,
        10
      ],
      "mod_code": [
        "<< endl ;",
        "do",
        "cout << \" * \" << endl ;",
        "if ( abs ( k ) )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        15,
        7,
        10
      ],
      "mod_code": [
        "<< endl ;",
        "do",
        "if ( abs ( k ) )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        15,
        8
      ],
      "mod_code": [
        "<< endl ;",
        "k -= 1 - i ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        8,
        13
      ],
      "mod_code": [
        "<< endl ;",
        "k -= 1 - i ;",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        8,
        13,
        10
      ],
      "mod_code": [
        "<< endl ;",
        "k -= 1 - i ;",
        "cout << \" * \" << endl ;",
        "if ( abs ( k ) )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        8,
        10
      ],
      "mod_code": [
        "<< endl ;",
        "k -= 1 - i ;",
        "if ( abs ( k ) )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "<< endl ;",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        13,
        10
      ],
      "mod_code": [
        "<< endl ;",
        "cout << \" * \" << endl ;",
        "if ( abs ( k ) )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        10
      ],
      "mod_code": [
        "<< endl ;",
        "if ( abs ( k ) )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "do",
        "k -= 1 - i ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        7,
        8,
        13
      ],
      "mod_code": [
        "do",
        "k -= 1 - i ;",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        7,
        8,
        13,
        10
      ],
      "mod_code": [
        "do",
        "k -= 1 - i ;",
        "cout << \" * \" << endl ;",
        "if ( abs ( k ) )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        7,
        8,
        10
      ],
      "mod_code": [
        "do",
        "k -= 1 - i ;",
        "if ( abs ( k ) )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "do",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        7,
        13,
        10
      ],
      "mod_code": [
        "do",
        "cout << \" * \" << endl ;",
        "if ( abs ( k ) )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "do",
        "if ( abs ( k ) )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘(’ token"
    }
  ]
}