{
  "meta": {
    "index": 671,
    "hitid": "36JW4WBR06E7J9K0SU5I0R9NCK4FHI",
    "workerid": "AIWEXPJAU66D9",
    "probid": "5A",
    "subid": "47293862"
  },
  "lines": [
    {
      "line": 0,
      "text": "function FindLen ( string ss )",
      "code": "int FindLen ( string ss )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "i = integer with value 0",
      "code": "int i = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 to size of ss exclusive",
      "code": "for ( i = 0 ; i < ss . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if ss [ i ] equals to ' : ' break the loop",
      "code": "if ( ss [ i ] == ' : ' ) break ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 5,
      "text": "integer l = 0",
      "code": "int l = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = i + 1 to size of ss exclusive increase l",
      "code": "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ ) { l ++ ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "return l",
      "code": "return l ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "Set = set of strings",
      "code": "set < string > Set ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "ss = string",
      "code": "string ss ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "integer ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "while function getline ( cin , ss ) returns true",
      "code": "while ( getline ( cin , ss ) )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if ss [ 0 ] equals to ' + '",
      "code": "if ( ss [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set integer len to size of ss - 1",
      "code": "int len = ss . size ( ) - 1 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "insert substring of ss from 1 to len into Set",
      "code": "Set . insert ( ss . substr ( 1 , len ) ) ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else if ss [ 0 ] equals to ' - '",
      "code": "else if ( ss [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set integer len to size of ss - 1",
      "code": "int len = ss . size ( ) - 1 ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "set string name to substring of ss from 1 to len",
      "code": "string name = ss . substr ( 1 , len ) ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "erase name from Set",
      "code": "Set . erase ( name ) ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 22,
      "text": "integer len = result of the call to FindLen ( ss )",
      "code": "int len = FindLen ( ss ) ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "set ans to size of Set * len",
      "code": "ans = ans + Set . size ( ) * len ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string FindLen ( string ss )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "string name . substr ( 1 , len ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void FindLen ( string ss )"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "i = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘ans’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "char ss ;"
      ],
      "err_line": 13,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "ss . insert ( 1 , len ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(int, int&)’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "int len = ! ( ss ) ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        2,
        16
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "ss . insert ( 1 , ss ) ;"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        2,
        16,
        19
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "ss . insert ( 1 , ss ) ;",
        "string name . substr ( 1 , len ) ;"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        2,
        16,
        23
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "ss . insert ( 1 , ss ) ;",
        "ans = Set . size ( ) * len ;"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        2,
        16,
        6
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "ss . insert ( 1 , ss ) ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        2,
        19
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "string name . substr ( 1 , len ) ;"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        2,
        19,
        23
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "string name . substr ( 1 , len ) ;",
        "ans = Set . size ( ) * len ;"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        2,
        19,
        6
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "string name . substr ( 1 , len ) ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        2,
        23
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "ans = Set . size ( ) * len ;"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        2,
        23,
        6
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "ans = Set . size ( ) * len ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        2,
        6
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "ss . insert ( 1 , ss ) ;"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        16,
        19
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "ss . insert ( 1 , ss ) ;",
        "string name . substr ( 1 , len ) ;"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        16,
        19,
        23
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "ss . insert ( 1 , ss ) ;",
        "string name . substr ( 1 , len ) ;",
        "ans = Set . size ( ) * len ;"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        16,
        19,
        6
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "ss . insert ( 1 , ss ) ;",
        "string name . substr ( 1 , len ) ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        16,
        23
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "ss . insert ( 1 , ss ) ;",
        "ans = Set . size ( ) * len ;"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        16,
        23,
        6
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "ss . insert ( 1 , ss ) ;",
        "ans = Set . size ( ) * len ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        16,
        6
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "ss . insert ( 1 , ss ) ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "string name . substr ( 1 , len ) ;"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        19,
        23
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "string name . substr ( 1 , len ) ;",
        "ans = Set . size ( ) * len ;"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        19,
        23,
        6
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "string name . substr ( 1 , len ) ;",
        "ans = Set . size ( ) * len ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        19,
        6
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "string name . substr ( 1 , len ) ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        23
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "ans = Set . size ( ) * len ;"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        23,
        6
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "ans = Set . size ( ) * len ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "string FindLen ( string ss )",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘l’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        2,
        16,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "ss . insert ( 1 , ss ) ;",
        "string name . substr ( 1 , len ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        16,
        19,
        23
      ],
      "mod_code": [
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "ss . insert ( 1 , ss ) ;",
        "string name . substr ( 1 , len ) ;",
        "ans = Set . size ( ) * len ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        16,
        19,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "ss . insert ( 1 , ss ) ;",
        "string name . substr ( 1 , len ) ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "string name . substr ( 1 , len ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        19,
        23
      ],
      "mod_code": [
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "string name . substr ( 1 , len ) ;",
        "ans = Set . size ( ) * len ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        19,
        23,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "string name . substr ( 1 , len ) ;",
        "ans = Set . size ( ) * len ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        19,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < ss . size ( ) ; i ++ )",
        "string name . substr ( 1 , len ) ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "ss . insert ( 1 , ss ) ;",
        "string name . substr ( 1 , len ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        16,
        19,
        23
      ],
      "mod_code": [
        "ss . insert ( 1 , ss ) ;",
        "string name . substr ( 1 , len ) ;",
        "ans = Set . size ( ) * len ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        16,
        19,
        23,
        6
      ],
      "mod_code": [
        "ss . insert ( 1 , ss ) ;",
        "string name . substr ( 1 , len ) ;",
        "ans = Set . size ( ) * len ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        16,
        19,
        6
      ],
      "mod_code": [
        "ss . insert ( 1 , ss ) ;",
        "string name . substr ( 1 , len ) ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        19,
        23
      ],
      "mod_code": [
        "string name . substr ( 1 , len ) ;",
        "ans = Set . size ( ) * len ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        19,
        23,
        6
      ],
      "mod_code": [
        "string name . substr ( 1 , len ) ;",
        "ans = Set . size ( ) * len ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        19,
        6
      ],
      "mod_code": [
        "string name . substr ( 1 , len ) ;",
        "for ( int j = i + 1 ; j < ss . size ( ) ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘.’ token"
    }
  ]
}