{
  "meta": {
    "index": 1923,
    "hitid": "3MQKOF1EE2ISIF1TWNWSDUGPFAHDWF",
    "workerid": "AIWEXPJAU66D9",
    "probid": "626A",
    "subid": "17809525"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integer size_n",
      "code": "int size_n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare strings str and com where com = \" UDRL \"",
      "code": "string str , com = \" UDRL \" ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "cx is an array of integers with values = 1 , - 1 , 0 , 0 ; cy is an array of integers with values = 0 , 0 , 1 , - 1",
      "code": "int cx [ 4 ] = { 1 , - 1 , 0 , 0 } , cy [ 4 ] = { 0 , 0 , 1 , - 1 } ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create integer result = 0",
      "code": "int result = 0 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "ind is a integer function with character argument letter",
      "code": "int ind ( char letter ) ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare integers ii and jj",
      "code": "int ii , jj ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare integers curX and curY",
      "code": "int curX , curY ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare integer variable tmp",
      "code": "int tmp ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read size_n",
      "code": "cin >> size_n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read and discard input",
      "code": "cin . ignore ( ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read line from input into str",
      "code": "getline ( cin , str ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for ii = 0 to size_n exclusive",
      "code": "for ( ii = 0 ; ii < size_n ; ii ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "set value of curX to 0",
      "code": "curX = 0 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set value of curY to 0",
      "code": "curY = 0 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for jj = ii to size_n exclusive",
      "code": "for ( jj = ii ; jj < size_n ; jj ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "tmp = ind ( str [ jj ] )",
      "code": "tmp = ind ( str [ jj ] ) ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "increase curX by cx [ tmp ]",
      "code": "curX += cx [ tmp ] ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "increase curY by cy [ tmp ]",
      "code": "curY += cy [ tmp ] ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if ( curX = 0 ) & & ( curY = 0 ) , increment result",
      "code": "if ( ( curX == 0 ) && ( curY == 0 ) ) result ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print result and a new line",
      "code": "cout << result << endl ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 25,
      "text": "function ind with character argument letter that returns integer",
      "code": "int ind ( char letter )",
      "indent": 0
    },
    {
      "line": 26,
      "text": "declare integer ii",
      "code": "int ii ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "for ii = 0 to 4 exclusive",
      "code": "for ( ii = 0 ; ii < 4 ; ii ++ )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "return ii if letter = com [ ii ]",
      "code": "if ( letter == com [ ii ] ) return ii ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "return - 1",
      "code": "return - 1 ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;"
      ],
      "err_line": 18,
      "err_msg": "‘cy’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char ind ( char letter )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cin >> input ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int cx [ ] = { 0 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;"
      ],
      "err_line": 18,
      "err_msg": "‘cy’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "bool ind ( char letter )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "gets ( size_n ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "getline ( cin , str ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "* curX = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "* curY = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "return - l ;"
      ],
      "err_line": 30,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "char ind ( char letter )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2,
        4,
        10
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "char ind ( char letter )",
        "cin >> input ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2,
        4,
        10,
        11
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "char ind ( char letter )",
        "cin >> input ;",
        "getline ( cin , str ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2,
        4,
        10,
        13
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "char ind ( char letter )",
        "cin >> input ;",
        "* curX = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2,
        4,
        10,
        1
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "char ind ( char letter )",
        "cin >> input ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2,
        4,
        11
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "char ind ( char letter )",
        "getline ( cin , str ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2,
        4,
        11,
        13
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "char ind ( char letter )",
        "getline ( cin , str ) ) ;",
        "* curX = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2,
        4,
        11,
        1
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "char ind ( char letter )",
        "getline ( cin , str ) ) ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2,
        4,
        13
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "char ind ( char letter )",
        "* curX = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2,
        4,
        13,
        1
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "char ind ( char letter )",
        "* curX = 0 ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2,
        4,
        1
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "char ind ( char letter )",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "cin >> input ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10,
        11
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "cin >> input ;",
        "getline ( cin , str ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10,
        11,
        13
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "cin >> input ;",
        "getline ( cin , str ) ) ;",
        "* curX = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10,
        11,
        1
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "cin >> input ;",
        "getline ( cin , str ) ) ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10,
        13
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "cin >> input ;",
        "* curX = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10,
        13,
        1
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "cin >> input ;",
        "* curX = 0 ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10,
        1
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "cin >> input ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "getline ( cin , str ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        11,
        13
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "getline ( cin , str ) ) ;",
        "* curX = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        11,
        13,
        1
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "getline ( cin , str ) ) ;",
        "* curX = 0 ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        11,
        1
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "getline ( cin , str ) ) ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "* curX = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        2,
        13,
        1
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "* curX = 0 ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 13,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "int cx [ ] = { 1 , 0 , 1 , 1 , 1 , - 1 , - 1 , - 1 } ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 18,
      "err_msg": "‘cy’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "char ind ( char letter )",
        "cin >> input ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        10,
        11
      ],
      "mod_code": [
        "char ind ( char letter )",
        "cin >> input ;",
        "getline ( cin , str ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        10,
        11,
        13
      ],
      "mod_code": [
        "char ind ( char letter )",
        "cin >> input ;",
        "getline ( cin , str ) ) ;",
        "* curX = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        10,
        11,
        1
      ],
      "mod_code": [
        "char ind ( char letter )",
        "cin >> input ;",
        "getline ( cin , str ) ) ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        10,
        13
      ],
      "mod_code": [
        "char ind ( char letter )",
        "cin >> input ;",
        "* curX = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        1
      ],
      "mod_code": [
        "char ind ( char letter )",
        "cin >> input ;",
        "* curX = 0 ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        10,
        1
      ],
      "mod_code": [
        "char ind ( char letter )",
        "cin >> input ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "char ind ( char letter )",
        "getline ( cin , str ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        11,
        13
      ],
      "mod_code": [
        "char ind ( char letter )",
        "getline ( cin , str ) ) ;",
        "* curX = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        11,
        13,
        1
      ],
      "mod_code": [
        "char ind ( char letter )",
        "getline ( cin , str ) ) ;",
        "* curX = 0 ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        11,
        1
      ],
      "mod_code": [
        "char ind ( char letter )",
        "getline ( cin , str ) ) ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "char ind ( char letter )",
        "* curX = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        13,
        1
      ],
      "mod_code": [
        "char ind ( char letter )",
        "* curX = 0 ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "char ind ( char letter )",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "cin >> input ;",
        "getline ( cin , str ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        11,
        13
      ],
      "mod_code": [
        "cin >> input ;",
        "getline ( cin , str ) ) ;",
        "* curX = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        11,
        13,
        1
      ],
      "mod_code": [
        "cin >> input ;",
        "getline ( cin , str ) ) ;",
        "* curX = 0 ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        11,
        1
      ],
      "mod_code": [
        "cin >> input ;",
        "getline ( cin , str ) ) ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "cin >> input ;",
        "* curX = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13,
        1
      ],
      "mod_code": [
        "cin >> input ;",
        "* curX = 0 ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "cin >> input ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 10,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "getline ( cin , str ) ) ;",
        "* curX = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        13,
        1
      ],
      "mod_code": [
        "getline ( cin , str ) ) ;",
        "* curX = 0 ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "getline ( cin , str ) ) ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        1
      ],
      "mod_code": [
        "* curX = 0 ;",
        "string str = \" UDRL \" , com ;"
      ],
      "err_line": 13,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}