{
  "meta": {
    "index": 1934,
    "hitid": "3X878VYTIECAQKEOFLJ69EKTYWO7FI",
    "workerid": "AIWEXPJAU66D9",
    "probid": "626A",
    "subid": "40208222"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare long long n",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare long long len = length of s",
      "code": "long long len = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create long long coun = 0",
      "code": "long long coun = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to len exclusive",
      "code": "for ( long long i = 0 ; i < len ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare variables coun1 and coun2 = 0",
      "code": "long long coun1 = 0 , coun2 = 0 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for j = i to len exclusive",
      "code": "for ( long long j = i ; j < len ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if s [ j ] = ' U '",
      "code": "if ( s [ j ] == ' U ' )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increment coun1",
      "code": "coun1 ++ ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else if s [ j ] = ' R '",
      "code": "else if ( s [ j ] == ' R ' )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment coun2",
      "code": "coun2 ++ ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else if s [ j ] = ' D '",
      "code": "else if ( s [ j ] == ' D ' )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "decrement coun1",
      "code": "coun1 -- ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "else if s [ j ] = ' L '",
      "code": "else if ( s [ j ] == ' L ' )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "decrease coun2 by one",
      "code": "coun2 -- ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "if coun1 and coun2 are both 0 , increment coun",
      "code": "if ( coun1 == 0 && coun2 == 0 ) coun ++ ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print coun",
      "code": "cout << coun << endl ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "coun2 = 0 , coun2 = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        4
      ],
      "mod_code": [
        "cout << coun ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        4,
        10
      ],
      "mod_code": [
        "cout << coun ;",
        "s >> s ;",
        "if ( ! s [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        4,
        10,
        8
      ],
      "mod_code": [
        "cout << coun ;",
        "s >> s ;",
        "if ( ! s [ j ] )",
        "coun2 = 0 , coun2 = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        4,
        10,
        12
      ],
      "mod_code": [
        "cout << coun ;",
        "s >> s ;",
        "if ( ! s [ j ] )",
        "else if ( ! s [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        4,
        10,
        9
      ],
      "mod_code": [
        "cout << coun ;",
        "s >> s ;",
        "if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        4,
        8
      ],
      "mod_code": [
        "cout << coun ;",
        "s >> s ;",
        "coun2 = 0 , coun2 = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        4,
        8,
        12
      ],
      "mod_code": [
        "cout << coun ;",
        "s >> s ;",
        "coun2 = 0 , coun2 = 0 ;",
        "else if ( ! s [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        4,
        8,
        9
      ],
      "mod_code": [
        "cout << coun ;",
        "s >> s ;",
        "coun2 = 0 , coun2 = 0 ;",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        4,
        12
      ],
      "mod_code": [
        "cout << coun ;",
        "s >> s ;",
        "else if ( ! s [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        4,
        12,
        9
      ],
      "mod_code": [
        "cout << coun ;",
        "s >> s ;",
        "else if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        4,
        9
      ],
      "mod_code": [
        "cout << coun ;",
        "s >> s ;",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        10,
        8
      ],
      "mod_code": [
        "cout << coun ;",
        "if ( ! s [ j ] )",
        "coun2 = 0 , coun2 = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        10,
        8,
        12
      ],
      "mod_code": [
        "cout << coun ;",
        "if ( ! s [ j ] )",
        "coun2 = 0 , coun2 = 0 ;",
        "else if ( ! s [ j ] )"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        10,
        8,
        9
      ],
      "mod_code": [
        "cout << coun ;",
        "if ( ! s [ j ] )",
        "coun2 = 0 , coun2 = 0 ;",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        10,
        12,
        9
      ],
      "mod_code": [
        "cout << coun ;",
        "if ( ! s [ j ] )",
        "else if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        10,
        9
      ],
      "mod_code": [
        "cout << coun ;",
        "if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        8
      ],
      "mod_code": [
        "cout << coun ;",
        "coun2 = 0 , coun2 = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        8,
        12
      ],
      "mod_code": [
        "cout << coun ;",
        "coun2 = 0 , coun2 = 0 ;",
        "else if ( ! s [ j ] )"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        8,
        12,
        9
      ],
      "mod_code": [
        "cout << coun ;",
        "coun2 = 0 , coun2 = 0 ;",
        "else if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        8,
        9
      ],
      "mod_code": [
        "cout << coun ;",
        "coun2 = 0 , coun2 = 0 ;",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        12,
        9
      ],
      "mod_code": [
        "cout << coun ;",
        "else if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        9
      ],
      "mod_code": [
        "cout << coun ;",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "s >> s ;",
        "if ( ! s [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( ! s [ j ] )",
        "coun2 = 0 , coun2 = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        8,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "if ( ! s [ j ] )",
        "coun2 = 0 , coun2 = 0 ;",
        "else if ( ! s [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        8,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "if ( ! s [ j ] )",
        "coun2 = 0 , coun2 = 0 ;",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "if ( ! s [ j ] )",
        "else if ( ! s [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        12,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "if ( ! s [ j ] )",
        "else if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "coun2 = 0 , coun2 = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        8,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "coun2 = 0 , coun2 = 0 ;",
        "else if ( ! s [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        8,
        12,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "coun2 = 0 , coun2 = 0 ;",
        "else if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        8,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "coun2 = 0 , coun2 = 0 ;",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "else if ( ! s [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        12,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "else if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "if ( ! s [ j ] )",
        "coun2 = 0 , coun2 = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        8,
        12
      ],
      "mod_code": [
        "if ( ! s [ j ] )",
        "coun2 = 0 , coun2 = 0 ;",
        "else if ( ! s [ j ] )"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        8,
        12,
        9
      ],
      "mod_code": [
        "if ( ! s [ j ] )",
        "coun2 = 0 , coun2 = 0 ;",
        "else if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        8,
        9
      ],
      "mod_code": [
        "if ( ! s [ j ] )",
        "coun2 = 0 , coun2 = 0 ;",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        12,
        9
      ],
      "mod_code": [
        "if ( ! s [ j ] )",
        "else if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "coun2 = 0 , coun2 = 0 ;",
        "else if ( ! s [ j ] )"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        12,
        9
      ],
      "mod_code": [
        "coun2 = 0 , coun2 = 0 ;",
        "else if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "coun2 = 0 , coun2 = 0 ;",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘coun2’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "else if ( ! s [ j ] )",
        "for ( j = i ; j < len ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}