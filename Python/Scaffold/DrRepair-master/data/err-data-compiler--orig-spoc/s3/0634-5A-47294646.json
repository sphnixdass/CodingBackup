{
  "meta": {
    "index": 634,
    "hitid": "3SU800BH86M9FKGT69NBV52RDUFUQS",
    "workerid": "A1APYLD4DUK33J",
    "probid": "5A",
    "subid": "47294646"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string st",
      "code": "string st ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers n , sum with n = 0 sum = 0",
      "code": "int n = 0 , sum = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while read line from cin to st",
      "code": "while ( getline ( cin , st ) )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if size of st is 0 , break loop",
      "code": "if ( st . size ( ) == 0 ) break ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if st [ 0 ] is ' + '",
      "code": "if ( st [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment n",
      "code": "n ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else if st [ 0 ] is ' - '",
      "code": "else if ( st [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "decrement n",
      "code": "n -- ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "create integer cnt with cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "for i = 0 , increment i",
      "code": "for ( int i = 0 ; ; i ++ )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "if st [ i ] is ' : ' , break loop",
      "code": "if ( st [ i ] == ' : ' ) break ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "increment sum by ( size of st - cnt ) * n",
      "code": "sum += ( st . size ( ) - cnt ) * n ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print sum print newline",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int st ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n , sum = 0 , sum = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( cin >> cin >> st )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( st [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "sum += ( st . substr ( st - cnt ) * n ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "while ( cin >> cin >> st )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        2,
        3,
        9
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "while ( cin >> cin >> st )",
        "do"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        2,
        3,
        9,
        5
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "while ( cin >> cin >> st )",
        "do",
        "if ( st [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        3,
        9,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "while ( cin >> cin >> st )",
        "do",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        2,
        3,
        9,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "while ( cin >> cin >> st )",
        "do",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "while ( cin >> cin >> st )",
        "if ( st [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "while ( cin >> cin >> st )",
        "if ( st [ 0 ] == \" + ' )",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "while ( cin >> cin >> st )",
        "if ( st [ 0 ] == \" + ' )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        3,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "while ( cin >> cin >> st )",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        2,
        3,
        11,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "while ( cin >> cin >> st )",
        "for ( int i = 0 ; i < i ; i ++ )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "while ( cin >> cin >> st )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        2,
        9,
        5
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "do",
        "if ( st [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        9,
        5,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "do",
        "if ( st [ 0 ] == \" + ' )",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        9,
        5,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "do",
        "if ( st [ 0 ] == \" + ' )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        9,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "do",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        2,
        9,
        11,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "do",
        "for ( int i = 0 ; i < i ; i ++ )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        2,
        9,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "do",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "if ( st [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        5,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "if ( st [ 0 ] == \" + ' )",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        5,
        11,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "if ( st [ 0 ] == \" + ' )",
        "for ( int i = 0 ; i < i ; i ++ )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        5,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "if ( st [ 0 ] == \" + ' )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        2,
        11,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "for ( int i = 0 ; i < i ; i ++ )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , sum ;",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        3,
        9,
        5
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "do",
        "if ( st [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        9,
        5,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "do",
        "if ( st [ 0 ] == \" + ' )",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        9,
        5,
        7
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "do",
        "if ( st [ 0 ] == \" + ' )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        9,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "do",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        7
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "do",
        "for ( int i = 0 ; i < i ; i ++ )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        3,
        9,
        7
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "do",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "if ( st [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        5,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "if ( st [ 0 ] == \" + ' )",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        5,
        11,
        7
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "if ( st [ 0 ] == \" + ' )",
        "for ( int i = 0 ; i < i ; i ++ )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "if ( st [ 0 ] == \" + ' )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        3,
        11,
        7
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "for ( int i = 0 ; i < i ; i ++ )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "while ( cin >> cin >> st )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "do",
        "if ( st [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        11
      ],
      "mod_code": [
        "do",
        "if ( st [ 0 ] == \" + ' )",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        11,
        7
      ],
      "mod_code": [
        "do",
        "if ( st [ 0 ] == \" + ' )",
        "for ( int i = 0 ; i < i ; i ++ )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        7
      ],
      "mod_code": [
        "do",
        "if ( st [ 0 ] == \" + ' )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "do",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        11,
        7
      ],
      "mod_code": [
        "do",
        "for ( int i = 0 ; i < i ; i ++ )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "do",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "if ( st [ 0 ] == \" + ' )",
        "for ( int i = 0 ; i < i ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        11,
        7
      ],
      "mod_code": [
        "if ( st [ 0 ] == \" + ' )",
        "for ( int i = 0 ; i < i ; i ++ )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( st [ 0 ] == \" + ' )",
        "else if ( ! st [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    }
  ]
}