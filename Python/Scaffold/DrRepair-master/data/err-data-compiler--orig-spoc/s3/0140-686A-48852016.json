{
  "meta": {
    "index": 140,
    "hitid": "39TX062QX1I9PN4MD3M2248KYMYX35",
    "workerid": "A1XZJAF9DYWJ5G",
    "probid": "686A",
    "subid": "48852016"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , d = integers with d = 0",
      "code": "int n , d = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "x , a = long long integers",
      "code": "long long x , a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "ch = character",
      "code": "char ch ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n , x",
      "code": "cin >> n >> x ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while n > 0 , decrement n then",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read ch , a",
      "code": "cin >> ch >> a ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if ch is equal to +",
      "code": "if ( ch == ' + ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "let x = x + a",
      "code": "x += a ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "otherwise",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if x is greather than or equal to a",
      "code": "if ( x >= a )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "let x = x - a",
      "code": "x -= a ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "otherwise",
      "code": "else",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment d",
      "code": "d ++ ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print x , \" \" , d",
      "code": "cout << x << ' ' << d << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "set < char > ch ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "return else ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "set < char > ch ;",
        "while ( n > 0 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        5,
        9
      ],
      "mod_code": [
        "set < char > ch ;",
        "while ( n > 0 )",
        "return else ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        10
      ],
      "mod_code": [
        "set < char > ch ;",
        "while ( n > 0 )",
        "return else ;",
        "if ( x <= a )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        6
      ],
      "mod_code": [
        "set < char > ch ;",
        "while ( n > 0 )",
        "return else ;",
        "cin >> a >> a ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::set<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        7
      ],
      "mod_code": [
        "set < char > ch ;",
        "while ( n > 0 )",
        "return else ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        5,
        10
      ],
      "mod_code": [
        "set < char > ch ;",
        "while ( n > 0 )",
        "if ( x <= a )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        5,
        10,
        6
      ],
      "mod_code": [
        "set < char > ch ;",
        "while ( n > 0 )",
        "if ( x <= a )",
        "cin >> a >> a ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::set<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        5,
        10,
        7
      ],
      "mod_code": [
        "set < char > ch ;",
        "while ( n > 0 )",
        "if ( x <= a )",
        "if ( ch == \" + \" )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "set < char > ch ;",
        "while ( n > 0 )",
        "cin >> a >> a ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::set<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        7
      ],
      "mod_code": [
        "set < char > ch ;",
        "while ( n > 0 )",
        "cin >> a >> a ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::set<char>’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "set < char > ch ;",
        "while ( n > 0 )",
        "if ( ch == \" + \" )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "set < char > ch ;",
        "return else ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        9,
        10
      ],
      "mod_code": [
        "set < char > ch ;",
        "return else ;",
        "if ( x <= a )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        9,
        10,
        6
      ],
      "mod_code": [
        "set < char > ch ;",
        "return else ;",
        "if ( x <= a )",
        "cin >> a >> a ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::set<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        9,
        10,
        7
      ],
      "mod_code": [
        "set < char > ch ;",
        "return else ;",
        "if ( x <= a )",
        "if ( ch == \" + \" )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        9,
        6
      ],
      "mod_code": [
        "set < char > ch ;",
        "return else ;",
        "cin >> a >> a ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::set<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        9,
        6,
        7
      ],
      "mod_code": [
        "set < char > ch ;",
        "return else ;",
        "cin >> a >> a ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::set<char>’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        3,
        9,
        7
      ],
      "mod_code": [
        "set < char > ch ;",
        "return else ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "set < char > ch ;",
        "if ( x <= a )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        10,
        6
      ],
      "mod_code": [
        "set < char > ch ;",
        "if ( x <= a )",
        "cin >> a >> a ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::set<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        10,
        6,
        7
      ],
      "mod_code": [
        "set < char > ch ;",
        "if ( x <= a )",
        "cin >> a >> a ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::set<char>’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        3,
        10,
        7
      ],
      "mod_code": [
        "set < char > ch ;",
        "if ( x <= a )",
        "if ( ch == \" + \" )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "set < char > ch ;",
        "cin >> a >> a ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::set<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "set < char > ch ;",
        "cin >> a >> a ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::set<char>’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "set < char > ch ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "while ( n > 0 )",
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        9,
        10
      ],
      "mod_code": [
        "while ( n > 0 )",
        "return else ;",
        "if ( x <= a )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        6
      ],
      "mod_code": [
        "while ( n > 0 )",
        "return else ;",
        "if ( x <= a )",
        "cin >> a >> a ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        7
      ],
      "mod_code": [
        "while ( n > 0 )",
        "return else ;",
        "if ( x <= a )",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        6
      ],
      "mod_code": [
        "while ( n > 0 )",
        "return else ;",
        "cin >> a >> a ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        9,
        6,
        7
      ],
      "mod_code": [
        "while ( n > 0 )",
        "return else ;",
        "cin >> a >> a ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        7
      ],
      "mod_code": [
        "while ( n > 0 )",
        "return else ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        6,
        7
      ],
      "mod_code": [
        "while ( n > 0 )",
        "if ( x <= a )",
        "cin >> a >> a ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        7
      ],
      "mod_code": [
        "while ( n > 0 )",
        "if ( x <= a )",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "while ( n > 0 )",
        "cin >> a >> a ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "while ( n > 0 )",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "return else ;",
        "if ( x <= a )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        10,
        6
      ],
      "mod_code": [
        "return else ;",
        "if ( x <= a )",
        "cin >> a >> a ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        10,
        6,
        7
      ],
      "mod_code": [
        "return else ;",
        "if ( x <= a )",
        "cin >> a >> a ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        7
      ],
      "mod_code": [
        "return else ;",
        "if ( x <= a )",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "return else ;",
        "cin >> a >> a ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        6,
        7
      ],
      "mod_code": [
        "return else ;",
        "cin >> a >> a ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "return else ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        6,
        7
      ],
      "mod_code": [
        "if ( x <= a )",
        "cin >> a >> a ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "if ( x <= a )",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "cin >> a >> a ;",
        "if ( ch == \" + \" )"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    }
  ]
}