{
  "meta": {
    "index": 310,
    "hitid": "3RWB1RTQDJHQHB813T7HZ8USC9BP8V",
    "workerid": "AIWEXPJAU66D9",
    "probid": "546A",
    "subid": "42463531"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers rate and dollar",
      "code": "int rate , dollar ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare long long number",
      "code": "long long number ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read rate , dollar and number and loop further",
      "code": "while ( cin >> rate >> dollar >> number )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create long long price",
      "code": "long long price ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "declare long long variable Need_money",
      "code": "long long Need_money ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set price to rate * ( ( number * ( number + 1 ) ) / 2 )",
      "code": "price = rate * ( ( number * ( number + 1 ) ) / 2 ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set Need_money to price - dollar",
      "code": "Need_money = price - dollar ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if Need_money is less than 0 , assign 0 to Need_money",
      "code": "if ( Need_money < 0 ) { Need_money = 0 ; }",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print Need_money",
      "code": "cout << Need_money << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long long number ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "long long price ="
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long Need_money = s . length ( ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        3,
        4
      ],
      "mod_code": [
        "cout << Need_money ;",
        "while ( cin >> rate >> rate >> number )",
        "long long price ="
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        9,
        3,
        4,
        2
      ],
      "mod_code": [
        "cout << Need_money ;",
        "while ( cin >> rate >> rate >> number )",
        "long long price =",
        "long long number ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        9,
        3,
        4,
        7
      ],
      "mod_code": [
        "cout << Need_money ;",
        "while ( cin >> rate >> rate >> number )",
        "long long price =",
        "Need_money = price - ' dollar ' ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        9,
        3,
        4,
        6
      ],
      "mod_code": [
        "cout << Need_money ;",
        "while ( cin >> rate >> rate >> number )",
        "long long price =",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        9,
        3,
        2
      ],
      "mod_code": [
        "cout << Need_money ;",
        "while ( cin >> rate >> rate >> number )",
        "long long number ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        9,
        3,
        2,
        7
      ],
      "mod_code": [
        "cout << Need_money ;",
        "while ( cin >> rate >> rate >> number )",
        "long long number ( )",
        "Need_money = price - ' dollar ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        9,
        3,
        2,
        6
      ],
      "mod_code": [
        "cout << Need_money ;",
        "while ( cin >> rate >> rate >> number )",
        "long long number ( )",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "cout << Need_money ;",
        "long long price ="
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        9,
        4,
        2
      ],
      "mod_code": [
        "cout << Need_money ;",
        "long long price =",
        "long long number ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        9,
        4,
        2,
        7
      ],
      "mod_code": [
        "cout << Need_money ;",
        "long long price =",
        "long long number ( )",
        "Need_money = price - ' dollar ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        9,
        4,
        2,
        6
      ],
      "mod_code": [
        "cout << Need_money ;",
        "long long price =",
        "long long number ( )",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        9,
        4,
        7
      ],
      "mod_code": [
        "cout << Need_money ;",
        "long long price =",
        "Need_money = price - ' dollar ' ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        9,
        4,
        7,
        6
      ],
      "mod_code": [
        "cout << Need_money ;",
        "long long price =",
        "Need_money = price - ' dollar ' ;",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        9,
        4,
        6
      ],
      "mod_code": [
        "cout << Need_money ;",
        "long long price =",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "cout << Need_money ;",
        "long long number ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        9,
        2,
        7
      ],
      "mod_code": [
        "cout << Need_money ;",
        "long long number ( )",
        "Need_money = price - ' dollar ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        9,
        2,
        7,
        6
      ],
      "mod_code": [
        "cout << Need_money ;",
        "long long number ( )",
        "Need_money = price - ' dollar ' ;",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        9,
        2,
        6
      ],
      "mod_code": [
        "cout << Need_money ;",
        "long long number ( )",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "while ( cin >> rate >> rate >> number )",
        "long long price ="
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        3,
        4,
        2
      ],
      "mod_code": [
        "while ( cin >> rate >> rate >> number )",
        "long long price =",
        "long long number ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        3,
        4,
        2,
        7
      ],
      "mod_code": [
        "while ( cin >> rate >> rate >> number )",
        "long long price =",
        "long long number ( )",
        "Need_money = price - ' dollar ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        3,
        4,
        2,
        6
      ],
      "mod_code": [
        "while ( cin >> rate >> rate >> number )",
        "long long price =",
        "long long number ( )",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "while ( cin >> rate >> rate >> number )",
        "long long price =",
        "Need_money = price - ' dollar ' ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        6
      ],
      "mod_code": [
        "while ( cin >> rate >> rate >> number )",
        "long long price =",
        "Need_money = price - ' dollar ' ;",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "while ( cin >> rate >> rate >> number )",
        "long long price =",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "while ( cin >> rate >> rate >> number )",
        "long long number ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        3,
        2,
        7
      ],
      "mod_code": [
        "while ( cin >> rate >> rate >> number )",
        "long long number ( )",
        "Need_money = price - ' dollar ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        3,
        2,
        7,
        6
      ],
      "mod_code": [
        "while ( cin >> rate >> rate >> number )",
        "long long number ( )",
        "Need_money = price - ' dollar ' ;",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        3,
        2,
        6
      ],
      "mod_code": [
        "while ( cin >> rate >> rate >> number )",
        "long long number ( )",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "long long price =",
        "long long number ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        4,
        2,
        7
      ],
      "mod_code": [
        "long long price =",
        "long long number ( )",
        "Need_money = price - ' dollar ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        4,
        2,
        7,
        6
      ],
      "mod_code": [
        "long long price =",
        "long long number ( )",
        "Need_money = price - ' dollar ' ;",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        4,
        2,
        6
      ],
      "mod_code": [
        "long long price =",
        "long long number ( )",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "long long price =",
        "Need_money = price - ' dollar ' ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        7,
        6
      ],
      "mod_code": [
        "long long price =",
        "Need_money = price - ' dollar ' ;",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "long long price =",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "long long number ( )",
        "Need_money = price - ' dollar ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        2,
        7,
        6
      ],
      "mod_code": [
        "long long number ( )",
        "Need_money = price - ' dollar ' ;",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "long long number ( )",
        "price *= ( ( number * ( number + 1 ) ) / 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘while’"
    }
  ]
}