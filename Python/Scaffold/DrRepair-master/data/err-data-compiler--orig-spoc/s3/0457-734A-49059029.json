{
  "meta": {
    "index": 457,
    "hitid": "3AA88CN98PX4LQ23350324WVARFYKD",
    "workerid": "A1APYLD4DUK33J",
    "probid": "734A",
    "subid": "49059029"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer numOfGames",
      "code": "int numOfGames ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read numOfGames",
      "code": "cin >> numOfGames ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integer anton with anton = 0",
      "code": "int anton = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create integer danik with danik = 0",
      "code": "int danik = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to numOfGames exclusive",
      "code": "for ( int i = 0 ; i < numOfGames ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s [ i ] is 65",
      "code": "if ( s [ i ] == 65 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment anton",
      "code": "anton ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if s [ i ] is 68",
      "code": "else if ( s [ i ] == 68 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment danik",
      "code": "danik ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if anton is greater than danik",
      "code": "if ( anton > danik )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" Anton \" print newline",
      "code": "cout << \" Anton \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else if anton is less than danik",
      "code": "else if ( anton < danik )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" Danik \" print newline",
      "code": "cout << \" Danik \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print \" Friendship \" print newline",
      "code": "cout << \" Friendship \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < numOfGames ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        14,
        4
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 68 ' )",
        "if ( anton >= danik )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        14,
        4,
        18
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 68 ' )",
        "if ( anton >= danik )",
        "s >> s ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        14,
        4,
        15
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 68 ' )",
        "if ( anton >= danik )",
        "s >> s ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        14,
        18
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 68 ' )",
        "if ( anton >= danik )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        14,
        18,
        15
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 68 ' )",
        "if ( anton >= danik )",
        "do",
        "cout << \" Anton \" ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 68 ' )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        4,
        18
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 68 ' )",
        "s >> s ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        4,
        18,
        15
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 68 ' )",
        "s >> s ;",
        "do",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        4,
        15
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 68 ' )",
        "s >> s ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 68 ' )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        18,
        15
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 68 ' )",
        "do",
        "cout << \" Anton \" ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        14,
        4
      ],
      "mod_code": [
        "if ( anton >= danik )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        4,
        10
      ],
      "mod_code": [
        "if ( anton >= danik )",
        "s >> s ;",
        "else if ( ! s [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        4,
        10,
        18
      ],
      "mod_code": [
        "if ( anton >= danik )",
        "s >> s ;",
        "else if ( ! s [ i ] )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        4,
        10,
        15
      ],
      "mod_code": [
        "if ( anton >= danik )",
        "s >> s ;",
        "else if ( ! s [ i ] )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        4,
        18
      ],
      "mod_code": [
        "if ( anton >= danik )",
        "s >> s ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        4,
        18,
        15
      ],
      "mod_code": [
        "if ( anton >= danik )",
        "s >> s ;",
        "do",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        4,
        15
      ],
      "mod_code": [
        "if ( anton >= danik )",
        "s >> s ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        10,
        18
      ],
      "mod_code": [
        "if ( anton >= danik )",
        "else if ( ! s [ i ] )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        14,
        10,
        18,
        15
      ],
      "mod_code": [
        "if ( anton >= danik )",
        "else if ( ! s [ i ] )",
        "do",
        "cout << \" Anton \" ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "if ( anton >= danik )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        14,
        18,
        15
      ],
      "mod_code": [
        "if ( anton >= danik )",
        "do",
        "cout << \" Anton \" ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "s >> s ;",
        "else if ( ! s [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        18
      ],
      "mod_code": [
        "s >> s ;",
        "else if ( ! s [ i ] )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        18,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "else if ( ! s [ i ] )",
        "do",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "else if ( ! s [ i ] )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "s >> s ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        18,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "do",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "else if ( ! s [ i ] )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        18,
        15
      ],
      "mod_code": [
        "else if ( ! s [ i ] )",
        "do",
        "cout << \" Anton \" ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        18,
        15
      ],
      "mod_code": [
        "do",
        "cout << \" Anton \" ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    }
  ]
}