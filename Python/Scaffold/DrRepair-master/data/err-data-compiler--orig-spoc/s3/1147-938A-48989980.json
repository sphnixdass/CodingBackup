{
  "meta": {
    "index": 1147,
    "hitid": "3SBNLSTU6UZWCA6Y7AGZCYA7WCNZDT",
    "workerid": "AIWEXPJAU66D9",
    "probid": "938A",
    "subid": "48989980"
  },
  "lines": [
    {
      "line": 0,
      "text": "create long long array ar with 1000008 elements",
      "code": "long long ar [ 1000008 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare vector of characters vi",
      "code": "vector < char > vi ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "bool function isv with character argument ch",
      "code": "bool isv ( char ch )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "if ch = ' a ' or ch = ' e ' or ch = ' i ' or ch = ' o ' or ch = ' u ' or ch = ' y ' return 1",
      "code": "if ( ch == ' a ' or ch == ' e ' or ch == ' i ' or ch == ' o ' or ch == ' u ' or ch == ' y ' ) return 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create long long n",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "push ' x ' to the end of vi",
      "code": "vi . push_back ( ' x ' ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if isv ( s [ i ] ) returned false",
      "code": "if ( ! isv ( s [ i ] ) )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "push s [ i ] to the end of vi",
      "code": "vi . push_back ( s [ i ] ) ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if isv ( length of vi [ vi - 1 ] ) ) returned false , push s [ i ] to the end of vi",
      "code": "if ( ! isv ( vi [ vi . size ( ) - 1 ] ) ) vi . push_back ( s [ i ] ) ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 1 to length of vi exclusive print vi [ i ]",
      "code": "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "vector < string > vi ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘std::vector<std::__cxx11::basic_string<char> >::push_back(char)’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "bool s ;"
      ],
      "err_line": 12,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        ". . push_back ( ' x ' ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "vi . push ( s [ i ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘class std::vector<char>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( isv ( vi . size ( ) ) != false ) { vi . push ( s [ i ] ) ; }"
      ],
      "err_line": 16,
      "err_msg": "‘class std::vector<char>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( int i = 1 ; i < vi . length ( ) ; i ++ ) cout << vi [ i ] << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘class std::vector<char>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        3,
        16,
        19,
        10
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        16,
        19,
        15
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        16,
        2,
        10
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "bool isv ( bool ch )",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        16,
        2,
        15
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "bool isv ( bool ch )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        16,
        10
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        16,
        10,
        15
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "s >> s ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        16,
        15
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        19,
        2,
        10
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "bool isv ( bool ch )",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        19,
        2,
        15
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "bool isv ( bool ch )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        19,
        10
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        19,
        10,
        15
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "s >> s ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        19,
        15
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        2,
        10
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "bool isv ( bool ch )",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        10,
        15
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "bool isv ( bool ch )",
        "s >> s ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        15
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "bool isv ( bool ch )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        10,
        15
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "s >> s ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "if ( ch == ' a ' || ch == ' e ' || ch == ' e ' || ch == ' i ' || ch == ' u ' || ch == ' y ' || ch == ' y ' ) return 1 ;",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        19,
        2,
        10
      ],
      "mod_code": [
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "bool isv ( bool ch )",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        19,
        2,
        15
      ],
      "mod_code": [
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "bool isv ( bool ch )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        19,
        10
      ],
      "mod_code": [
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        19,
        10,
        15
      ],
      "mod_code": [
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "s >> s ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        19,
        15
      ],
      "mod_code": [
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        2,
        10
      ],
      "mod_code": [
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "bool isv ( bool ch )",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        2,
        10,
        15
      ],
      "mod_code": [
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "bool isv ( bool ch )",
        "s >> s ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        2,
        15
      ],
      "mod_code": [
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "bool isv ( bool ch )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        10
      ],
      "mod_code": [
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        10,
        15
      ],
      "mod_code": [
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "s >> s ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        15
      ],
      "mod_code": [
        "if ( isv ( vi . size ( ) ) != false ) { vi . push_back ( s [ i ] ) ; }",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        2,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "bool isv ( bool ch )",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        2,
        10,
        15
      ],
      "mod_code": [
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "bool isv ( bool ch )",
        "s >> s ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        2,
        15
      ],
      "mod_code": [
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "bool isv ( bool ch )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        10,
        15
      ],
      "mod_code": [
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "s >> s ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        15
      ],
      "mod_code": [
        "for ( int i = 1 ; i < vi . size ( ) ; i ++ ) cout << vi [ i ] << endl ;",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "bool isv ( bool ch )",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        15
      ],
      "mod_code": [
        "bool isv ( bool ch )",
        "s >> s ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "bool isv ( bool ch )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}