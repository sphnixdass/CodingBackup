{
  "meta": {
    "index": 2829,
    "hitid": "3PKJ68EHDNQNOB6WBKW3FP1F6T2HJ9",
    "workerid": "A1APYLD4DUK33J",
    "probid": "454A",
    "subid": "49076523"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integers t , n , m , i , j , ans , k , a , b , c , d , e , f , sz , q , x",
      "code": "int t , n , m , i , j , ans , k , a , b , c , d , e , f , sz , q , x ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare strings s , s2 , s3 , s4 , s5 , s6",
      "code": "string s , s2 , s3 , s4 , s5 , s6 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integer arrays ar size integer casted 1e5 + 10 , ar2 size integer casted 1e5 + 10",
      "code": "int ar [ ( int ) ( 1e5 + 10 ) ] , ar2 [ ( int ) ( 1e5 + 10 ) ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare brainfuck with no arguments , returning void",
      "code": "void brainfuck ( ) ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "run brainfuck",
      "code": "brainfuck ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "declare brainfuck with no arguments returning void",
      "code": "void brainfuck ( )",
      "indent": 0
    },
    {
      "line": 9,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "let a be ( n + 1 ) / 2",
      "code": "a = ( n + 1 ) / 2 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let b be a - 2",
      "code": "b = a - 2 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for j = 1 to n inclusive",
      "code": "for ( j = 1 ; j <= n ; j ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if a is greater than or equal to i and ( j is greater than or equal to a - i + 1 and j is less than or equal to a + i - 1 )",
      "code": "if ( a >= i && ( j >= a - i + 1 && j <= a + i - 1 ) )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "print \" D \"",
      "code": "cout << \" D \" ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "else if a is less than i and ( j is less than or equal to a - b and j is less than or equal to a + b )",
      "code": "else if ( a < i && ( j >= a - b && j <= a + b ) )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "print \" D \"",
      "code": "cout << \" D \" ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 19,
      "text": "print \" * \"",
      "code": "cout << \" * \" ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if a is less than i , decrement b",
      "code": "if ( a < i ) b -- ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print \" \\ n \"",
      "code": "cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "void brainfuck ( )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , d , e , d , e , f , sz , q , x ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s , s2 , s4 , s4 , s5 , s6 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::__cxx11::string s4’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , size [ ( int ) 1e5 + 10 ] ;"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "void brainfuck ( ) { }"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘void brainfuck()’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "-- brainfuck ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "void brainfuck ( ) { }"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "cout << \" * \""
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        2,
        3
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "void brainfuck ( )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        16
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "void brainfuck ( )",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        22
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "void brainfuck ( )",
        "<< \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        9
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "void brainfuck ( )",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        2,
        16
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        2,
        16,
        22
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "<< \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        2,
        16,
        9
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        2,
        22
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        2,
        22,
        9
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "<< \" \\n \" ;",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        2,
        9
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "void brainfuck ( )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        3,
        16
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "void brainfuck ( )",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        3,
        16,
        22
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "void brainfuck ( )",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "<< \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        3,
        16,
        9
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "void brainfuck ( )",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        3,
        22
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "void brainfuck ( )",
        "<< \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        3,
        22,
        9
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "void brainfuck ( )",
        "<< \" \\n \" ;",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        3,
        9
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "void brainfuck ( )",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        16,
        22
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "<< \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        16,
        22,
        9
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "<< \" \\n \" ;",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        16,
        9
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        22,
        9
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "<< \" \\n \" ;",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int t , n , m , i , j , k , k , b , b , e , d , e , f , sz , q , x ;",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "void brainfuck ( )"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        3,
        16
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "void brainfuck ( )",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        3,
        16,
        22
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "void brainfuck ( )",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "<< \" \\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        3,
        16,
        9
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "void brainfuck ( )",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        3,
        22
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "void brainfuck ( )",
        "<< \" \\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        3,
        22,
        9
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "void brainfuck ( )",
        "<< \" \\n \" ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        3,
        9
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "void brainfuck ( )",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        16,
        22
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "<< \" \\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        16,
        22,
        9
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "<< \" \\n \" ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        16,
        9
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        22
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        22,
        9
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "<< \" \\n \" ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "int ar [ 1e5 + 10 ] , 10 [ ( int ) 1e5 + 10 ] ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "size of array ‘ar’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "void brainfuck ( )",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        3,
        16,
        22
      ],
      "mod_code": [
        "void brainfuck ( )",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "<< \" \\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        3,
        16,
        22,
        9
      ],
      "mod_code": [
        "void brainfuck ( )",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "<< \" \\n \" ;",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        3,
        16,
        9
      ],
      "mod_code": [
        "void brainfuck ( )",
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "void brainfuck ( )",
        "<< \" \\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        3,
        22,
        9
      ],
      "mod_code": [
        "void brainfuck ( )",
        "<< \" \\n \" ;",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "void brainfuck ( )",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        16,
        22
      ],
      "mod_code": [
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "<< \" \\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        22,
        9
      ],
      "mod_code": [
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "<< \" \\n \" ;",
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "else if ( a < i && ( j <= a - b && j <= a + b ) )",
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        9
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "‘N’ was not declared in this scope"
    }
  ]
}