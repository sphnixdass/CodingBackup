{
  "meta": {
    "index": 458,
    "hitid": "3BC9H1KCYU6VGQWKSJJ6QFQQXYOYW9",
    "workerid": "AGRKG3YT3KMD8",
    "probid": "734A",
    "subid": "42242323"
  },
  "lines": [
    {
      "line": 0,
      "text": "Declare string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "integers a , d , i n , and m",
      "code": "int a , d , i , n , m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "input m",
      "code": "cin >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "input s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set n equal to the length of s",
      "code": "n = s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "a and d are 0",
      "code": "a = d = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "i from 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if element i in s is A",
      "code": "if ( s [ i ] == ' A ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment a",
      "code": "a ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if element i in s is D",
      "code": "else if ( s [ i ] == ' D ' )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment d",
      "code": "d ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if a is greater than d",
      "code": "if ( a > d )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "output Anton and endline",
      "code": "cout << \" Anton \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else if a is less than d",
      "code": "else if ( a < d )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "output Danik and endline",
      "code": "cout << \" Danik \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "output Friendship and endline",
      "code": "cout << \" Friendship \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int a , d , i , m , m ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( s . count ( i ) == ' A ' )"
      ],
      "err_line": 8,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘count’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( s . count ( i ) == D )"
      ],
      "err_line": 10,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘count’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << Anton << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << Danik << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘Danik’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "long long a = 0 , d = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "conflicting declaration ‘long long int a’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( s . compare ( i ) == ' A ' )"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( s . compare ( i ) == D )"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "int a = 0 , d = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == ' A ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        10
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == ' A ' )",
        "if ( s . count ( i ) == D )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        14
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == ' A ' )",
        "cout << Anton << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        16
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == ' A ' )",
        "cout << Danik << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        6,
        10
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == D )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        6,
        10,
        14
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == D )",
        "cout << Anton << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        6,
        10,
        16
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == D )",
        "cout << Danik << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        6,
        14
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "int a = 0 , d = 0 ;",
        "cout << Anton << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        6,
        14,
        16
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "int a = 0 , d = 0 ;",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        6,
        16
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "int a = 0 , d = 0 ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "if ( s . count ( i ) == ' A ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        8,
        10
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "if ( s . count ( i ) == ' A ' )",
        "if ( s . count ( i ) == D )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        8,
        10,
        14
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "if ( s . count ( i ) == ' A ' )",
        "if ( s . count ( i ) == D )",
        "cout << Anton << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        8,
        10,
        16
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "if ( s . count ( i ) == ' A ' )",
        "if ( s . count ( i ) == D )",
        "cout << Danik << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        8,
        14
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "if ( s . count ( i ) == ' A ' )",
        "cout << Anton << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        8,
        14,
        16
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "if ( s . count ( i ) == ' A ' )",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        8,
        16
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "if ( s . count ( i ) == ' A ' )",
        "cout << Danik << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "if ( s . count ( i ) == D )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        10,
        14
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "if ( s . count ( i ) == D )",
        "cout << Anton << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        10,
        14,
        16
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "if ( s . count ( i ) == D )",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        10,
        16
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "if ( s . count ( i ) == D )",
        "cout << Danik << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "cout << Anton << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        14,
        16
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "int a , d , i , m , m ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == ' A ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        8,
        10
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == ' A ' )",
        "if ( s . count ( i ) == D )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        14
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == ' A ' )",
        "if ( s . count ( i ) == D )",
        "cout << Anton << endl ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        16
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == ' A ' )",
        "if ( s . count ( i ) == D )",
        "cout << Danik << endl ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        8,
        14
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == ' A ' )",
        "cout << Anton << endl ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        8,
        14,
        16
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == ' A ' )",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        8,
        16
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == ' A ' )",
        "cout << Danik << endl ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == D )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        10,
        14
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == D )",
        "cout << Anton << endl ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        10,
        14,
        16
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == D )",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        10,
        16
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "if ( s . count ( i ) == D )",
        "cout << Danik << endl ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "cout << Anton << endl ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        14,
        16
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "int a = 0 , d = 0 ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "if ( s . count ( i ) == ' A ' )",
        "if ( s . count ( i ) == D )"
      ],
      "err_line": 8,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘count’"
    },
    {
      "mod_line": [
        8,
        10,
        14
      ],
      "mod_code": [
        "if ( s . count ( i ) == ' A ' )",
        "if ( s . count ( i ) == D )",
        "cout << Anton << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘count’"
    },
    {
      "mod_line": [
        8,
        10,
        14,
        16
      ],
      "mod_code": [
        "if ( s . count ( i ) == ' A ' )",
        "if ( s . count ( i ) == D )",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘count’"
    },
    {
      "mod_line": [
        8,
        10,
        16
      ],
      "mod_code": [
        "if ( s . count ( i ) == ' A ' )",
        "if ( s . count ( i ) == D )",
        "cout << Danik << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘count’"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "if ( s . count ( i ) == ' A ' )",
        "cout << Anton << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘count’"
    },
    {
      "mod_line": [
        8,
        14,
        16
      ],
      "mod_code": [
        "if ( s . count ( i ) == ' A ' )",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘count’"
    },
    {
      "mod_line": [
        8,
        16
      ],
      "mod_code": [
        "if ( s . count ( i ) == ' A ' )",
        "cout << Danik << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘count’"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "if ( s . count ( i ) == D )",
        "cout << Anton << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘count’"
    },
    {
      "mod_line": [
        10,
        14,
        16
      ],
      "mod_code": [
        "if ( s . count ( i ) == D )",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘count’"
    },
    {
      "mod_line": [
        10,
        16
      ],
      "mod_code": [
        "if ( s . count ( i ) == D )",
        "cout << Danik << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘count’"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘Anton’ was not declared in this scope"
    }
  ]
}