{
  "meta": {
    "index": 474,
    "hitid": "3OPLMF3EU5HLTXG7H33T0OB3V7GNLF",
    "workerid": "A2UFGZT4QUY5ON",
    "probid": "734A",
    "subid": "48876577"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let len , anton and danik be integers with anton and danik equal to 0",
      "code": "int len , anton = 0 , danik = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read len",
      "code": "cin >> len ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to the length of len",
      "code": "for ( int i = 0 ; i < len ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s [ i ] is A",
      "code": "if ( s [ i ] == ' A ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increase anton by 1",
      "code": "anton += 1 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment danik",
      "code": "danik += 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if anton is greater than danik",
      "code": "if ( anton > danik )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print Anton",
      "code": "cout << \" Anton \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else if danik is greater than anton",
      "code": "else if ( danik > anton )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print Danik",
      "code": "cout << \" Danik \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print Friendship",
      "code": "cout << \" Friendship \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << Anton << endl ;"
      ],
      "err_line": 13,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << Danik << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘Danik’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> len )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len . length ( ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << Anton ;"
      ],
      "err_line": 13,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << Danik ;"
      ],
      "err_line": 15,
      "err_msg": "‘Danik’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1,
        5,
        13
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Anton << endl ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1,
        5,
        13,
        15
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1,
        5,
        13,
        4
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Anton << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        5,
        15
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Danik << endl ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1,
        5,
        15,
        13
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Danik << endl ;",
        "cout << Anton ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1,
        5,
        15,
        4
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Danik << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        5,
        13
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Anton ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1,
        5,
        13,
        4
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Anton ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "cout << Anton << endl ;"
      ],
      "err_line": 13,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        13,
        15
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 13,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        13,
        15,
        4
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        13,
        4
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "cout << Anton << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘Danik’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        13
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "cout << Danik << endl ;",
        "cout << Anton ;"
      ],
      "err_line": 13,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        13,
        4
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "cout << Danik << endl ;",
        "cout << Anton ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        15,
        4
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "cout << Danik << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "cout << Anton ;"
      ],
      "err_line": 13,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        13,
        4
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "cout << Anton ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int len , anton , danik = 0 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Anton << endl ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        5,
        13,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        5,
        13,
        15,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Anton << endl ;",
        "cout << Danik << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        13,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Anton << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Danik << endl ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        5,
        15,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Danik << endl ;",
        "cout << Anton ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        5,
        15,
        13,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Danik << endl ;",
        "cout << Anton ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        15,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Danik << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Anton ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        5,
        13,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "cout << Anton ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len . size ( ) ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 13,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        4
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "cout << Danik << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "cout << Danik << endl ;",
        "cout << Anton ;"
      ],
      "err_line": 13,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        13,
        4
      ],
      "mod_code": [
        "cout << Danik << endl ;",
        "cout << Anton ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "cout << Danik << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "cout << Anton ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}