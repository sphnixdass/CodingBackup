{
  "meta": {
    "index": 799,
    "hitid": "3GMLHYZ0LERIOM7FXJ458R5TD55YUD",
    "workerid": "A277IUJ2DY3GZQ",
    "probid": "81A",
    "subid": "47894142"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "Let s be a string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "Create integer l and set it to length of s",
      "code": "int l = s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to l exclusive",
      "code": "for ( int i = 1 ; i < l ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ i ] equals s [ i - 1 ]",
      "code": "if ( s [ i ] == s [ i - 1 ] )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "erase characters i - 1 and i from s",
      "code": "s . erase ( i - 1 , 2 ) ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "set i = i - 2",
      "code": "i -= 2 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "Print s",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int l = strlen ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "s . erase ( i - 1 , i ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        10
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "s . erase ( i - 1 , i ) ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        5
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "s . erase ( i - 1 , i ) ;",
        "cout << \" YES\\n \" ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        1
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "s . erase ( i - 1 , i ) ;",
        "cout << \" YES\\n \" ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        2
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "s . erase ( i - 1 , i ) ;",
        "cout << \" YES\\n \" ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        5
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "s . erase ( i - 1 , i ) ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        5,
        1
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "s . erase ( i - 1 , i ) ;",
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6,
        5,
        2
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "s . erase ( i - 1 , i ) ;",
        "if ( s [ i ] == ' [ ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        1
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "s . erase ( i - 1 , i ) ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6,
        1,
        2
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "s . erase ( i - 1 , i ) ;",
        "char s ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "s . erase ( i - 1 , i ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        3,
        10,
        5
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "cout << \" YES\\n \" ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        3,
        10,
        5,
        1
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "cout << \" YES\\n \" ;",
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        5,
        2
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "cout << \" YES\\n \" ;",
        "if ( s [ i ] == ' [ ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        10,
        1
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "cout << \" YES\\n \" ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        1,
        2
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "cout << \" YES\\n \" ;",
        "char s ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        2
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "cout << \" YES\\n \" ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        3,
        5,
        1
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        1,
        2
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "if ( s [ i ] == ' [ ' )",
        "char s ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        2
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "if ( s [ i ] == ' [ ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        2
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "char s ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int l = strlen ( s ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        10,
        5,
        1
      ],
      "mod_code": [
        "s . erase ( i - 1 , i ) ;",
        "cout << \" YES\\n \" ;",
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        6,
        10,
        5,
        2
      ],
      "mod_code": [
        "s . erase ( i - 1 , i ) ;",
        "cout << \" YES\\n \" ;",
        "if ( s [ i ] == ' [ ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        10,
        1
      ],
      "mod_code": [
        "s . erase ( i - 1 , i ) ;",
        "cout << \" YES\\n \" ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        6,
        10,
        1,
        2
      ],
      "mod_code": [
        "s . erase ( i - 1 , i ) ;",
        "cout << \" YES\\n \" ;",
        "char s ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10,
        2
      ],
      "mod_code": [
        "s . erase ( i - 1 , i ) ;",
        "cout << \" YES\\n \" ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        5,
        1
      ],
      "mod_code": [
        "s . erase ( i - 1 , i ) ;",
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        6,
        5,
        1,
        2
      ],
      "mod_code": [
        "s . erase ( i - 1 , i ) ;",
        "if ( s [ i ] == ' [ ' )",
        "char s ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        5,
        2
      ],
      "mod_code": [
        "s . erase ( i - 1 , i ) ;",
        "if ( s [ i ] == ' [ ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "s . erase ( i - 1 , i ) ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "s . erase ( i - 1 , i ) ;",
        "char s ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "s . erase ( i - 1 , i ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        5,
        1
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        10,
        5,
        1,
        2
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "if ( s [ i ] == ' [ ' )",
        "char s ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        5,
        2
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "if ( s [ i ] == ' [ ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        10,
        1,
        2
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "char s ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5,
        1,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' )",
        "char s ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char s ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    }
  ]
}