{
  "meta": {
    "index": 98,
    "hitid": "33EEIIWHK719SZ5TBZXGRR4AS3YVQX",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "391A",
    "subid": "47849513"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "str = string array",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "integers = count = 0 , i = 0",
      "code": "int count = 0 , i = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if i is less than ( long long then do the following str . length (",
      "code": "while ( i < ( long long ) str . length ( ) )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "long long integers l = 1",
      "code": "long long l = 1 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if str [ i ] = str [ i + 1 ] then do the following",
      "code": "while ( str [ i ] == str [ i + 1 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "add one to i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "add one to l",
      "code": "l ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if l modulo 2 is 0 then add one to the variable count",
      "code": "if ( l % 2 == 0 ) count ++ ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "add one to i",
      "code": "i ++ ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "output count",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 4,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        4,
        6,
        2
      ],
      "mod_code": [
        "if ( i < str . length ( ) )",
        "if ( str [ i ] == str [ i + 1 ] )",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        6,
        2,
        1
      ],
      "mod_code": [
        "if ( i < str . length ( ) )",
        "if ( str [ i ] == str [ i + 1 ] )",
        "gets ( str ) ;",
        "char str ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        6,
        2,
        13
      ],
      "mod_code": [
        "if ( i < str . length ( ) )",
        "if ( str [ i ] == str [ i + 1 ] )",
        "gets ( str ) ;",
        "cout << count ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        6,
        1
      ],
      "mod_code": [
        "if ( i < str . length ( ) )",
        "if ( str [ i ] == str [ i + 1 ] )",
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        4,
        6,
        1,
        13
      ],
      "mod_code": [
        "if ( i < str . length ( ) )",
        "if ( str [ i ] == str [ i + 1 ] )",
        "char str ;",
        "cout << count ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "if ( i < str . length ( ) )",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        2,
        1
      ],
      "mod_code": [
        "if ( i < str . length ( ) )",
        "gets ( str ) ;",
        "char str ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        2,
        1,
        13
      ],
      "mod_code": [
        "if ( i < str . length ( ) )",
        "gets ( str ) ;",
        "char str ;",
        "cout << count ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        2,
        13
      ],
      "mod_code": [
        "if ( i < str . length ( ) )",
        "gets ( str ) ;",
        "cout << count ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "if ( i < str . length ( ) )",
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        4,
        1,
        13
      ],
      "mod_code": [
        "if ( i < str . length ( ) )",
        "char str ;",
        "cout << count ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( str [ i ] == str [ i + 1 ] )",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        1
      ],
      "mod_code": [
        "if ( str [ i ] == str [ i + 1 ] )",
        "gets ( str ) ;",
        "char str ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2,
        1,
        13
      ],
      "mod_code": [
        "if ( str [ i ] == str [ i + 1 ] )",
        "gets ( str ) ;",
        "char str ;",
        "cout << count ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2,
        1,
        4
      ],
      "mod_code": [
        "if ( str [ i ] == str [ i + 1 ] )",
        "gets ( str ) ;",
        "char str ;",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2,
        13
      ],
      "mod_code": [
        "if ( str [ i ] == str [ i + 1 ] )",
        "gets ( str ) ;",
        "cout << count ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        13,
        4
      ],
      "mod_code": [
        "if ( str [ i ] == str [ i + 1 ] )",
        "gets ( str ) ;",
        "cout << count ;",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        4
      ],
      "mod_code": [
        "if ( str [ i ] == str [ i + 1 ] )",
        "gets ( str ) ;",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "if ( str [ i ] == str [ i + 1 ] )",
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        6,
        1,
        13
      ],
      "mod_code": [
        "if ( str [ i ] == str [ i + 1 ] )",
        "char str ;",
        "cout << count ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        6,
        1,
        13,
        4
      ],
      "mod_code": [
        "if ( str [ i ] == str [ i + 1 ] )",
        "char str ;",
        "cout << count ;",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 4,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        6,
        1,
        4
      ],
      "mod_code": [
        "if ( str [ i ] == str [ i + 1 ] )",
        "char str ;",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 4,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        6,
        13,
        4
      ],
      "mod_code": [
        "if ( str [ i ] == str [ i + 1 ] )",
        "cout << count ;",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 4,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( str [ i ] == str [ i + 1 ] )",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 4,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        13
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "cout << count ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        13,
        4
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "cout << count ;",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        4
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "gets ( str ) ;",
        "cout << count ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        13,
        4
      ],
      "mod_code": [
        "gets ( str ) ;",
        "cout << count ;",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "gets ( str ) ;",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "char str ;",
        "cout << count ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        1,
        13,
        4
      ],
      "mod_code": [
        "char str ;",
        "cout << count ;",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 4,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "char str ;",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 4,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "cout << count ;",
        "if ( i < ( long long long long long long long long ) str . length ( ) )"
      ],
      "err_line": 4,
      "err_msg": "‘long long long’ is too long for GCC"
    }
  ]
}