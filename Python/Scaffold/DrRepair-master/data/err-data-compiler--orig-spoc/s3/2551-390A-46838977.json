{
  "meta": {
    "index": 2551,
    "hitid": "3YCT0L9OMM38XABX1C0UCAPYOOGSN1",
    "workerid": "A1APYLD4DUK33J",
    "probid": "390A",
    "subid": "46838977"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant long longs N , MN , with N = 1e5 , MN = 1e9",
      "code": "const long long N = 1e5 , MN = 1e9 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long longs n , x , y , mx1 , mx2 , cnt1 , cnt2",
      "code": "long long n , x , y , mx1 , mx2 , cnt1 , cnt2 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create 2d long long array ar with size 101 by 101",
      "code": "long long ar [ 101 ] [ 101 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( long long i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read x read y",
      "code": "cin >> x >> y ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set ar [ x ] [ y ] to 1",
      "code": "ar [ x ] [ y ] = 1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if x is greater than mx1 , set mx1 to x",
      "code": "if ( x > mx1 ) { mx1 = x ; }",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if y is greater than mx2 , set mx2 to y",
      "code": "if ( y > mx2 ) { mx2 = y ; }",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to mx1 inclusive",
      "code": "for ( long long i = 0 ; i <= mx1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for j = 0 to mx2 inclusive",
      "code": "for ( long long j = 0 ; j <= mx2 ; j ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if ar [ i ] [ j ] is 1",
      "code": "if ( ar [ i ] [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increment cnt1",
      "code": "cnt1 ++ ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for j = 0 to mx2 inclusive",
      "code": "for ( long long j = 0 ; j <= mx2 ; j ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for i = 0 to mx1 inclusive",
      "code": "for ( long long i = 0 ; i <= mx1 ; i ++ )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if ar [ i ] [ j ] is 1",
      "code": "if ( ar [ i ] [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "increment cnt2",
      "code": "cnt2 ++ ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print minimum of cnt1 and cnt2",
      "code": "cout << min ( cnt1 , cnt2 ) ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print \" \\ n \"",
      "code": "cout << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const long long int’)"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        28
      ],
      "mod_code": [
        "cout << min ( cnt1 , cnt2 ) << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        27,
        28,
        21
      ],
      "mod_code": [
        "cout << min ( cnt1 , cnt2 ) << endl ;",
        "<< \" \\n \" ;",
        "if ( ar [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        27,
        28,
        21,
        15
      ],
      "mod_code": [
        "cout << min ( cnt1 , cnt2 ) << endl ;",
        "<< \" \\n \" ;",
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        28,
        21,
        0
      ],
      "mod_code": [
        "cout << min ( cnt1 , cnt2 ) << endl ;",
        "<< \" \\n \" ;",
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        27,
        28,
        15
      ],
      "mod_code": [
        "cout << min ( cnt1 , cnt2 ) << endl ;",
        "<< \" \\n \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        28,
        15,
        0
      ],
      "mod_code": [
        "cout << min ( cnt1 , cnt2 ) << endl ;",
        "<< \" \\n \" ;",
        "do",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        27,
        28,
        0
      ],
      "mod_code": [
        "cout << min ( cnt1 , cnt2 ) << endl ;",
        "<< \" \\n \" ;",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        27,
        21,
        15
      ],
      "mod_code": [
        "cout << min ( cnt1 , cnt2 ) << endl ;",
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        21,
        15,
        0
      ],
      "mod_code": [
        "cout << min ( cnt1 , cnt2 ) << endl ;",
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "do",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        27,
        21,
        0
      ],
      "mod_code": [
        "cout << min ( cnt1 , cnt2 ) << endl ;",
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        27,
        15
      ],
      "mod_code": [
        "cout << min ( cnt1 , cnt2 ) << endl ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        15,
        0
      ],
      "mod_code": [
        "cout << min ( cnt1 , cnt2 ) << endl ;",
        "do",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        27,
        0
      ],
      "mod_code": [
        "cout << min ( cnt1 , cnt2 ) << endl ;",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        28,
        21
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ar [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        28,
        21,
        15
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        28,
        21,
        15,
        0
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "do",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        28,
        21,
        15,
        27
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "do",
        "cout << min ( cnt1 , cnt2 ) << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        28,
        21,
        0
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        28,
        21,
        0,
        27
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "const long long N = 1e5 , MN = 1e9 , MN ;",
        "cout << min ( cnt1 , cnt2 ) << \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        28,
        21,
        27
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "cout << min ( cnt1 , cnt2 ) << \" \\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        28,
        15
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        28,
        15,
        0
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "do",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        28,
        15,
        0,
        27
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "do",
        "const long long N = 1e5 , MN = 1e9 , MN ;",
        "cout << min ( cnt1 , cnt2 ) << \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        28,
        15,
        27
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "do",
        "cout << min ( cnt1 , cnt2 ) << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        28,
        0
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        28,
        0,
        27
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "const long long N = 1e5 , MN = 1e9 , MN ;",
        "cout << min ( cnt1 , cnt2 ) << \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        28,
        27
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cout << min ( cnt1 , cnt2 ) << \" \\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        21,
        15
      ],
      "mod_code": [
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        15,
        0
      ],
      "mod_code": [
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "do",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        21,
        15,
        0,
        27
      ],
      "mod_code": [
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "do",
        "const long long N = 1e5 , MN = 1e9 , MN ;",
        "cout << min ( cnt1 , cnt2 ) << \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        21,
        15,
        27
      ],
      "mod_code": [
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "do",
        "cout << min ( cnt1 , cnt2 ) << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        0
      ],
      "mod_code": [
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        21,
        0,
        27
      ],
      "mod_code": [
        "if ( ar [ i ] [ j ] == ' 1 ' )",
        "const long long N = 1e5 , MN = 1e9 , MN ;",
        "cout << min ( cnt1 , cnt2 ) << \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        15,
        0
      ],
      "mod_code": [
        "do",
        "const long long N = 1e5 , MN = 1e9 , MN ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        15,
        0,
        27
      ],
      "mod_code": [
        "do",
        "const long long N = 1e5 , MN = 1e9 , MN ;",
        "cout << min ( cnt1 , cnt2 ) << \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    },
    {
      "mod_line": [
        15,
        27
      ],
      "mod_code": [
        "do",
        "cout << min ( cnt1 , cnt2 ) << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        27
      ],
      "mod_code": [
        "const long long N = 1e5 , MN = 1e9 , MN ;",
        "cout << min ( cnt1 , cnt2 ) << \" \\n \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘const long long int MN’"
    }
  ]
}