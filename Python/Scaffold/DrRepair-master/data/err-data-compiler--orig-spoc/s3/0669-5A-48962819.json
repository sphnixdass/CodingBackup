{
  "meta": {
    "index": 669,
    "hitid": "3S829FDFT2V77F6J6SSEFDUWOX7XDI",
    "workerid": "A1APYLD4DUK33J",
    "probid": "5A",
    "subid": "48962819"
  },
  "lines": [
    {
      "line": 0,
      "text": "create string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare check1 with string s as argument , returning boolean",
      "code": "bool check1 ( string s )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if s [ 0 ] is ' + ' or s [ 0 ] is ' - '",
      "code": "if ( s [ 0 ] == ' + ' || s [ 0 ] == ' - ' )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return true from function",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return false from function",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare check with string s as argument , returning boolean",
      "code": "bool check ( string s )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "if s [ 0 ] is ' + ' , return true from function",
      "code": "if ( s [ 0 ] == ' + ' ) return true ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if s [ 0 ] is ' - ' , return false from function",
      "code": "if ( s [ 0 ] == ' - ' ) return false ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "create integer cnt with cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "create integer ans with ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "while read line from cin to s",
      "code": "while ( getline ( cin , s ) )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if result of run check1 with s as argument is true",
      "code": "if ( check1 ( s ) == true )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if result of run check with s as argument is true",
      "code": "if ( check ( s ) == true )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 19,
      "text": "decrement cnt",
      "code": "cnt -- ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "for i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "if s [ i ] is ' : '",
      "code": "if ( s [ i ] == ' : ' )",
      "indent": 4
    },
    {
      "line": 23,
      "text": "increment ans by ( length of s - i - 1 ) * cnt",
      "code": "ans += ( s . length ( ) - i - 1 ) * cnt ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "break loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string check1 ( string s )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "string check ( string s )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "while ( cin >> cin >> s )"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "do",
        "if ( ! check ( s ) )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        16,
        20
      ],
      "mod_code": [
        "do",
        "if ( ! check ( s ) )",
        "do"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        16,
        20,
        0
      ],
      "mod_code": [
        "do",
        "if ( ! check ( s ) )",
        "do",
        "int s ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        16,
        20,
        22
      ],
      "mod_code": [
        "do",
        "if ( ! check ( s ) )",
        "do",
        "if ( ! s [ i ] == ' : ' )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        16,
        20,
        5
      ],
      "mod_code": [
        "do",
        "if ( ! check ( s ) )",
        "do",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        16,
        0
      ],
      "mod_code": [
        "do",
        "if ( ! check ( s ) )",
        "int s ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        16,
        0,
        22
      ],
      "mod_code": [
        "do",
        "if ( ! check ( s ) )",
        "int s ;",
        "if ( ! s [ i ] == ' : ' )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        16,
        0,
        5
      ],
      "mod_code": [
        "do",
        "if ( ! check ( s ) )",
        "int s ;",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        16,
        22
      ],
      "mod_code": [
        "do",
        "if ( ! check ( s ) )",
        "if ( ! s [ i ] == ' : ' )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        16,
        22,
        5
      ],
      "mod_code": [
        "do",
        "if ( ! check ( s ) )",
        "if ( ! s [ i ] == ' : ' )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        16,
        5
      ],
      "mod_code": [
        "do",
        "if ( ! check ( s ) )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        20
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        20,
        0
      ],
      "mod_code": [
        "do",
        "do",
        "int s ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        20,
        0,
        22
      ],
      "mod_code": [
        "do",
        "do",
        "int s ;",
        "if ( ! s [ i ] == ' : ' )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        20,
        0,
        5
      ],
      "mod_code": [
        "do",
        "do",
        "int s ;",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        20,
        22
      ],
      "mod_code": [
        "do",
        "do",
        "if ( ! s [ i ] == ' : ' )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        20,
        22,
        5
      ],
      "mod_code": [
        "do",
        "do",
        "if ( ! s [ i ] == ' : ' )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        20,
        5
      ],
      "mod_code": [
        "do",
        "do",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "do",
        "int s ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        0,
        22
      ],
      "mod_code": [
        "do",
        "int s ;",
        "if ( ! s [ i ] == ' : ' )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        0,
        22,
        5
      ],
      "mod_code": [
        "do",
        "int s ;",
        "if ( ! s [ i ] == ' : ' )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        0,
        5
      ],
      "mod_code": [
        "do",
        "int s ;",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        22
      ],
      "mod_code": [
        "do",
        "if ( ! s [ i ] == ' : ' )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        22,
        5
      ],
      "mod_code": [
        "do",
        "if ( ! s [ i ] == ' : ' )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "do",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        20
      ],
      "mod_code": [
        "if ( ! check ( s ) )",
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        20,
        0
      ],
      "mod_code": [
        "if ( ! check ( s ) )",
        "do",
        "int s ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        16,
        20,
        0,
        22
      ],
      "mod_code": [
        "if ( ! check ( s ) )",
        "do",
        "int s ;",
        "if ( ! s [ i ] == ' : ' )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        16,
        20,
        0,
        5
      ],
      "mod_code": [
        "if ( ! check ( s ) )",
        "do",
        "int s ;",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        20,
        22
      ],
      "mod_code": [
        "if ( ! check ( s ) )",
        "do",
        "if ( ! s [ i ] == ' : ' )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        20,
        22,
        5
      ],
      "mod_code": [
        "if ( ! check ( s ) )",
        "do",
        "if ( ! s [ i ] == ' : ' )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        20,
        5
      ],
      "mod_code": [
        "if ( ! check ( s ) )",
        "do",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        0
      ],
      "mod_code": [
        "if ( ! check ( s ) )",
        "int s ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        16,
        0,
        22
      ],
      "mod_code": [
        "if ( ! check ( s ) )",
        "int s ;",
        "if ( ! s [ i ] == ' : ' )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        16,
        0,
        22,
        5
      ],
      "mod_code": [
        "if ( ! check ( s ) )",
        "int s ;",
        "if ( ! s [ i ] == ' : ' )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        0,
        5
      ],
      "mod_code": [
        "if ( ! check ( s ) )",
        "int s ;",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        22,
        5
      ],
      "mod_code": [
        "if ( ! check ( s ) )",
        "if ( ! s [ i ] == ' : ' )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        5
      ],
      "mod_code": [
        "if ( ! check ( s ) )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        20,
        0
      ],
      "mod_code": [
        "do",
        "int s ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        20,
        0,
        22
      ],
      "mod_code": [
        "do",
        "int s ;",
        "if ( ! s [ i ] == ' : ' )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        20,
        0,
        22,
        5
      ],
      "mod_code": [
        "do",
        "int s ;",
        "if ( ! s [ i ] == ' : ' )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        20,
        0,
        5
      ],
      "mod_code": [
        "do",
        "int s ;",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        20,
        22
      ],
      "mod_code": [
        "do",
        "if ( ! s [ i ] == ' : ' )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        22,
        5
      ],
      "mod_code": [
        "do",
        "if ( ! s [ i ] == ' : ' )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        20,
        5
      ],
      "mod_code": [
        "do",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "int s ;",
        "if ( ! s [ i ] == ' : ' )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        0,
        22,
        5
      ],
      "mod_code": [
        "int s ;",
        "if ( ! s [ i ] == ' : ' )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int s ;",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        5
      ],
      "mod_code": [
        "if ( ! s [ i ] == ' : ' )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}