{
  "meta": {
    "index": 933,
    "hitid": "3Y7LTZE0YTGITCHKT56OMYEVICHUZX",
    "workerid": "A1APYLD4DUK33J",
    "probid": "332A",
    "subid": "48552947"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer maxn with maxn = 3e5",
      "code": "const int maxn = 3e5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , m , with n = 0 , m = 0",
      "code": "int n = 0 , m = 0 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "while read n",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create string str",
      "code": "string str ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "create integer size with size = size of str",
      "code": "int size = str . size ( ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "create integer and with ans = 0",
      "code": "int ans = 0 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for i = 0 to size exclusive , incrementing i by n",
      "code": "for ( int i = 0 ; i < size ; i += n )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if is greater than or equal to 4",
      "code": "if ( i >= 4 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if str [ i - 1 ] is str [ i - 2 ] and str [ i - 2 ] is str [ i - 3 ] , increment ans",
      "code": "if ( str [ i - 1 ] == str [ i - 2 ] && str [ i - 2 ] == str [ i - 3 ] ) { ++ ans ; }",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( >= 4 )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘>=’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( gets ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int str ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int size = strlen ( str ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < size ; i += n )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( is >= 4 )"
      ],
      "err_line": 9,
      "err_msg": "‘is’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "if ( >= 4 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        1,
        9,
        5
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "if ( >= 4 )",
        "gets ( str ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        1,
        9,
        5,
        6
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "if ( >= 4 )",
        "gets ( str ) ;",
        "int size = strlen ( str ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        1,
        9,
        5,
        4
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "if ( >= 4 )",
        "gets ( str ) ;",
        "int str ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        1,
        9,
        6
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "if ( >= 4 )",
        "int size = strlen ( str ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        1,
        9,
        6,
        4
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "if ( >= 4 )",
        "int size = strlen ( str ) ;",
        "int str ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        1,
        9,
        4
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "if ( >= 4 )",
        "int str ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "gets ( str ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "gets ( str ) ;",
        "int size = strlen ( str ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        4
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "gets ( str ) ;",
        "int size = strlen ( str ) ;",
        "int str ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "gets ( str ) ;",
        "int str ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "int size = strlen ( str ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        1,
        6,
        4
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "int size = strlen ( str ) ;",
        "int str ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , m = 0 , m = 0 ;",
        "int str ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "if ( >= 4 )",
        "gets ( str ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        5,
        6
      ],
      "mod_code": [
        "if ( >= 4 )",
        "gets ( str ) ;",
        "int size = strlen ( str ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        5,
        6,
        4
      ],
      "mod_code": [
        "if ( >= 4 )",
        "gets ( str ) ;",
        "int size = strlen ( str ) ;",
        "int str ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        5,
        6,
        1
      ],
      "mod_code": [
        "if ( >= 4 )",
        "gets ( str ) ;",
        "int size = strlen ( str ) ;",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        9,
        5,
        4
      ],
      "mod_code": [
        "if ( >= 4 )",
        "gets ( str ) ;",
        "int str ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        5,
        4,
        1
      ],
      "mod_code": [
        "if ( >= 4 )",
        "gets ( str ) ;",
        "int str ;",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        9,
        5,
        1
      ],
      "mod_code": [
        "if ( >= 4 )",
        "gets ( str ) ;",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "if ( >= 4 )",
        "int size = strlen ( str ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        9,
        6,
        4
      ],
      "mod_code": [
        "if ( >= 4 )",
        "int size = strlen ( str ) ;",
        "int str ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        4,
        1
      ],
      "mod_code": [
        "if ( >= 4 )",
        "int size = strlen ( str ) ;",
        "int str ;",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        9,
        6,
        1
      ],
      "mod_code": [
        "if ( >= 4 )",
        "int size = strlen ( str ) ;",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "if ( >= 4 )",
        "int str ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        9,
        4,
        1
      ],
      "mod_code": [
        "if ( >= 4 )",
        "int str ;",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "if ( >= 4 )",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int size = strlen ( str ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        6,
        4
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int size = strlen ( str ) ;",
        "int str ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        4,
        1
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int size = strlen ( str ) ;",
        "int str ;",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        5,
        6,
        1
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int size = strlen ( str ) ;",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int str ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        4,
        1
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int str ;",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "int size = strlen ( str ) ;",
        "int str ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        4,
        1
      ],
      "mod_code": [
        "int size = strlen ( str ) ;",
        "int str ;",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "int size = strlen ( str ) ;",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "int str ;",
        "int n = 0 , m = 0 , m ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int m’"
    }
  ]
}