{
  "meta": {
    "index": 643,
    "hitid": "3PR3LXCWSFTV4PT2UCNCTHB6XCSX91",
    "workerid": "A1APYLD4DUK33J",
    "probid": "5A",
    "subid": "44389412"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integers b , t with b = 0 , t = 0",
      "code": "int b = 0 , t = 0 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read line from cin to s",
      "code": "getline ( cin , s ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while s is not \" \"",
      "code": "while ( s != \" \" )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ 0 ] is ' + '",
      "code": "if ( s [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment t by 1 else",
      "code": "t += 1 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s [ 0 ] is ' - '",
      "code": "if ( s [ 0 ] == ' - ' )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "decrement t by 1",
      "code": "t -= 1 ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 11,
      "text": "for i = 0 to size of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "if s [ i ] is ' : ' , increment b by t * size of substring of s starting at i + 1 to size of s",
      "code": "if ( s [ i ] == ' : ' ) { b += t * s . substr ( i + 1 , s . size ( ) ) . size ( ) ; }",
      "indent": 5
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "read cine from cin to s",
      "code": "getline ( cin , s ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print b print newline",
      "code": "cout << b << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘min(int, std::__cxx11::basic_string<char>::size_type)’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int b = 0 , t = 0 , t ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int t’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> cin >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( ! s )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘getline’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘min(int, std::__cxx11::basic_string<char>::size_type)’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cin >> cin >> s ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘min(int, std::__cxx11::basic_string<char>::size_type)’"
    },
    {
      "mod_line": [
        4,
        12,
        5
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        12,
        5,
        3
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "cin >> cin >> s ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        12,
        5,
        10
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        12,
        5,
        8
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        12,
        3
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "cin >> cin >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        12,
        3,
        10
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "cin >> cin >> s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        12,
        3,
        8
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "cin >> cin >> s ;",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        12,
        10
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘min(int, std::__cxx11::basic_string<char>::size_type)’"
    },
    {
      "mod_line": [
        4,
        12,
        10,
        8
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "do",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        12,
        8
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        3
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ 0 ] == \" + ' )",
        "cin >> cin >> s ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        3,
        10
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ 0 ] == \" + ' )",
        "cin >> cin >> s ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        3,
        8
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ 0 ] == \" + ' )",
        "cin >> cin >> s ;",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        10
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        10,
        8
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ 0 ] == \" + ' )",
        "do",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        8
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ 0 ] == \" + ' )",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "cin >> cin >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        3,
        10
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "cin >> cin >> s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        3,
        10,
        8
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "cin >> cin >> s ;",
        "do",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        3,
        8
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "cin >> cin >> s ;",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        10,
        8
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "do",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "while ( s != \" \" )",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        5,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "cin >> cin >> s ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        5,
        3,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "cin >> cin >> s ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        5,
        3,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "cin >> cin >> s ;",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        5,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        5,
        10,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "do",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        5,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "cin >> cin >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        12,
        3,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "cin >> cin >> s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        12,
        3,
        10,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "cin >> cin >> s ;",
        "do",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        3,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "cin >> cin >> s ;",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘min(int, std::__cxx11::basic_string<char>::size_type)’"
    },
    {
      "mod_line": [
        12,
        10,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "do",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' : ' ) b += t * min ( i + 1 , s . size ( ) + 1 ) ;",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "cin >> cin >> s ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        3,
        10
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "cin >> cin >> s ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        3,
        10,
        8
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "cin >> cin >> s ;",
        "do",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        3,
        8
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "cin >> cin >> s ;",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        10,
        8
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "do",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "cin >> cin >> s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        3,
        10,
        8
      ],
      "mod_code": [
        "cin >> cin >> s ;",
        "do",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "cin >> cin >> s ;",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    }
  ]
}