{
  "meta": {
    "index": 111,
    "hitid": "3KA7IJSNW6Z9J96865RRQAKTKFWPBU",
    "workerid": "AIWEXPJAU66D9",
    "probid": "391A",
    "subid": "47856875"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , l , r and m with l , r and m = 0",
      "code": "int n , l = 0 , r = 0 , m = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare string variable s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read input to s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while r < size of s",
      "code": "while ( r < ( ( int ) ( s ) . size ( ) ) )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ r ] is equal to s [ l ]",
      "code": "if ( s [ r ] == s [ l ] )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment r",
      "code": "r ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if ( r - l ) & 1 is 0 , increment m",
      "code": "if ( ! ( ( r - l ) & 1 ) ) m ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "change l to r",
      "code": "l = r ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if ( r - l ) & 1 is 0 , increment m",
      "code": "if ( ! ( ( r - l ) & 1 ) ) m ++ ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print m",
      "code": "cout << m << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "l to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "if ( ( r - l ) & 1 ) m ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        8,
        12
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( ( r - l ) & 1 ) m ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        8,
        12,
        7
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        8,
        12,
        5
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( s [ r ] == ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        8,
        7
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        8,
        7,
        5
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do",
        "if ( s [ r ] == ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( s [ r ] == ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "if ( ( r - l ) & 1 ) m ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        12,
        7
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        12,
        7,
        5
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do",
        "if ( s [ r ] == ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        12,
        5
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( s [ r ] == ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "do",
        "if ( s [ r ] == ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , l , r = 0 , m = 0 , m = 0 ;",
        "if ( s [ r ] == ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        8,
        12,
        7
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        12,
        7,
        5
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do",
        "if ( s [ r ] == ' [ ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        12,
        7,
        1
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        8,
        12,
        5,
        1
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( s [ r ] == ' [ ' )",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        8,
        12,
        1
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( ( r - l ) & 1 ) m ++ ;",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        7,
        5
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do",
        "if ( s [ r ] == ' [ ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        7,
        5,
        1
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do",
        "if ( s [ r ] == ' [ ' )",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        8,
        7,
        1
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        8,
        5,
        1
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( s [ r ] == ' [ ' )",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        7,
        5
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do",
        "if ( s [ r ] == ' [ ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        7,
        5,
        1
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do",
        "if ( s [ r ] == ' [ ' )",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        12,
        7,
        1
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "do",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        12,
        5,
        1
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "if ( s [ r ] == ' [ ' )",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) m ++ ;",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "do",
        "if ( s [ r ] == ' [ ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        5,
        1
      ],
      "mod_code": [
        "do",
        "if ( s [ r ] == ' [ ' )",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "do",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( s [ r ] == ' [ ' )",
        "int n , l , r = 0 , r = 0 , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    }
  ]
}