{
  "meta": {
    "index": 1014,
    "hitid": "3VJ4PFXFJ31HS49CHDQP55NMAE8AUL",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1000A",
    "subid": "42358735"
  },
  "lines": [
    {
      "line": 0,
      "text": "getDis is a integer function with string arguments a and b",
      "code": "int getDis ( string a , string b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if lengths of a and b do not match , return - 1",
      "code": "if ( a . size ( ) != b . size ( ) ) return - 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create new integer variable dis with value 0",
      "code": "int dis = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "in a for loop , change i from 0 to length of a exclusive",
      "code": "for ( int i = 0 ; i < a . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if character at the index i at string a of does not match the character at the same index at string b , increment dis",
      "code": "if ( a [ i ] != b [ i ] ) dis ++ ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "return dis",
      "code": "return dis ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "n and cost are integers with cost = 0 ; ans is an array with size 110",
      "code": "int n , cost = 0 , ans [ 110 ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create string arrays a and b with 110 elements",
      "code": "string a [ 110 ] , b [ 110 ] ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "declare boolean arrays flag_a and flag_b with size 110",
      "code": "bool flag_a [ 110 ] , flag_b [ 110 ] ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read n from the input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read n elements standard input to a starting from the index 1",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read n elements of b starting from the index 1",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) cin >> b [ i ] ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "sort a from 1 to n + 1",
      "code": "sort ( a + 1 , a + n + 1 ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "sort b from the index 1 to n + 1",
      "code": "sort ( b + 1 , b + n + 1 ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "set values of first sizeof ( flag_a ) bytes at the pointer flag_a to 1",
      "code": "memset ( flag_a , 1 , sizeof ( flag_a ) ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "set first sizeof ( flag_b ) bytes at the pointer flag_b to 1",
      "code": "memset ( flag_b , 1 , sizeof ( flag_b ) ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "create new 2d array of integers Dis with size 110 by 110",
      "code": "int Dis [ 110 ] [ 110 ] ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 1 to n inclusive incrementing i",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "in a for loop , change j from 1 to n inclusive , assigning the result of getDis ( a [ i ] , b [ j ] ) to Dis [ i ] [ j ] on each loop",
      "code": "for ( int j = 1 ; j <= n ; j ++ ) Dis [ i ] [ j ] = getDis ( a [ i ] , b [ j ] ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "in a for loop , change t from 1 to n inclusive incrementing t",
      "code": "for ( int t = 1 ; t <= n ; t ++ )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "create integers mindis = 100 , minid_a and minid_b = 0",
      "code": "int mindis = 100 , minid_a = 0 , minid_b = 0 ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "in a for loop , change i from 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if flag_a [ i ] is true",
      "code": "if ( flag_a [ i ] )",
      "indent": 3
    },
    {
      "line": 26,
      "text": "for j from 1 to n inclusive incrementing j",
      "code": "for ( int j = 1 ; j <= n ; j ++ )",
      "indent": 4
    },
    {
      "line": 27,
      "text": "if flag_b [ j ] is true",
      "code": "if ( flag_b [ j ] )",
      "indent": 5
    },
    {
      "line": 28,
      "text": "create integer dis = Dis [ i ] [ j ]",
      "code": "int dis = Dis [ i ] [ j ] ;",
      "indent": 6
    },
    {
      "line": 29,
      "text": "if dis > = 0 and dis < mindis , change values of mindis to dis , minid_a to i and minid_b to j",
      "code": "if ( dis >= 0 && dis < mindis ) { mindis = dis , minid_a = i , minid_b = j ; }",
      "indent": 6
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 33,
      "text": "assign new value = 0 to flag_a [ minid_a ] and flag_b [ minid_b ]",
      "code": "flag_a [ minid_a ] = 0 , flag_b [ minid_b ] = 0 ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "increase cost by mindis",
      "code": "cost += mindis ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "print cost to the standard output",
      "code": "cout << cost << endl ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string getDis ( string a , string b )"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(std::__cxx11::string, std::__cxx11::string) {aka int (*)(std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>)}’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) { return - 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( strcmp ( i , i ) ) { dis ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int n , ans = 0 , ans = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "bool flag_a [ 110 ] , flag_b [ 110 ] , flag_b [ 110 ] ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘bool flag_b [110]’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "memset ( flag_a , l , sizeof ( flag_a ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "memset ( flag_b , 1 , sizeof ( flag_b ) ) ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= n ; j ++ ) Dis [ i ] [ j ] = getDis [ i ] [ j ] ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(std::__cxx11::string, std::__cxx11::string) {aka int (*)(std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>)}’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 26,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "int dis += i [ j ] ;"
      ],
      "err_line": 28,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "flag_a [ minid_a ] = flag_b [ minid_b ] = new 0 ;"
      ],
      "err_line": 33,
      "err_msg": "expected type-specifier before numeric constant"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( lengths ( a , b ) ) return - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        4
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        20
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        29
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        9
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        20
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( lengths ( a , b ) ) return - 1 ;",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        20,
        29
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( lengths ( a , b ) ) return - 1 ;",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        20,
        9
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( lengths ( a , b ) ) return - 1 ;",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        29
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        29,
        9
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        9
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( lengths ( a , b ) ) return - 1 ;",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        4,
        20
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        4,
        20,
        29
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        4,
        20,
        9
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        4,
        29
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        4,
        29,
        9
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        4,
        9
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        20
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        20,
        29
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        20,
        29,
        9
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        20,
        9
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        29
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        29,
        9
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "string getDis ( string a , string b )",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        20
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        20,
        29
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        20,
        9
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        29
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        29,
        9
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        9
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        20,
        29
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        20,
        29,
        9
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        20,
        9
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        29
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        29,
        9
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "if ( lengths ( a , b ) ) return - 1 ;",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        20
      ],
      "mod_code": [
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(std::__cxx11::string, std::__cxx11::string) {aka int (*)(std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>)}’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        20,
        29
      ],
      "mod_code": [
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(std::__cxx11::string, std::__cxx11::string) {aka int (*)(std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>)}’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        20,
        29,
        9
      ],
      "mod_code": [
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(std::__cxx11::string, std::__cxx11::string) {aka int (*)(std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>)}’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        20,
        9
      ],
      "mod_code": [
        "if ( a [ i ] != ' b ' ) { dis ++ ; }",
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(std::__cxx11::string, std::__cxx11::string) {aka int (*)(std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>)}’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        29
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(std::__cxx11::string, std::__cxx11::string) {aka int (*)(std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>)}’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        29,
        9
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "if ( dis >= 0 && dis < mindis ) { mindis = dis ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(std::__cxx11::string, std::__cxx11::string) {aka int (*)(std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>)}’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        9
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= n ; j ++ ) { Dis [ i ] [ j ] = getDis [ i ] [ j ] ; }",
        "string a [ 110 ] , b [ 110 ] = { 0 } ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(std::__cxx11::string, std::__cxx11::string) {aka int (*)(std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>)}’ to ‘int’ [-fpermissive]"
    }
  ]
}