{
  "meta": {
    "index": 278,
    "hitid": "3VDVA3ILID92TYVH1P8FQPTSXCJG1Z",
    "workerid": "AIWEXPJAU66D9",
    "probid": "799A",
    "subid": "48078506"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , t , k and d",
      "code": "int n , t , k , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , t , k and d",
      "code": "cin >> n >> t >> k >> d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer t1 = ( ( n + k - 1 ) / k ) * t",
      "code": "int t1 = ( ( n + k - 1 ) / k ) * t ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare int variables timer , t2 and cake = 0",
      "code": "int timer = 0 , t2 = 0 , cake = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while cake < n",
      "code": "while ( cake < n )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "increment timer by one",
      "code": "timer ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if timer is greater than d , increment t2 by one",
      "code": "if ( timer > d ) t2 ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if timer modulo t = 0 , add k to cake",
      "code": "if ( timer % t == 0 ) { cake += k ; }",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if t2 > 0 and t2 modulo t = 0 , add k to cake",
      "code": "if ( t2 > 0 && t2 % t == 0 ) { cake += k ; }",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if t1 < = timer",
      "code": "if ( t1 <= timer )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" NO \"",
      "code": "cout << \" NO \"",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" YES \"",
      "code": "cout << \" YES \"",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , t , k ;"
      ],
      "err_line": 2,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << \" NO\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15,
        11
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "if ( t1 < timer )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15,
        11,
        14
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "if ( t1 < timer )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15,
        11,
        2
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "if ( t1 < timer )",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15,
        14
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15,
        14,
        2
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "do",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15,
        2
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "if ( t1 < timer )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        11,
        15
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "if ( t1 < timer )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        11,
        15,
        14
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "if ( t1 < timer )",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        11,
        15,
        2
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "if ( t1 < timer )",
        "cout << \" YES\\n \" ;",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        11,
        14
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "if ( t1 < timer )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        11,
        14,
        2
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "if ( t1 < timer )",
        "do",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        11,
        2
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "if ( t1 < timer )",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15,
        14
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15,
        14,
        2
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES\\n \" ;",
        "do",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15,
        2
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES\\n \" ;",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14,
        2
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "do",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        11
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "if ( t1 < timer )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        11,
        14
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "if ( t1 < timer )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        11,
        14,
        2
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "if ( t1 < timer )",
        "do",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        11,
        2
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "if ( t1 < timer )",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        14,
        2
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "do",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "if ( t1 < timer )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        15,
        14
      ],
      "mod_code": [
        "if ( t1 < timer )",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        15,
        14,
        2
      ],
      "mod_code": [
        "if ( t1 < timer )",
        "cout << \" YES\\n \" ;",
        "do",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        15,
        2
      ],
      "mod_code": [
        "if ( t1 < timer )",
        "cout << \" YES\\n \" ;",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "if ( t1 < timer )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        11,
        14,
        2
      ],
      "mod_code": [
        "if ( t1 < timer )",
        "do",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        14,
        2
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "do",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "do",
        "cin >> n >> t >> k >> n ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before numeric constant"
    }
  ]
}