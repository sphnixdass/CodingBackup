{
  "meta": {
    "index": 2050,
    "hitid": "3UOMW19E6D0O04GV0QE83OLUAD4C50",
    "workerid": "A1C5H6OY3HGO4U",
    "probid": "633A",
    "subid": "49039456"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function solve that takes no arguments and returns nothing",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a , b , c = long long",
      "code": "long long a , b , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a , b , and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "x = long long with value of a",
      "code": "long long x = a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if c mod a is 0 or c mod b is 0",
      "code": "if ( c % a == 0 || c % b == 0 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print Yes",
      "code": "cout << \" Yes\\n \" ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "return",
      "code": "return ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while c is greater than or equal to a",
      "code": "while ( c >= a )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if ( c minus a ) mod b is 0",
      "code": "if ( ( c - a ) % b == 0 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print Yes",
      "code": "cout << \" Yes\\n \" ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "return",
      "code": "return ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increase a by x",
      "code": "a += x ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print No",
      "code": "cout << \" No\\n \" ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "return",
      "code": "return ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 19,
      "text": "test_cases = integer of value 1",
      "code": "int test_cases = 1 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "while subtracting 1 from test_cases is not 0 call function solve ( )",
      "code": "while ( test_cases -- ) { solve ( ) ; }",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c )"
      ],
      "err_line": 13,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        8,
        11
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "while ( c >= ' a ' )",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        8,
        11,
        5
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "while ( c >= ' a ' )",
        "do",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        8,
        11,
        0
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "while ( c >= ' a ' )",
        "do",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        20,
        8,
        11,
        16
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "while ( c >= ' a ' )",
        "do",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        8,
        5,
        0
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "while ( c >= ' a ' )",
        "cout << \" YES\\n \" ;",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        20,
        8,
        5,
        16
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "while ( c >= ' a ' )",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        8,
        0
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "while ( c >= ' a ' )",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        20,
        8,
        0,
        16
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "while ( c >= ' a ' )",
        "void solve ( returns )",
        "do"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        20,
        8,
        16
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "while ( c >= ' a ' )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        11
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        11,
        5
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "do",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        11,
        5,
        0
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "do",
        "cout << \" YES\\n \" ;",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        20,
        11,
        5,
        16
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "do",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        11,
        0
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "do",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        20,
        11,
        0,
        16
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "do",
        "void solve ( returns )",
        "do"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        20,
        11,
        16
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "do",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        5,
        0
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "cout << \" YES\\n \" ;",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        20,
        5,
        0,
        16
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "cout << \" YES\\n \" ;",
        "void solve ( returns )",
        "do"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        20,
        5,
        16
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        0
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        20,
        0,
        16
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "void solve ( returns )",
        "do"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        20,
        16
      ],
      "mod_code": [
        "while ( -- test_cases != 0 ) solve ( ) ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "while ( c >= ' a ' )",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        11,
        5
      ],
      "mod_code": [
        "while ( c >= ' a ' )",
        "do",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        11,
        5,
        0
      ],
      "mod_code": [
        "while ( c >= ' a ' )",
        "do",
        "cout << \" YES\\n \" ;",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        8,
        11,
        5,
        16
      ],
      "mod_code": [
        "while ( c >= ' a ' )",
        "do",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        11,
        0
      ],
      "mod_code": [
        "while ( c >= ' a ' )",
        "do",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        8,
        11,
        0,
        16
      ],
      "mod_code": [
        "while ( c >= ' a ' )",
        "do",
        "void solve ( returns )",
        "do"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        8,
        11,
        16
      ],
      "mod_code": [
        "while ( c >= ' a ' )",
        "do",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        5,
        0
      ],
      "mod_code": [
        "while ( c >= ' a ' )",
        "cout << \" YES\\n \" ;",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        8,
        5,
        0,
        16
      ],
      "mod_code": [
        "while ( c >= ' a ' )",
        "cout << \" YES\\n \" ;",
        "void solve ( returns )",
        "do"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        8,
        5,
        16
      ],
      "mod_code": [
        "while ( c >= ' a ' )",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "while ( c >= ' a ' )",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        8,
        0,
        16
      ],
      "mod_code": [
        "while ( c >= ' a ' )",
        "void solve ( returns )",
        "do"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        8,
        16
      ],
      "mod_code": [
        "while ( c >= ' a ' )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "do",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        5,
        0
      ],
      "mod_code": [
        "do",
        "cout << \" YES\\n \" ;",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        11,
        5,
        0,
        16
      ],
      "mod_code": [
        "do",
        "cout << \" YES\\n \" ;",
        "void solve ( returns )",
        "do"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        11,
        5,
        16
      ],
      "mod_code": [
        "do",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "do",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        11,
        0,
        16
      ],
      "mod_code": [
        "do",
        "void solve ( returns )",
        "do"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        11,
        16
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "void solve ( returns )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        5,
        0,
        16
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "void solve ( returns )",
        "do"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    },
    {
      "mod_line": [
        5,
        16
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "void solve ( returns )",
        "do"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘solve’ declared void"
    }
  ]
}