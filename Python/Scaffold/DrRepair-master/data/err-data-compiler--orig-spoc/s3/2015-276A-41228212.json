{
  "meta": {
    "index": 2015,
    "hitid": "3ZRKL6Z1E8X2NIUBE8NZMQG1NCXGSK",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "276A",
    "subid": "41228212"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let ints i , m , n , j , k , cnt = 0 , and tmp = 0 and int arrays a of size 100001 , f of size 100001 , and t of size 100001",
      "code": "int i , m , n , j , k , a [ 100001 ] , cnt = 0 , tmp = 0 , f [ 100001 ] , t [ 100001 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to n exclusive , read f [ i ] and t [ i ]",
      "code": "for ( i = 0 ; i < n ; i ++ ) { cin >> f [ i ] >> t [ i ] ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if t [ i ] is less than k",
      "code": "if ( t [ i ] < k )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set a [ i ] to f [ i ]",
      "code": "a [ i ] = f [ i ] ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set a [ i ] to ( f [ i ] - ( t [ i ] - k ) )",
      "code": "a [ i ] = ( f [ i ] - ( t [ i ] - k ) ) ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let int mx = a [ 0 ]",
      "code": "int mx = a [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if a [ i ] is greater than mx , set mx to a [ i ]",
      "code": "if ( a [ i ] > mx ) mx = a [ i ] ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print mx",
      "code": "cout << mx << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int cnt’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        8,
        7
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        8,
        7,
        6
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "do",
        "a [ i ++ ] = f [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        8,
        7,
        15
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "do",
        "cout << mx ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        8,
        6
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "a [ i ++ ] = f [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        8,
        6,
        15
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "a [ i ++ ] = f [ i ] ;",
        "cout << mx ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        8,
        15
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "cout << mx ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        7,
        6
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "do",
        "a [ i ++ ] = f [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        7,
        6,
        15
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "do",
        "a [ i ++ ] = f [ i ] ;",
        "cout << mx ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        7,
        15
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "do",
        "cout << mx ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ++ ] = f [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        15
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ++ ] = f [ i ] ;",
        "cout << mx ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int i , a [ 100001 ] , n , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "cout << mx ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        7,
        1
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "do",
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        7,
        1,
        6
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "do",
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ++ ] = f [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        7,
        1,
        15
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "do",
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "cout << mx ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        7,
        6
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "do",
        "a [ i ++ ] = f [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        7,
        6,
        15
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "do",
        "a [ i ++ ] = f [ i ] ;",
        "cout << mx ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        7,
        15
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "do",
        "cout << mx ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        1,
        6
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ++ ] = f [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        1,
        6,
        15
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ++ ] = f [ i ] ;",
        "cout << mx ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        1,
        15
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "cout << mx ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "a [ i ++ ] = f [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        6,
        15
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "a [ i ++ ] = f [ i ] ;",
        "cout << mx ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "a [ i ] = ( f [ i ] - ( t [ i ] - ' k ) ) ;",
        "cout << mx ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "do",
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int cnt’"
    },
    {
      "mod_line": [
        7,
        1,
        6
      ],
      "mod_code": [
        "do",
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ++ ] = f [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int cnt’"
    },
    {
      "mod_line": [
        7,
        1,
        6,
        15
      ],
      "mod_code": [
        "do",
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ++ ] = f [ i ] ;",
        "cout << mx ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int cnt’"
    },
    {
      "mod_line": [
        7,
        1,
        15
      ],
      "mod_code": [
        "do",
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "cout << mx ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int cnt’"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "do",
        "a [ i ++ ] = f [ i ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6,
        15
      ],
      "mod_code": [
        "do",
        "a [ i ++ ] = f [ i ] ;",
        "cout << mx ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "do",
        "cout << mx ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ++ ] = f [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        6,
        15
      ],
      "mod_code": [
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "a [ i ++ ] = f [ i ] ;",
        "cout << mx ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int i , m , a [ 100001 ] , n , j , k , cnt [ 100001 ] , t , cnt = 0 , tmp = 0 , tmp = 0 ;",
        "cout << mx ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int cnt’"
    }
  ]
}