{
  "meta": {
    "index": 1522,
    "hitid": "3BS6ERDL931UO0MN55JOF0HCSVJ6DD",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "1097A",
    "subid": "48860243"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create vector string cards ( 5 )",
      "code": "vector < string > cards ( 5 ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let ref be string",
      "code": "string ref ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read ref",
      "code": "cin >> ref ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 5 exclusive",
      "code": "for ( long long i = 0 ; i < 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read cards [ i ]",
      "code": "cin >> cards [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if cards [ i ] [ 0 ] = ref [ 0 ] or cards [ i ] [ 1 ] = ref [ 1 ]",
      "code": "if ( cards [ i ] [ 0 ] == ref [ 0 ] || cards [ i ] [ 1 ] == ref [ 1 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print Yes and a newline",
      "code": "cout << \" YES\\n \" ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print No and a newline",
      "code": "cout << \" NO\\n \" ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "vector < string ( 5 ( 5 ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char ref ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        7,
        2
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "cout << \" Yes \" << endl ;",
        "char ref ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        7,
        2,
        1
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "cout << \" Yes \" << endl ;",
        "char ref ;",
        "vector < string ( 5 ( 5 ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        11,
        7,
        2,
        5
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "cout << \" Yes \" << endl ;",
        "char ref ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        7,
        1
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "cout << \" Yes \" << endl ;",
        "vector < string ( 5 ( 5 ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        11,
        7,
        1,
        5
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "cout << \" Yes \" << endl ;",
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "char ref ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        2,
        1
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "char ref ;",
        "vector < string ( 5 ( 5 ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        11,
        2,
        1,
        5
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "char ref ;",
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        11,
        2,
        5
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "char ref ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "vector < string ( 5 ( 5 ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        11,
        1,
        5
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "cout << \" Yes \" << endl ;",
        "char ref ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        2,
        1
      ],
      "mod_code": [
        "cout << \" Yes \" << endl ;",
        "char ref ;",
        "vector < string ( 5 ( 5 ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        2,
        1,
        11
      ],
      "mod_code": [
        "cout << \" Yes \" << endl ;",
        "char ref ;",
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << \" No \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        2,
        1,
        5
      ],
      "mod_code": [
        "cout << \" Yes \" << endl ;",
        "char ref ;",
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        2,
        11
      ],
      "mod_code": [
        "cout << \" Yes \" << endl ;",
        "char ref ;",
        "cout << \" No \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        2,
        11,
        5
      ],
      "mod_code": [
        "cout << \" Yes \" << endl ;",
        "char ref ;",
        "cout << \" No \" << endl ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        2,
        5
      ],
      "mod_code": [
        "cout << \" Yes \" << endl ;",
        "char ref ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "cout << \" Yes \" << endl ;",
        "vector < string ( 5 ( 5 ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        1,
        11
      ],
      "mod_code": [
        "cout << \" Yes \" << endl ;",
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << \" No \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        1,
        11,
        5
      ],
      "mod_code": [
        "cout << \" Yes \" << endl ;",
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << \" No \" << endl ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        1,
        5
      ],
      "mod_code": [
        "cout << \" Yes \" << endl ;",
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "char ref ;",
        "vector < string ( 5 ( 5 ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        2,
        1,
        11
      ],
      "mod_code": [
        "char ref ;",
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << \" No \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        2,
        1,
        11,
        5
      ],
      "mod_code": [
        "char ref ;",
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << \" No \" << endl ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        2,
        1,
        5
      ],
      "mod_code": [
        "char ref ;",
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "char ref ;",
        "cout << \" No \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        11,
        5
      ],
      "mod_code": [
        "char ref ;",
        "cout << \" No \" << endl ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "char ref ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << \" No \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        1,
        11,
        5
      ],
      "mod_code": [
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << \" No \" << endl ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "vector < string ( 5 ( 5 ) ) ;",
        "cout << cards [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "a function call cannot appear in a constant-expression"
    }
  ]
}