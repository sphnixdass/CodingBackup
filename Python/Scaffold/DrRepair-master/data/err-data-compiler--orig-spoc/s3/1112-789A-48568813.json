{
  "meta": {
    "index": 1112,
    "hitid": "35F6NGNVM8DK9PWPA5OVQIZUQST7TY",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "789A",
    "subid": "48568813"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n , k and c , set c to 0",
      "code": "int n , k , c = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integers w [ n ] , z [ n ]",
      "code": "int w [ n ] , z [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read w [ i ]",
      "code": "cin >> w [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "z [ i ] = w [ i ]",
      "code": "z [ i ] = w [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set l and x to 0",
      "code": "int l = 0 , x = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set z [ i ] = z [ i ] / ( 2 * k )",
      "code": "z [ i ] = z [ i ] / ( 2 * k ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "c = c + z [ i ]",
      "code": "c += z [ i ] ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "assign w [ i ] mod 2 * k to w [ i ]",
      "code": "w [ i ] = w [ i ] % ( 2 * k ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if w [ i ] greater than k",
      "code": "if ( w [ i ] > k )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment l",
      "code": "l ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else if w [ i ] different from 0",
      "code": "else if ( w [ i ] != 0 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "add 1 to x",
      "code": "x ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if x is even",
      "code": "if ( x % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "c = c + l + x / 2",
      "code": "c += l + x / 2 ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 21,
      "text": "assign c + l + x / 2 + 1 to c",
      "code": "c += l + x / 2 + 1 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print c",
      "code": "cout << c << endl ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , c = 0 , c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n >> k )"
      ],
      "err_line": 5,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int w [ n ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "w >> w [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "z [ i ] += w ;"
      ],
      "err_line": 6,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "l = x = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "w [ i ] = 2 [ i ] % 2 * k ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "w >> w [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        5,
        10
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "w >> w [ i ] ;",
        "z [ i ] -= ( 2 * k ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        5,
        10,
        3
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "w >> w [ i ] ;",
        "z [ i ] -= ( 2 * k ) ;",
        "int w [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        5,
        10,
        6
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "w >> w [ i ] ;",
        "z [ i ] -= ( 2 * k ) ;",
        "z [ i ] += w ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        5,
        10,
        20
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "w >> w [ i ] ;",
        "z [ i ] -= ( 2 * k ) ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        5,
        3
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "w >> w [ i ] ;",
        "int w [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        5,
        3,
        6
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "w >> w [ i ] ;",
        "int w [ n ] ;",
        "z [ i ] += w ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        5,
        3,
        20
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "w >> w [ i ] ;",
        "int w [ n ] ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        5,
        6
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "w >> w [ i ] ;",
        "z [ i ] += w ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        5,
        6,
        20
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "w >> w [ i ] ;",
        "z [ i ] += w ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        5,
        20
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "w >> w [ i ] ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        10,
        3
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "z [ i ] -= ( 2 * k ) ;",
        "int w [ n ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        10,
        3,
        6
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "z [ i ] -= ( 2 * k ) ;",
        "int w [ n ] ;",
        "z [ i ] += w ;"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        10,
        3,
        20
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "z [ i ] -= ( 2 * k ) ;",
        "int w [ n ] ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        10,
        6
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "z [ i ] -= ( 2 * k ) ;",
        "z [ i ] += w ;"
      ],
      "err_line": 6,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        12,
        10,
        6,
        20
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "z [ i ] -= ( 2 * k ) ;",
        "z [ i ] += w ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        12,
        10,
        20
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "z [ i ] -= ( 2 * k ) ;",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "int w [ n ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3,
        6
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "int w [ n ] ;",
        "z [ i ] += w ;"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3,
        6,
        20
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "int w [ n ] ;",
        "z [ i ] += w ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3,
        20
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "int w [ n ] ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "z [ i ] += w ;"
      ],
      "err_line": 6,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        12,
        6,
        20
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "z [ i ] += w ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        12,
        20
      ],
      "mod_code": [
        "w [ i ] = w [ i ] % 2 * k ;",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "z [ i ] -= ( 2 * k ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        10,
        3
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "z [ i ] -= ( 2 * k ) ;",
        "int w [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        10,
        3,
        6
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "z [ i ] -= ( 2 * k ) ;",
        "int w [ n ] ;",
        "z [ i ] += w ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        10,
        3,
        20
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "z [ i ] -= ( 2 * k ) ;",
        "int w [ n ] ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        10,
        6
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "z [ i ] -= ( 2 * k ) ;",
        "z [ i ] += w ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        10,
        6,
        20
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "z [ i ] -= ( 2 * k ) ;",
        "z [ i ] += w ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        10,
        20
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "z [ i ] -= ( 2 * k ) ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "int w [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        3,
        6
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "int w [ n ] ;",
        "z [ i ] += w ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        3,
        6,
        20
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "int w [ n ] ;",
        "z [ i ] += w ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        3,
        20
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "int w [ n ] ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "z [ i ] += w ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        6,
        20
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "z [ i ] += w ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        20
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "z [ i ] -= ( 2 * k ) ;",
        "int w [ n ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        3,
        6
      ],
      "mod_code": [
        "z [ i ] -= ( 2 * k ) ;",
        "int w [ n ] ;",
        "z [ i ] += w ;"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        3,
        6,
        20
      ],
      "mod_code": [
        "z [ i ] -= ( 2 * k ) ;",
        "int w [ n ] ;",
        "z [ i ] += w ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        3,
        20
      ],
      "mod_code": [
        "z [ i ] -= ( 2 * k ) ;",
        "int w [ n ] ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "z [ i ] -= ( 2 * k ) ;",
        "z [ i ] += w ;"
      ],
      "err_line": 6,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        10,
        6,
        20
      ],
      "mod_code": [
        "z [ i ] -= ( 2 * k ) ;",
        "z [ i ] += w ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        10,
        20
      ],
      "mod_code": [
        "z [ i ] -= ( 2 * k ) ;",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int w [ n ] ;",
        "z [ i ] += w ;"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        20
      ],
      "mod_code": [
        "int w [ n ] ;",
        "z [ i ] += w ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        20
      ],
      "mod_code": [
        "int w [ n ] ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        20
      ],
      "mod_code": [
        "z [ i ] += w ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid use of non-lvalue array"
    }
  ]
}