{
  "meta": {
    "index": 2490,
    "hitid": "30QQTY5GMKEZ92BEAAE5VELW966U7I",
    "workerid": "AIWEXPJAU66D9",
    "probid": "469A",
    "subid": "48943550"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define ints n and v",
      "code": "int n , v ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create new array of integers game with n + 1 elements",
      "code": "int game [ n + 1 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set first sizeof ( game ) bytes at the pointer game to 0",
      "code": "memset ( game , 0 , sizeof ( game ) ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create ints p and q",
      "code": "int p , q ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read p from the user input",
      "code": "cin >> p ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i from 1 to p inclusive incrementing i",
      "code": "for ( int i = 1 ; i <= p ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read user input to v",
      "code": "cin >> v ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "assign 1 to game [ v ]",
      "code": "game [ v ] = 1 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read from the input to q",
      "code": "cin >> q ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "in a for loop , change i from 0 to q exclusive incrementing i",
      "code": "for ( int i = 0 ; i < q ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read variable v from the input",
      "code": "cin >> v ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "assign the new value = 1 to game [ v ]",
      "code": "game [ v ] = 1 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "start for loop from i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if game [ i ] is equal to 0",
      "code": "if ( game [ i ] == 0 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print \" Oh , my keyboard ! \\ n \"",
      "code": "cout << \" Oh, my keyboard!\\n \" ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" I become the guy . \\ n \" to the output stream",
      "code": "cout << \" I become the guy.\\n \" ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= p ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "{ cin >> v ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < q ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cout << \" I become << endl ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        18,
        22
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << \" \\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        18,
        22,
        2
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << \" \\n \" ;",
        "cin >> n >> n ;"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        18,
        22,
        2,
        17
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << \" \\n \" ;",
        "cin >> n >> n ;",
        "if ( game [ i ] == ' 0 ' )"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        18,
        22,
        2,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << \" \\n \" ;",
        "cin >> n >> n ;",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        18,
        22,
        17
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << \" \\n \" ;",
        "if ( game [ i ] == ' 0 ' )"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        18,
        22,
        17,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << \" \\n \" ;",
        "if ( game [ i ] == ' 0 ' )",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        18,
        22,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << \" \\n \" ;",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        18,
        22
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << endl ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        18,
        22,
        2
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << endl ;",
        "cin >> n >> n ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        18,
        22,
        2,
        17
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << endl ;",
        "cin >> n >> n ;",
        "if ( game [ i ] == ' 0 ' )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        18,
        22,
        2,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << endl ;",
        "cin >> n >> n ;",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        18,
        22,
        17
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << endl ;",
        "if ( game [ i ] == ' 0 ' )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        18,
        22,
        17,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << endl ;",
        "if ( game [ i ] == ' 0 ' )",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        18,
        22,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cout << \" I become << endl ;",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        18,
        2,
        17,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cin >> n >> n ;",
        "if ( game [ i ] == ' 0 ' )",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        2,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "cin >> n >> n ;",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        17,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "if ( game [ i ] == ' 0 ' )",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        22,
        2
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cin >> n >> n ;"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        22,
        2,
        17
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cin >> n >> n ;",
        "if ( game [ i ] == ' 0 ' )"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        22,
        2,
        17,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cin >> n >> n ;",
        "if ( game [ i ] == ' 0 ' )",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        22,
        2,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cin >> n >> n ;",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        22,
        17
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "if ( game [ i ] == ' 0 ' )"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        22,
        17,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "if ( game [ i ] == ' 0 ' )",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        22,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        22,
        2
      ],
      "mod_code": [
        "cout << \" I become << endl ;",
        "cin >> n >> n ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        2,
        17
      ],
      "mod_code": [
        "cout << \" I become << endl ;",
        "cin >> n >> n ;",
        "if ( game [ i ] == ' 0 ' )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        2,
        17,
        4
      ],
      "mod_code": [
        "cout << \" I become << endl ;",
        "cin >> n >> n ;",
        "if ( game [ i ] == ' 0 ' )",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        2,
        4
      ],
      "mod_code": [
        "cout << \" I become << endl ;",
        "cin >> n >> n ;",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        17
      ],
      "mod_code": [
        "cout << \" I become << endl ;",
        "if ( game [ i ] == ' 0 ' )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        17,
        4
      ],
      "mod_code": [
        "cout << \" I become << endl ;",
        "if ( game [ i ] == ' 0 ' )",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        4
      ],
      "mod_code": [
        "cout << \" I become << endl ;",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        17,
        4
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "if ( game [ i ] == ' 0 ' )",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        17,
        4
      ],
      "mod_code": [
        "if ( game [ i ] == ' 0 ' )",
        "memset ( game , 0 , sizeof ( game ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}