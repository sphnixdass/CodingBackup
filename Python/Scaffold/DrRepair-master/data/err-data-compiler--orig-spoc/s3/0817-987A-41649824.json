{
  "meta": {
    "index": 817,
    "hitid": "35F6NGNVM8DK9PWPA5OVQIZUQSVT7M",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "987A",
    "subid": "41649824"
  },
  "lines": [
    {
      "line": 0,
      "text": "maxn = 100010",
      "code": "const int maxn = 1e5 + 10 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "b = array of array of 10 char filled with \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \"",
      "code": "char b [ ] [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "vis = array of 10 int",
      "code": "int vis [ 10 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while read n",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "fill vis with 0",
      "code": "memset ( vis , 0 , sizeof ( vis ) ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "s = string",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if s [ 0 ] is ' p '",
      "code": "if ( s [ 0 ] == ' p ' )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increment vis [ 0 ]",
      "code": "vis [ 0 ] ++ ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else if s [ 0 ] is ' g '",
      "code": "else if ( s [ 0 ] == ' g ' )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment vis [ 1 ]",
      "code": "vis [ 1 ] ++ ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else if s [ 0 ] is ' b '",
      "code": "else if ( s [ 0 ] == ' b ' )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "increment vis [ 2 ]",
      "code": "vis [ 2 ] ++ ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "else if s [ 0 ] is ' o '",
      "code": "else if ( s [ 0 ] == ' o ' )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "increment vis [ 3 ]",
      "code": "vis [ 3 ] ++ ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "else if s [ 0 ] is ' r '",
      "code": "else if ( s [ 0 ] == ' r ' )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increment vis [ 4 ]",
      "code": "vis [ 4 ] ++ ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "else if s [ 0 ] is ' y '",
      "code": "else if ( s [ 0 ] == ' y ' )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "increment vis [ 5 ]",
      "code": "vis [ 5 ] ++ ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "for i = 0 to 6 exclusive",
      "code": "for ( int i = 0 ; i < 6 ; i ++ )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if not vis [ i ] increment cnt",
      "code": "if ( ! vis [ i ] ) cnt ++ ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "for i = 0 to 6 exclusive",
      "code": "for ( int i = 0 ; i < 6 ; i ++ )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if not vis [ i ] print b [ i ]",
      "code": "if ( ! vis [ i ] ) cout << b [ i ] << endl ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "vis [ ++ 3 ] ++ ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "for ( i = 0 ; i < 6 ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "for ( i = 0 ; i < 6 ; i ++ )"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        28
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! vis [ i ] ) cout << b [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        28,
        26
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "cout << cnt ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        28,
        26,
        16
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "cout << cnt ;",
        "else if ( ! s [ 0 ] == ' o ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        28,
        26,
        9
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "cout << cnt ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        28,
        26,
        14
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "cout << cnt ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        28,
        16
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "else if ( ! s [ 0 ] == ' o ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        28,
        16,
        9
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "else if ( ! s [ 0 ] == ' o ' )",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        28,
        16,
        14
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "else if ( ! s [ 0 ] == ' o ' )",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        28,
        9
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        28,
        9,
        14
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "s >> s ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        28,
        14
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        26
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << cnt ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        26,
        16
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << cnt ;",
        "else if ( ! s [ 0 ] == ' o ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        26,
        16,
        9
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << cnt ;",
        "else if ( ! s [ 0 ] == ' o ' )",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        26,
        16,
        14
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << cnt ;",
        "else if ( ! s [ 0 ] == ' o ' )",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        26,
        9
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << cnt ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        26,
        9,
        14
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << cnt ;",
        "s >> s ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        26,
        14
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << cnt ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "else if ( ! s [ 0 ] == ' o ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        16,
        9
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "else if ( ! s [ 0 ] == ' o ' )",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        16,
        9,
        14
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "else if ( ! s [ 0 ] == ' o ' )",
        "s >> s ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        16,
        14
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "else if ( ! s [ 0 ] == ' o ' )",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        9,
        14
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "s >> s ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "char b [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        28,
        26,
        16,
        9
      ],
      "mod_code": [
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "cout << cnt ;",
        "else if ( ! s [ 0 ] == ' o ' )",
        "s >> s ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        26,
        9
      ],
      "mod_code": [
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "cout << cnt ;",
        "s >> s ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        26,
        9,
        14
      ],
      "mod_code": [
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "cout << cnt ;",
        "s >> s ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        16,
        9
      ],
      "mod_code": [
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "else if ( ! s [ 0 ] == ' o ' )",
        "s >> s ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        16,
        9,
        14
      ],
      "mod_code": [
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "else if ( ! s [ 0 ] == ' o ' )",
        "s >> s ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        9
      ],
      "mod_code": [
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "s >> s ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        9,
        14
      ],
      "mod_code": [
        "if ( ! vis [ i ] ) cout << b [ i ] ;",
        "s >> s ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        16,
        9
      ],
      "mod_code": [
        "cout << cnt ;",
        "else if ( ! s [ 0 ] == ' o ' )",
        "s >> s ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        16,
        9,
        14
      ],
      "mod_code": [
        "cout << cnt ;",
        "else if ( ! s [ 0 ] == ' o ' )",
        "s >> s ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        9
      ],
      "mod_code": [
        "cout << cnt ;",
        "s >> s ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        9,
        14
      ],
      "mod_code": [
        "cout << cnt ;",
        "s >> s ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "else if ( ! s [ 0 ] == ' o ' )",
        "s >> s ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        9,
        14
      ],
      "mod_code": [
        "else if ( ! s [ 0 ] == ' o ' )",
        "s >> s ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "s >> s ;",
        "else if ( ! s [ 0 ] == ' b ' )"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}