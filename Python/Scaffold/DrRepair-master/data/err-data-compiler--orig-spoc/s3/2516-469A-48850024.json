{
  "meta": {
    "index": 2516,
    "hitid": "3PUOXASB57XK9KTHVUBXQ2RH6E9Z9O",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "469A",
    "subid": "48850024"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "levels = int",
      "code": "int levels ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read levels",
      "code": "cin >> levels ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "x , y = int",
      "code": "int x , y ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "myset = set of int",
      "code": "set < int > myset ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to 2 exclusive",
      "code": "for ( int i = 0 ; i < 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for j = 0 to x exclusive",
      "code": "for ( int j = 0 ; j < x ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read y",
      "code": "cin >> y ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "insert y into myset",
      "code": "myset . insert ( y ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if size of myset = = levels",
      "code": "if ( myset . size ( ) == levels )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" I become the guy . \"",
      "code": "cout << \" I become the guy. \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" Oh , my keyboard ! \"",
      "code": "cout << \" Oh, my keyboard! \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "set < string > myset ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::set<std::__cxx11::basic_string<char> >::insert(int&)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < x ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "gets ( y ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "myset . push ( y ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::set<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << \" Oh \" << my << \" \\n \" ;"
      ],
      "err_line": 15,
      "err_msg": "‘my’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cout << \" Oh \" << endl ;"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        15,
        5
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cout << \" Oh \" << endl ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        15,
        5,
        7
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cout << \" Oh \" << endl ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "for ( j = 0 ; j < x ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        15,
        5,
        12
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cout << \" Oh \" << endl ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "if ( myset . size ( ) != levels )"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        15,
        5,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cout << \" Oh \" << endl ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "set < string > myset ;"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        15,
        7
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cout << \" Oh \" << endl ;",
        "for ( j = 0 ; j < x ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        15,
        7,
        12
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cout << \" Oh \" << endl ;",
        "for ( j = 0 ; j < x ; j ++ )",
        "if ( myset . size ( ) != levels )"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        15,
        7,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cout << \" Oh \" << endl ;",
        "for ( j = 0 ; j < x ; j ++ )",
        "set < string > myset ;"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        15,
        12
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cout << \" Oh \" << endl ;",
        "if ( myset . size ( ) != levels )"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        15,
        12,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cout << \" Oh \" << endl ;",
        "if ( myset . size ( ) != levels )",
        "set < string > myset ;"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        15,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "cout << \" Oh \" << endl ;",
        "set < string > myset ;"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        5,
        7
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "for ( j = 0 ; j < x ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        5,
        7,
        12
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "for ( j = 0 ; j < x ; j ++ )",
        "if ( myset . size ( ) != levels )"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        5,
        7,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "for ( j = 0 ; j < x ; j ++ )",
        "set < string > myset ;"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        5,
        12
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "if ( myset . size ( ) != levels )"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        5,
        12,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "if ( myset . size ( ) != levels )",
        "set < string > myset ;"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        5,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "set < string > myset ;"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "for ( j = 0 ; j < x ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        7,
        12
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "for ( j = 0 ; j < x ; j ++ )",
        "if ( myset . size ( ) != levels )"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        7,
        12,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "for ( j = 0 ; j < x ; j ++ )",
        "if ( myset . size ( ) != levels )",
        "set < string > myset ;"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        7,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "for ( j = 0 ; j < x ; j ++ )",
        "set < string > myset ;"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "if ( myset . size ( ) != levels )"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        12,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "if ( myset . size ( ) != levels )",
        "set < string > myset ;"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "cout << \" I become << \" \\n \" ;",
        "set < string > myset ;"
      ],
      "err_line": 13,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        15,
        5
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        5,
        7
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "for ( j = 0 ; j < x ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        5,
        7,
        12
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "for ( j = 0 ; j < x ; j ++ )",
        "if ( myset . size ( ) != levels )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        5,
        7,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "for ( j = 0 ; j < x ; j ++ )",
        "set < string > myset ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        5,
        12
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "if ( myset . size ( ) != levels )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        5,
        12,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "if ( myset . size ( ) != levels )",
        "set < string > myset ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        5,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "for ( i = 0 ; i < 2 ; i ++ )",
        "set < string > myset ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        7
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "for ( j = 0 ; j < x ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        7,
        12
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "for ( j = 0 ; j < x ; j ++ )",
        "if ( myset . size ( ) != levels )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        7,
        12,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "for ( j = 0 ; j < x ; j ++ )",
        "if ( myset . size ( ) != levels )",
        "set < string > myset ;"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        7,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "for ( j = 0 ; j < x ; j ++ )",
        "set < string > myset ;"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        12,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "if ( myset . size ( ) != levels )",
        "set < string > myset ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::set<std::__cxx11::basic_string<char> >::insert(int&)’"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "cout << \" Oh \" << endl ;",
        "set < string > myset ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::set<std::__cxx11::basic_string<char> >::insert(int&)’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2 ; i ++ )",
        "for ( j = 0 ; j < x ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2 ; i ++ )",
        "for ( j = 0 ; j < x ; j ++ )",
        "if ( myset . size ( ) != levels )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        12,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2 ; i ++ )",
        "for ( j = 0 ; j < x ; j ++ )",
        "if ( myset . size ( ) != levels )",
        "set < string > myset ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2 ; i ++ )",
        "for ( j = 0 ; j < x ; j ++ )",
        "set < string > myset ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2 ; i ++ )",
        "if ( myset . size ( ) != levels )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2 ; i ++ )",
        "if ( myset . size ( ) != levels )",
        "set < string > myset ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2 ; i ++ )",
        "set < string > myset ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "for ( j = 0 ; j < x ; j ++ )",
        "if ( myset . size ( ) != levels )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        12,
        4
      ],
      "mod_code": [
        "for ( j = 0 ; j < x ; j ++ )",
        "if ( myset . size ( ) != levels )",
        "set < string > myset ;"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "for ( j = 0 ; j < x ; j ++ )",
        "set < string > myset ;"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "if ( myset . size ( ) != levels )",
        "set < string > myset ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::set<std::__cxx11::basic_string<char> >::insert(int&)’"
    }
  ]
}