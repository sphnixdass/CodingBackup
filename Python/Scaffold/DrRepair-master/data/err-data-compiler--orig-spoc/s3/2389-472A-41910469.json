{
  "meta": {
    "index": 2389,
    "hitid": "389A2A304OCP5XUU3K8WMTP3T5Q0C0",
    "workerid": "AIWEXPJAU66D9",
    "probid": "472A",
    "subid": "41910469"
  },
  "lines": [
    {
      "line": 0,
      "text": "create vector of integers is_prime with size 1000000 + 1",
      "code": "vector < int > is_prime ( 1000000 + 1 , false ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "prealoc is a void function",
      "code": "void prealoc ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "is_prime [ 0 ] , is_prime [ 1 ] and is_prime [ 2 ] = false",
      "code": "is_prime [ 0 ] = is_prime [ 1 ] = is_prime [ 2 ] = false ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 4 to 1000005 inclusive by steps of 2 set is_prime [ i ] to true",
      "code": "for ( int i = 4 ; i <= 1000005 ; i += 2 ) is_prime [ i ] = true ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 3 while i * i < = 1000005 going by steps of 2",
      "code": "for ( int i = 3 ; i * i <= 1000005 ; i += 2 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if not is_prime [ i ]",
      "code": "if ( ! ( is_prime [ i ] ) )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for integer j = 2 * i to 1000005 inclusive incrementing by i , set is_prime [ j ] to true",
      "code": "for ( int j = 2 * i ; j <= 1000005 ; j += i ) is_prime [ j ] = true ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "invoke function prealoc",
      "code": "prealoc ( ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "declare integer called n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "while can read n",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for integer i = 4 to n / 2 inclusive",
      "code": "for ( int i = 4 ; i <= n / 2 ; i ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if is_prime [ i ]",
      "code": "if ( is_prime [ i ] )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if is_prime [ n - i ]",
      "code": "if ( is_prime [ n - i ] )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "print i , \" \" , n - i and a new line",
      "code": "cout << i << \" \" << n - i << endl ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "prealoc ( function ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘function’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "while ( can >> n )"
      ],
      "err_line": 12,
      "err_msg": "‘can’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 17,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        14
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        14,
        15
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ i ] )",
        "if ( ! is_prime [ n - i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        14,
        10
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ i ] )",
        "prealoc ( function ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        14,
        17
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ i ] )",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        15
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ n - i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        15,
        10
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ n - i ] )",
        "prealoc ( function ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        15,
        17
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ n - i ] )",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        10
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "prealoc ( function ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        10,
        17
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "prealoc ( function ) ;",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        17
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "if ( ! is_prime [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        14,
        15
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "if ( ! is_prime [ i ] )",
        "if ( ! is_prime [ n - i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        14,
        15,
        10
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "if ( ! is_prime [ i ] )",
        "if ( ! is_prime [ n - i ] )",
        "prealoc ( function ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        14,
        15,
        17
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "if ( ! is_prime [ i ] )",
        "if ( ! is_prime [ n - i ] )",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        14,
        10
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "if ( ! is_prime [ i ] )",
        "prealoc ( function ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        14,
        10,
        17
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "if ( ! is_prime [ i ] )",
        "prealoc ( function ) ;",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        14,
        17
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "if ( ! is_prime [ i ] )",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "if ( ! is_prime [ n - i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        15,
        10
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "if ( ! is_prime [ n - i ] )",
        "prealoc ( function ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        15,
        10,
        17
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "if ( ! is_prime [ n - i ] )",
        "prealoc ( function ) ;",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        15,
        17
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "if ( ! is_prime [ n - i ] )",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "prealoc ( function ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        10,
        17
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "prealoc ( function ) ;",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "is_prime [ 0 ] = is_prime [ 1 ] , is_prime [ 1 ] = false ) ;",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        14,
        15
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ i ] )",
        "if ( ! is_prime [ n - i ] )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        14,
        15,
        10
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ i ] )",
        "if ( ! is_prime [ n - i ] )",
        "prealoc ( function ) ;"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        14,
        15,
        17
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ i ] )",
        "if ( ! is_prime [ n - i ] )",
        "stop ;"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        14,
        10
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ i ] )",
        "prealoc ( function ) ;"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        14,
        10,
        17
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ i ] )",
        "prealoc ( function ) ;",
        "stop ;"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        14,
        17
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ i ] )",
        "stop ;"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ n - i ] )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        15,
        10
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ n - i ] )",
        "prealoc ( function ) ;"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        15,
        10,
        17
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ n - i ] )",
        "prealoc ( function ) ;",
        "stop ;"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        15,
        17
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "if ( ! is_prime [ n - i ] )",
        "stop ;"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "prealoc ( function ) ;"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        10,
        17
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "prealoc ( function ) ;",
        "stop ;"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "for ( i = 3 ; i * i <= 1000005 ; i += 2 )",
        "stop ;"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        15,
        10
      ],
      "mod_code": [
        "if ( ! is_prime [ i ] )",
        "if ( ! is_prime [ n - i ] )",
        "prealoc ( function ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘function’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        10,
        17
      ],
      "mod_code": [
        "if ( ! is_prime [ i ] )",
        "if ( ! is_prime [ n - i ] )",
        "prealoc ( function ) ;",
        "stop ;"
      ],
      "err_line": 10,
      "err_msg": "‘function’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        17
      ],
      "mod_code": [
        "if ( ! is_prime [ i ] )",
        "if ( ! is_prime [ n - i ] )",
        "stop ;"
      ],
      "err_line": 17,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "if ( ! is_prime [ i ] )",
        "prealoc ( function ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘function’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        10,
        17
      ],
      "mod_code": [
        "if ( ! is_prime [ i ] )",
        "prealoc ( function ) ;",
        "stop ;"
      ],
      "err_line": 10,
      "err_msg": "‘function’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        17
      ],
      "mod_code": [
        "if ( ! is_prime [ i ] )",
        "stop ;"
      ],
      "err_line": 17,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        10
      ],
      "mod_code": [
        "if ( ! is_prime [ n - i ] )",
        "prealoc ( function ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘function’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        10,
        17
      ],
      "mod_code": [
        "if ( ! is_prime [ n - i ] )",
        "prealoc ( function ) ;",
        "stop ;"
      ],
      "err_line": 10,
      "err_msg": "‘function’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17
      ],
      "mod_code": [
        "if ( ! is_prime [ n - i ] )",
        "stop ;"
      ],
      "err_line": 17,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        17
      ],
      "mod_code": [
        "prealoc ( function ) ;",
        "stop ;"
      ],
      "err_line": 10,
      "err_msg": "‘function’ was not declared in this scope"
    }
  ]
}