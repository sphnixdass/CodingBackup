{
  "meta": {
    "index": 1956,
    "hitid": "3J9UN9O9J3MCDB00DCPI9X2YJP20JH",
    "workerid": "AIWEXPJAU66D9",
    "probid": "899A",
    "subid": "46706141"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variables a , b , n , c and i with b and c = 0",
      "code": "int a , b = 0 , n , c = 0 , i ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while reading n from the input",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n > = 2 & & n < = 200000",
      "code": "if ( n >= 2 && n <= 200000 )",
      "indent": 2
    },
    {
      "line": 4,
      "text": "set value of b to 0",
      "code": "b = 0 ;",
      "indent": 3
    },
    {
      "line": 5,
      "text": "set value of c to 0",
      "code": "c = 0 ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "if a = 1",
      "code": "if ( a == 1 )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "increase b",
      "code": "b ++ ;",
      "indent": 5
    },
    {
      "line": 10,
      "text": "else if a = 2",
      "code": "else if ( a == 2 )",
      "indent": 4
    },
    {
      "line": 11,
      "text": "increment c",
      "code": "c ++ ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if b - c > = 3",
      "code": "if ( b - c >= 3 )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print c + ( b - c ) / 3",
      "code": "cout << c + ( b - c ) / 3 << endl ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print min of b and c",
      "code": "cout << min ( b , c ) << endl ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "* b = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "* c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "cin >> N ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        7,
        4
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "cin >> N ;",
        "* b = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        7,
        4,
        5
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "cin >> N ;",
        "* b = 0 ;",
        "* c = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        7,
        4,
        10
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "cin >> N ;",
        "* b = 0 ;",
        "else if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        7,
        4,
        8
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "cin >> N ;",
        "* b = 0 ;",
        "if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "cin >> N ;",
        "* c = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        10
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "cin >> N ;",
        "* c = 0 ;",
        "else if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        8
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "cin >> N ;",
        "* c = 0 ;",
        "if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        7,
        10
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "cin >> N ;",
        "else if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        8
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "cin >> N ;",
        "else if ( ! a )",
        "if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        7,
        8
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "cin >> N ;",
        "if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "* b = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "* b = 0 ;",
        "* c = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        10
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "* b = 0 ;",
        "* c = 0 ;",
        "else if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        8
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "* b = 0 ;",
        "* c = 0 ;",
        "if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        4,
        10
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "* b = 0 ;",
        "else if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        4,
        10,
        8
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "* b = 0 ;",
        "else if ( ! a )",
        "if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        4,
        8
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "* b = 0 ;",
        "if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "* c = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        5,
        10
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "* c = 0 ;",
        "else if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        5,
        10,
        8
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "* c = 0 ;",
        "else if ( ! a )",
        "if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "* c = 0 ;",
        "if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "else if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        10,
        8
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "else if ( ! a )",
        "if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int a , b , n , c = 0 , i , i ;",
        "if ( ! a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "cin >> N ;",
        "* b = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        4,
        5
      ],
      "mod_code": [
        "cin >> N ;",
        "* b = 0 ;",
        "* c = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        4,
        5,
        10
      ],
      "mod_code": [
        "cin >> N ;",
        "* b = 0 ;",
        "* c = 0 ;",
        "else if ( ! a )"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        4,
        5,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "* b = 0 ;",
        "* c = 0 ;",
        "if ( ! a )"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        4,
        10
      ],
      "mod_code": [
        "cin >> N ;",
        "* b = 0 ;",
        "else if ( ! a )"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        4,
        10,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "* b = 0 ;",
        "else if ( ! a )",
        "if ( ! a )"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        4,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "* b = 0 ;",
        "if ( ! a )"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "cin >> N ;",
        "* c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        5,
        10
      ],
      "mod_code": [
        "cin >> N ;",
        "* c = 0 ;",
        "else if ( ! a )"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        5,
        10,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "* c = 0 ;",
        "else if ( ! a )",
        "if ( ! a )"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        5,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "* c = 0 ;",
        "if ( ! a )"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "cin >> N ;",
        "else if ( ! a )"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "else if ( ! a )",
        "if ( ! a )"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "if ( ! a )"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "* b = 0 ;",
        "* c = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        5,
        10
      ],
      "mod_code": [
        "* b = 0 ;",
        "* c = 0 ;",
        "else if ( ! a )"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        5,
        10,
        8
      ],
      "mod_code": [
        "* b = 0 ;",
        "* c = 0 ;",
        "else if ( ! a )",
        "if ( ! a )"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        5,
        8
      ],
      "mod_code": [
        "* b = 0 ;",
        "* c = 0 ;",
        "if ( ! a )"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "* b = 0 ;",
        "else if ( ! a )"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        10,
        8
      ],
      "mod_code": [
        "* b = 0 ;",
        "else if ( ! a )",
        "if ( ! a )"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "* b = 0 ;",
        "if ( ! a )"
      ],
      "err_line": 4,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "* c = 0 ;",
        "else if ( ! a )"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5,
        10,
        8
      ],
      "mod_code": [
        "* c = 0 ;",
        "else if ( ! a )",
        "if ( ! a )"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "* c = 0 ;",
        "if ( ! a )"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}