{
  "meta": {
    "index": 2330,
    "hitid": "3MQKOF1EE2ISIF1TWNWSDUGPFAIWDZ",
    "workerid": "A2UFGZT4QUY5ON",
    "probid": "117A",
    "subid": "19748366"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers m , n , s , f , t , k , l , now , res",
      "code": "int m , n , s , f , t , k , l , now , res ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create boolean len",
      "code": "bool len ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read m and n",
      "code": "cin >> m >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set l to 2 * ( n - 1 )",
      "code": "l = 2 * ( n - 1 ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while m is true decrease m by 1 and do the following",
      "code": "while ( m -- )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read s , f and t",
      "code": "cin >> s >> f >> t ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if s is f",
      "code": "if ( s == f )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print t",
      "code": "cout << t << endl ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "continue",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set k to t modulo l",
      "code": "k = t % l ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set now to 0",
      "code": "now = 0 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "assign t to res",
      "code": "res = t ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set len to true",
      "code": "len = true ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if k is greater than or equal to l / 2",
      "code": "if ( k >= l / 2 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set now to n - k modulo ( l / 2 )",
      "code": "now = n - k % ( l / 2 ) ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "set len to false",
      "code": "len = false ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 19,
      "text": "assign 1 + k modulo ( l / 2 ) to now",
      "code": "now = 1 + k % ( l / 2 ) ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if now is less than s",
      "code": "if ( now < s )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if len is true",
      "code": "if ( len )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "increase res by s - now",
      "code": "res += s - now ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "assign s to now",
      "code": "now = s ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "if now is n set len to false",
      "code": "if ( now == n ) len = false ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 26,
      "text": "increase res by now - 1 + s - 1",
      "code": "res += now - 1 + s - 1 ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "set now to s",
      "code": "now = s ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "if now is not n set len to true",
      "code": "if ( now != n ) len = true ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 30,
      "text": "else if now is greater than s",
      "code": "else if ( now > s )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "if len is true",
      "code": "if ( len )",
      "indent": 3
    },
    {
      "line": 32,
      "text": "increase res by n - now + n - s",
      "code": "res += n - now + n - s ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "set now to s",
      "code": "now = s ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "if now is not 1 set len to false",
      "code": "if ( now != 1 ) len = false ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 36,
      "text": "increase res by now - s",
      "code": "res += now - s ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "assign s to now",
      "code": "now = s ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "if now is 1 set len to true",
      "code": "if ( now == 1 ) len = true ;",
      "indent": 4
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 41,
      "text": "set s to f",
      "code": "s = f ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "if now is less than s",
      "code": "if ( now < s )",
      "indent": 2
    },
    {
      "line": 43,
      "text": "if len is true",
      "code": "if ( len )",
      "indent": 3
    },
    {
      "line": 44,
      "text": "increase res by s - now",
      "code": "res += s - now ;",
      "indent": 4
    },
    {
      "line": 45,
      "text": "set now to s",
      "code": "now = s ;",
      "indent": 4
    },
    {
      "line": 46,
      "text": "if now is equal to n set len to false",
      "code": "if ( now == n ) len = false ;",
      "indent": 4
    },
    {
      "line": 47,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 48,
      "text": "increase res by now - 1 + s - 1",
      "code": "res += now - 1 + s - 1 ;",
      "indent": 4
    },
    {
      "line": 49,
      "text": "set now to s",
      "code": "now = s ;",
      "indent": 4
    },
    {
      "line": 50,
      "text": "if now is not n set len to true",
      "code": "if ( now != n ) len = true ;",
      "indent": 4
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 52,
      "text": "else if now is greater than s do the following",
      "code": "else if ( now > s )",
      "indent": 2
    },
    {
      "line": 53,
      "text": "if len is true",
      "code": "if ( len )",
      "indent": 3
    },
    {
      "line": 54,
      "text": "increase res by n - now + n - s",
      "code": "res += n - now + n - s ;",
      "indent": 4
    },
    {
      "line": 55,
      "text": "set now to s",
      "code": "now = s ;",
      "indent": 4
    },
    {
      "line": 56,
      "text": "if now is not 1 set len to false",
      "code": "if ( now != 1 ) len = false ;",
      "indent": 4
    },
    {
      "line": 57,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 58,
      "text": "increase res by now - s",
      "code": "res += now - s ;",
      "indent": 4
    },
    {
      "line": 59,
      "text": "assign s to now",
      "code": "now = s ;",
      "indent": 4
    },
    {
      "line": 60,
      "text": "if now is equal to 1 set len to true",
      "code": "if ( now == 1 ) len = true ;",
      "indent": 4
    },
    {
      "line": 61,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 62,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 63,
      "text": "print res",
      "code": "cout << res << endl ;",
      "indent": 2
    },
    {
      "line": 64,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 65,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 66,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int m , n , s , f , t , l , l , now , res ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool len = s . size ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 30,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "now to ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "now to ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 40,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "s to ;"
      ],
      "err_line": 41,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "now to ;"
      ],
      "err_line": 45,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        47
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 52,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "now to ;"
      ],
      "err_line": 49,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        55
      ],
      "mod_code": [
        "now to ;"
      ],
      "err_line": 55,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        57
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 62,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "k %= l ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        17
      ],
      "mod_code": [
        "k %= l ;",
        "do",
        "bool len = false ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        17,
        19
      ],
      "mod_code": [
        "k %= l ;",
        "do",
        "bool len = false ;",
        "now = 1 + ( l % ( l / 2 ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        17,
        16
      ],
      "mod_code": [
        "k %= l ;",
        "do",
        "bool len = false ;",
        "now /= k % ( l / 2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        17,
        23
      ],
      "mod_code": [
        "k %= l ;",
        "do",
        "bool len = false ;",
        "int now = s ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        19
      ],
      "mod_code": [
        "k %= l ;",
        "do",
        "now = 1 + ( l % ( l / 2 ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        19,
        16
      ],
      "mod_code": [
        "k %= l ;",
        "do",
        "now = 1 + ( l % ( l / 2 ) ) ;",
        "now /= k % ( l / 2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        19,
        23
      ],
      "mod_code": [
        "k %= l ;",
        "do",
        "now = 1 + ( l % ( l / 2 ) ) ;",
        "int now = s ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        16
      ],
      "mod_code": [
        "k %= l ;",
        "do",
        "now /= k % ( l / 2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        16,
        23
      ],
      "mod_code": [
        "k %= l ;",
        "do",
        "now /= k % ( l / 2 ) ;",
        "int now = s ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        23
      ],
      "mod_code": [
        "k %= l ;",
        "do",
        "int now = s ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "do",
        "bool len = false ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        17,
        19
      ],
      "mod_code": [
        "do",
        "bool len = false ;",
        "now = 1 + ( l % ( l / 2 ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        17,
        19,
        16
      ],
      "mod_code": [
        "do",
        "bool len = false ;",
        "now = 1 + ( l % ( l / 2 ) ) ;",
        "now /= k % ( l / 2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        17,
        19,
        23
      ],
      "mod_code": [
        "do",
        "bool len = false ;",
        "now = 1 + ( l % ( l / 2 ) ) ;",
        "int now = s ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        17,
        16
      ],
      "mod_code": [
        "do",
        "bool len = false ;",
        "now /= k % ( l / 2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        17,
        16,
        23
      ],
      "mod_code": [
        "do",
        "bool len = false ;",
        "now /= k % ( l / 2 ) ;",
        "int now = s ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        17,
        23
      ],
      "mod_code": [
        "do",
        "bool len = false ;",
        "int now = s ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        19
      ],
      "mod_code": [
        "do",
        "now = 1 + ( l % ( l / 2 ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        19,
        16
      ],
      "mod_code": [
        "do",
        "now = 1 + ( l % ( l / 2 ) ) ;",
        "now /= k % ( l / 2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        19,
        16,
        23
      ],
      "mod_code": [
        "do",
        "now = 1 + ( l % ( l / 2 ) ) ;",
        "now /= k % ( l / 2 ) ;",
        "int now = s ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        19,
        23
      ],
      "mod_code": [
        "do",
        "now = 1 + ( l % ( l / 2 ) ) ;",
        "int now = s ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "do",
        "now /= k % ( l / 2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        16,
        23
      ],
      "mod_code": [
        "do",
        "now /= k % ( l / 2 ) ;",
        "int now = s ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        23
      ],
      "mod_code": [
        "do",
        "int now = s ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}