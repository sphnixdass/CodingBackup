{
  "meta": {
    "index": 176,
    "hitid": "3BCRDCM0ODO226SXXM5BJDC2C4H6KR",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "363A",
    "subid": "49056320"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "str = string",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "reverse str . begin ( ) and str . end ( )",
      "code": "reverse ( str . begin ( ) , str . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to str . size ( ) exclusive",
      "code": "for ( int i = 0 ; i < str . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if str [ i ] is 0",
      "code": "if ( str [ i ] == ' 0 ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "print O - | - OOOO",
      "code": "cout << \" O-|-OOOO \" << endl ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else if str [ i ] is 1",
      "code": "else if ( str [ i ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print O - | O - OOO",
      "code": "cout << \" O-|O-OOO \" << endl ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else if str [ i ] is 2",
      "code": "else if ( str [ i ] == ' 2 ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print O - | OO - OO",
      "code": "cout << \" O-|OO-OO \" << endl ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if str [ i ] is 3",
      "code": "else if ( str [ i ] == ' 3 ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print O - | OOO - O",
      "code": "cout << \" O-|OOO-O \" << endl ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else if str [ i ] is 4",
      "code": "else if ( str [ i ] == ' 4 ' )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print O - | OOOO -",
      "code": "cout << \" O-|OOOO- \" << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else if str [ i ] is 5",
      "code": "else if ( str [ i ] == ' 5 ' )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print - O | - OOOO",
      "code": "cout << \" -O|-OOOO \" << endl ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else if str [ i ] is 6",
      "code": "else if ( str [ i ] == ' 6 ' )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print - O | O - OOO",
      "code": "cout << \" -O|O-OOO \" << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "else if str [ i ] is 7",
      "code": "else if ( str [ i ] == ' 7 ' )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print - O | OO - OO",
      "code": "cout << \" -O|OO-OO \" << endl ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else if str [ i ] is 8",
      "code": "else if ( str [ i ] == ' 8 ' )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print - O | OOO - O",
      "code": "cout << \" -O|OOO-O \" << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else if str [ i ] is 9",
      "code": "else if ( str [ i ] == ' 9 ' )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print - O | OOOO -",
      "code": "cout << \" -O|OOOO- \" << endl ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "reverse ( str . begin ( ) . begin ( ) , str . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘std::__cxx11::basic_string<char>::iterator {aka class __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        2
      ],
      "mod_code": [
        "cout << \" +------------------------+ \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        8,
        12,
        2
      ],
      "mod_code": [
        "cout << \" +------------------------+ \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "cout << \" O. \" ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        8,
        20,
        2
      ],
      "mod_code": [
        "cout << \" +------------------------+ \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        8,
        2
      ],
      "mod_code": [
        "cout << \" +------------------------+ \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        10,
        12,
        2
      ],
      "mod_code": [
        "cout << \" +------------------------+ \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "cout << \" O. \" ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        10,
        20,
        2
      ],
      "mod_code": [
        "cout << \" +------------------------+ \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        10,
        2
      ],
      "mod_code": [
        "cout << \" +------------------------+ \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        12,
        20,
        2
      ],
      "mod_code": [
        "cout << \" +------------------------+ \" << endl ;",
        "cout << \" O. \" ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        12,
        2
      ],
      "mod_code": [
        "cout << \" +------------------------+ \" << endl ;",
        "cout << \" O. \" ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        20,
        2
      ],
      "mod_code": [
        "cout << \" +------------------------+ \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "cout << \" +------------------------+ \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        10,
        12,
        2
      ],
      "mod_code": [
        "cout << \" |.|) \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "cout << \" O. \" ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        10,
        20,
        2
      ],
      "mod_code": [
        "cout << \" |.|) \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        10,
        2
      ],
      "mod_code": [
        "cout << \" |.|) \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        12,
        20,
        2
      ],
      "mod_code": [
        "cout << \" |.|) \" << endl ;",
        "cout << \" O. \" ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        12,
        2
      ],
      "mod_code": [
        "cout << \" |.|) \" << endl ;",
        "cout << \" O. \" ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        20,
        2
      ],
      "mod_code": [
        "cout << \" |.|) \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        12,
        20,
        2
      ],
      "mod_code": [
        "cout << \" |.|) \" << endl ;",
        "cout << \" O. \" ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        12,
        2
      ],
      "mod_code": [
        "cout << \" |.|) \" << endl ;",
        "cout << \" O. \" ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        20,
        2
      ],
      "mod_code": [
        "cout << \" |.|) \" << endl ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        20,
        2
      ],
      "mod_code": [
        "cout << \" O. \" ;",
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "cout << \" O. \" ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        20,
        2
      ],
      "mod_code": [
        "cout << \" |.|) \" << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}