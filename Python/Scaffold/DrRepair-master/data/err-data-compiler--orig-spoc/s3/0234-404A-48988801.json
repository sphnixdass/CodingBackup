{
  "meta": {
    "index": 234,
    "hitid": "3R5OYNIC2C39FV0P6RICQ4QFQM4TPW",
    "workerid": "A1APYLD4DUK33J",
    "probid": "404A",
    "subid": "48988801"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare prime with integer n as argument , returning boolean",
      "code": "bool prime ( int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer c = 0",
      "code": "int c = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n % i is 0 , increment c",
      "code": "if ( n % i == 0 ) c ++ ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if c is 1",
      "code": "if ( c == 1 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return true from function",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return false",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "declare character array arr size n by n",
      "code": "char arr [ n ] [ n ] ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "declare character sets s , x",
      "code": "set < char > s , x ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "declare character set iterators it , it1",
      "code": "set < char > :: iterator it , it1 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "read arr [ i ] [ j ]",
      "code": "cin >> arr [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if i is j",
      "code": "if ( i == j )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "insert arr [ i ] [ j ] into s",
      "code": "s . insert ( arr [ i ] [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "else if i + j is ( n - 1 )",
      "code": "else if ( i + j == ( n - 1 ) )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "insert arr [ i ] [ j ] into s",
      "code": "s . insert ( arr [ i ] [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 24,
      "text": "insert arr [ i ] [ j ] into x",
      "code": "x . insert ( arr [ i ] [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if size of s is greater than 1 or size of x is greater than 1",
      "code": "if ( s . size ( ) > 1 || x . size ( ) > 1 )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print \" NO \" and newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 31,
      "text": "let it be beginning of s",
      "code": "it = s . begin ( ) ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "let it1 be beginning of x",
      "code": "it1 = x . begin ( ) ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "if value of it is value of it1",
      "code": "if ( * it == * it1 )",
      "indent": 2
    },
    {
      "line": 34,
      "text": "print \" NO \" and newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 36,
      "text": "print \" YES \" and newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "char s , x ;"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "set < char > :: it , it1 ;"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "it1 = strlen ( x ) ;"
      ],
      "err_line": 32,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "c = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 12,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "char arr [ n ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "char s , x , x ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘char x’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "set < char > it , it1 ;"
      ],
      "err_line": 31,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::set<char>’ and ‘std::set<char>::iterator {aka std::_Rb_tree_const_iterator<char>}’)"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "s . push ( arr [ i ] [ j ] ) ;"
      ],
      "err_line": 20,
      "err_msg": "‘class std::set<char>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "s . push ( arr [ i ] [ j ] ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘class std::set<char>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "x . push ( arr [ i ] [ j ] ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘class std::set<char>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 38,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "it = strlen ( s ) ;"
      ],
      "err_line": 31,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "it1 = . ( x ) ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "if ( it == * it1 )"
      ],
      "err_line": 33,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::set<char>::iterator {aka std::_Rb_tree_const_iterator<char>}’ and ‘const char’)"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 37,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "char s , x ;",
        "set < char > :: it , it1 ;"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        14,
        15,
        32
      ],
      "mod_code": [
        "char s , x ;",
        "set < char > :: it , it1 ;",
        "it1 = strlen ( x ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        14,
        15,
        32,
        31
      ],
      "mod_code": [
        "char s , x ;",
        "set < char > :: it , it1 ;",
        "it1 = strlen ( x ) ;",
        "it = strlen ( s ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        14,
        15,
        32,
        35
      ],
      "mod_code": [
        "char s , x ;",
        "set < char > :: it , it1 ;",
        "it1 = strlen ( x ) ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        14,
        15,
        32,
        30
      ],
      "mod_code": [
        "char s , x ;",
        "set < char > :: it , it1 ;",
        "it1 = strlen ( x ) ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        14,
        15,
        31
      ],
      "mod_code": [
        "char s , x ;",
        "set < char > :: it , it1 ;",
        "it = strlen ( s ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        14,
        15,
        31,
        35
      ],
      "mod_code": [
        "char s , x ;",
        "set < char > :: it , it1 ;",
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        14,
        15,
        31,
        30
      ],
      "mod_code": [
        "char s , x ;",
        "set < char > :: it , it1 ;",
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        14,
        15,
        35
      ],
      "mod_code": [
        "char s , x ;",
        "set < char > :: it , it1 ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        14,
        15,
        35,
        30
      ],
      "mod_code": [
        "char s , x ;",
        "set < char > :: it , it1 ;",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        14,
        15,
        30
      ],
      "mod_code": [
        "char s , x ;",
        "set < char > :: it , it1 ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        14,
        32
      ],
      "mod_code": [
        "char s , x ;",
        "it1 = strlen ( x ) ;"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14,
        32,
        31
      ],
      "mod_code": [
        "char s , x ;",
        "it1 = strlen ( x ) ;",
        "it = strlen ( s ) ;"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14,
        32,
        31,
        35
      ],
      "mod_code": [
        "char s , x ;",
        "it1 = strlen ( x ) ;",
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14,
        32,
        31,
        30
      ],
      "mod_code": [
        "char s , x ;",
        "it1 = strlen ( x ) ;",
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14,
        32,
        35
      ],
      "mod_code": [
        "char s , x ;",
        "it1 = strlen ( x ) ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14,
        32,
        35,
        30
      ],
      "mod_code": [
        "char s , x ;",
        "it1 = strlen ( x ) ;",
        "do",
        "do"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14,
        32,
        30
      ],
      "mod_code": [
        "char s , x ;",
        "it1 = strlen ( x ) ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14,
        31
      ],
      "mod_code": [
        "char s , x ;",
        "it = strlen ( s ) ;"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14,
        31,
        35
      ],
      "mod_code": [
        "char s , x ;",
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14,
        31,
        35,
        30
      ],
      "mod_code": [
        "char s , x ;",
        "it = strlen ( s ) ;",
        "do",
        "do"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14,
        31,
        30
      ],
      "mod_code": [
        "char s , x ;",
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14,
        35
      ],
      "mod_code": [
        "char s , x ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14,
        35,
        30
      ],
      "mod_code": [
        "char s , x ;",
        "do",
        "do"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14,
        30
      ],
      "mod_code": [
        "char s , x ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘insert’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        15,
        32
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "it1 = strlen ( x ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        15,
        32,
        31
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "it1 = strlen ( x ) ;",
        "it = strlen ( s ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        15,
        32,
        31,
        35
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "it1 = strlen ( x ) ;",
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        15,
        32,
        31,
        30
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "it1 = strlen ( x ) ;",
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        15,
        32,
        35
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "it1 = strlen ( x ) ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        15,
        32,
        35,
        30
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "it1 = strlen ( x ) ;",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        15,
        32,
        30
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "it1 = strlen ( x ) ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        15,
        31
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "it = strlen ( s ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        15,
        31,
        35
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        15,
        31,
        35,
        30
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "it = strlen ( s ) ;",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        15,
        31,
        30
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        15,
        35
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        15,
        35,
        30
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        15,
        30
      ],
      "mod_code": [
        "set < char > :: it , it1 ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "‘it’ is not a member of ‘std::set<char>’"
    },
    {
      "mod_line": [
        32,
        31
      ],
      "mod_code": [
        "it1 = strlen ( x ) ;",
        "it = strlen ( s ) ;"
      ],
      "err_line": 31,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        32,
        31,
        35
      ],
      "mod_code": [
        "it1 = strlen ( x ) ;",
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 31,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        32,
        31,
        35,
        30
      ],
      "mod_code": [
        "it1 = strlen ( x ) ;",
        "it = strlen ( s ) ;",
        "do",
        "do"
      ],
      "err_line": 31,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        32,
        31,
        30
      ],
      "mod_code": [
        "it1 = strlen ( x ) ;",
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 31,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        32,
        35
      ],
      "mod_code": [
        "it1 = strlen ( x ) ;",
        "do"
      ],
      "err_line": 32,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        32,
        35,
        30
      ],
      "mod_code": [
        "it1 = strlen ( x ) ;",
        "do",
        "do"
      ],
      "err_line": 32,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        32,
        30
      ],
      "mod_code": [
        "it1 = strlen ( x ) ;",
        "do"
      ],
      "err_line": 32,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        31,
        35
      ],
      "mod_code": [
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 31,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        31,
        35,
        30
      ],
      "mod_code": [
        "it = strlen ( s ) ;",
        "do",
        "do"
      ],
      "err_line": 31,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        31,
        30
      ],
      "mod_code": [
        "it = strlen ( s ) ;",
        "do"
      ],
      "err_line": 31,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        35,
        30
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 37,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}