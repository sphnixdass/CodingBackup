{
  "meta": {
    "index": 478,
    "hitid": "3QO7EE372OHUJL7N6I6GQFA3OOPQBI",
    "workerid": "A1APYLD4DUK33J",
    "probid": "734A",
    "subid": "48965263"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "createintegers count , rount , i , n , with count = 0 , rount = 0",
      "code": "int count = 0 , rount = 0 , i , n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string joy",
      "code": "string joy ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read joy",
      "code": "cin >> joy ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if joy [ i ] is ' A \"",
      "code": "if ( joy [ i ] == ' A ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment rount",
      "code": "rount ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if count is greater than rount",
      "code": "if ( count > rount )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" Anton \" print newline",
      "code": "cout << \" Anton \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else if rount is greater than count",
      "code": "else if ( rount > count )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" Danik \" print newline",
      "code": "cout << \" Danik \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if count is rount , print \" Friendship \" print newline",
      "code": "if ( count == rount ) cout << \" Friendship \" << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s ;"
      ],
      "err_line": 4,
      "err_msg": "‘joy’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cout << \" Danik \" ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        14,
        11
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cout << \" Danik \" ;",
        "if ( count >= rount )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        14,
        11,
        3
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cout << \" Danik \" ;",
        "if ( count >= rount )",
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        14,
        11,
        4
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cout << \" Danik \" ;",
        "if ( count >= rount )",
        "cin . get ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        14,
        11,
        1
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cout << \" Danik \" ;",
        "if ( count >= rount )",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        14,
        3
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cout << \" Danik \" ;",
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        14,
        3,
        4
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cout << \" Danik \" ;",
        "cin >> N ;",
        "cin . get ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        14,
        3,
        1
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cout << \" Danik \" ;",
        "cin >> N ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        14,
        4
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cout << \" Danik \" ;",
        "cin . get ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        14,
        4,
        1
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cout << \" Danik \" ;",
        "cin . get ( ) ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        14,
        1
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cout << \" Danik \" ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "if ( count >= rount )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        11,
        3
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "if ( count >= rount )",
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        11,
        3,
        4
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "if ( count >= rount )",
        "cin >> N ;",
        "cin . get ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        11,
        3,
        1
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "if ( count >= rount )",
        "cin >> N ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        11,
        4
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "if ( count >= rount )",
        "cin . get ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        11,
        4,
        1
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "if ( count >= rount )",
        "cin . get ( ) ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        11,
        1
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "if ( count >= rount )",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        3,
        4
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cin >> N ;",
        "cin . get ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        3,
        4,
        1
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cin >> N ;",
        "cin . get ( ) ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        3,
        1
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cin >> N ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cin . get ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        4,
        1
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "cin . get ( ) ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "if ( joy [ i ] == ' A \" )",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        14,
        11,
        3
      ],
      "mod_code": [
        "cout << \" Danik \" ;",
        "if ( count >= rount )",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        11,
        3,
        4
      ],
      "mod_code": [
        "cout << \" Danik \" ;",
        "if ( count >= rount )",
        "cin >> N ;",
        "cin . get ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        11,
        3,
        1
      ],
      "mod_code": [
        "cout << \" Danik \" ;",
        "if ( count >= rount )",
        "cin >> N ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        14,
        11,
        4,
        1
      ],
      "mod_code": [
        "cout << \" Danik \" ;",
        "if ( count >= rount )",
        "cin . get ( ) ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        14,
        11,
        1
      ],
      "mod_code": [
        "cout << \" Danik \" ;",
        "if ( count >= rount )",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "cout << \" Danik \" ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        3,
        4
      ],
      "mod_code": [
        "cout << \" Danik \" ;",
        "cin >> N ;",
        "cin . get ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        3,
        4,
        1
      ],
      "mod_code": [
        "cout << \" Danik \" ;",
        "cin >> N ;",
        "cin . get ( ) ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        14,
        3,
        1
      ],
      "mod_code": [
        "cout << \" Danik \" ;",
        "cin >> N ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        14,
        4,
        1
      ],
      "mod_code": [
        "cout << \" Danik \" ;",
        "cin . get ( ) ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        14,
        1
      ],
      "mod_code": [
        "cout << \" Danik \" ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "if ( count >= rount )",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        3,
        4
      ],
      "mod_code": [
        "if ( count >= rount )",
        "cin >> N ;",
        "cin . get ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        3,
        4,
        1
      ],
      "mod_code": [
        "if ( count >= rount )",
        "cin >> N ;",
        "cin . get ( ) ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        11,
        3,
        1
      ],
      "mod_code": [
        "if ( count >= rount )",
        "cin >> N ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        11,
        4,
        1
      ],
      "mod_code": [
        "if ( count >= rount )",
        "cin . get ( ) ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "if ( count >= rount )",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "cin >> N ;",
        "cin . get ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "cin >> N ;",
        "cin . get ( ) ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "cin >> N ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "long long count = 0 , rount = 0 , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int i’"
    }
  ]
}