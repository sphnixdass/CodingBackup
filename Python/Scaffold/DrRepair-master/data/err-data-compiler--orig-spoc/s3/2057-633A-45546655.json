{
  "meta": {
    "index": 2057,
    "hitid": "3SBNLSTU6UZWCA6Y7AGZCYA7XZFDZA",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "633A",
    "subid": "45546655"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int a , b , c , i and j , set i = 0 , j = 0",
      "code": "int a , b , c , i = 0 , j = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a , b and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to c / a inclusive",
      "code": "for ( i = 0 ; i <= ( c / a ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if c - a * i mod b equal to 0",
      "code": "if ( ( c - a * i ) % b == 0 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "j = 1",
      "code": "j = 1 ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if j = 1",
      "code": "if ( j == 1 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print Yes",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print No and a newline",
      "code": "cout << \" No \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        10,
        9,
        11
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "cout << \" YES\\n \" ;",
        "if ( ! j )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        10,
        9,
        6
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "cout << \" YES\\n \" ;",
        "if ( ! j )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        10,
        11
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        10,
        11,
        5
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "cout << \" YES\\n \" ;",
        "do",
        "int j = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        10,
        11,
        6
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "cout << \" YES\\n \" ;",
        "do",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        10,
        5,
        6
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "cout << \" YES\\n \" ;",
        "int j = 1 ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        10,
        6
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        9,
        11
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "if ( ! j )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        9,
        11,
        5
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "if ( ! j )",
        "do",
        "int j = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        9,
        11,
        6
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "if ( ! j )",
        "do",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        9,
        5,
        6
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "if ( ! j )",
        "int j = 1 ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        9,
        6
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "if ( ! j )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        11,
        5
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "do",
        "int j = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        11,
        5,
        6
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "do",
        "int j = 1 ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        11,
        6
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "do",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "int j = 1 ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "if ( c - a * i == 0 )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        9,
        11
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "if ( ! j )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        9,
        11,
        5
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "if ( ! j )",
        "do",
        "int j = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        9,
        11,
        6
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "if ( ! j )",
        "do",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        9,
        5,
        6
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "if ( ! j )",
        "int j = 1 ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        9,
        6
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "if ( ! j )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        11,
        5
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "do",
        "int j = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        11,
        5,
        6
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "do",
        "int j = 1 ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        11,
        6
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "do",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        5,
        6
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "int j = 1 ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "if ( ! j )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        11,
        5
      ],
      "mod_code": [
        "if ( ! j )",
        "do",
        "int j = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        11,
        5,
        6
      ],
      "mod_code": [
        "if ( ! j )",
        "do",
        "int j = 1 ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        11,
        6
      ],
      "mod_code": [
        "if ( ! j )",
        "do",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        5,
        6
      ],
      "mod_code": [
        "if ( ! j )",
        "int j = 1 ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "if ( ! j )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "do",
        "int j = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        5,
        6
      ],
      "mod_code": [
        "do",
        "int j = 1 ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "int j = 1 ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}