{
  "meta": {
    "index": 2682,
    "hitid": "3QGHA0EA0JUZ3I39IR5MI4SPDC8WB5",
    "workerid": "A1AYVATMT88U1W",
    "probid": "785A",
    "subid": "49064717"
  },
  "lines": [
    {
      "line": 0,
      "text": "the constant integer value of inf = 0x3f3f3f3f",
      "code": "const int inf = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "the constant long integer value of mod = 1000000007",
      "code": "const long long mod = 1000000007 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let n be a integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "the integer value of ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if s equals Tetrahedron",
      "code": "if ( s == \" Tetrahedron \" )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increment ans by 4",
      "code": "ans += 4 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if s equals Cube",
      "code": "else if ( s == \" Cube \" )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increment ans by 6",
      "code": "ans += 6 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else if s equals Octahedron",
      "code": "else if ( s == \" Octahedron \" )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment ans by 8",
      "code": "ans += 8 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else if s equals Dodecahedron",
      "code": "else if ( s == \" Dodecahedron \" )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increment ans by 12",
      "code": "ans += 12 ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "increment ans by 20",
      "code": "ans += 20 ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print ans and newline",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( s == Tetrahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( s == Cube )"
      ],
      "err_line": 11,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else if ( s == Octahedron )"
      ],
      "err_line": 13,
      "err_msg": "‘Octahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else if ( s == Dodecahedron )"
      ],
      "err_line": 15,
      "err_msg": "‘Dodecahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( s == ' Tetrahedron ' )"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( s == 5 )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else if ( s == 5 )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else if ( s == 5 )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Cube )"
      ],
      "err_line": 9,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        13
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Cube )",
        "else if ( s == Octahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        13,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Cube )",
        "else if ( s == Octahedron )",
        "else if ( s == Dodecahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        13,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Cube )",
        "else if ( s == Octahedron )",
        "else if ( s == 5 )"
      ],
      "err_line": 9,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        13,
        7
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Cube )",
        "else if ( s == Octahedron )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        9,
        11,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Cube )",
        "else if ( s == Dodecahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        15,
        7
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Cube )",
        "else if ( s == Dodecahedron )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        9,
        11,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Cube )",
        "else if ( s == 5 )"
      ],
      "err_line": 9,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        15,
        7
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Cube )",
        "else if ( s == 5 )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        9,
        11,
        7
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Cube )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Octahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Octahedron )",
        "else if ( s == Dodecahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        15,
        7
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Octahedron )",
        "else if ( s == Dodecahedron )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        9,
        13,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Octahedron )",
        "else if ( s == 5 )"
      ],
      "err_line": 9,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        15,
        7
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Octahedron )",
        "else if ( s == 5 )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        9,
        13,
        7
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Octahedron )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Dodecahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        7
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == Dodecahedron )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == 5 )"
      ],
      "err_line": 9,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        7
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "else if ( s == 5 )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "else if ( s == Cube )",
        "else if ( s == Octahedron )"
      ],
      "err_line": 11,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        15
      ],
      "mod_code": [
        "else if ( s == Cube )",
        "else if ( s == Octahedron )",
        "else if ( s == Dodecahedron )"
      ],
      "err_line": 11,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        15,
        7
      ],
      "mod_code": [
        "else if ( s == Cube )",
        "else if ( s == Octahedron )",
        "else if ( s == Dodecahedron )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        11,
        13,
        15
      ],
      "mod_code": [
        "else if ( s == Cube )",
        "else if ( s == Octahedron )",
        "else if ( s == 5 )"
      ],
      "err_line": 11,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        15,
        7
      ],
      "mod_code": [
        "else if ( s == Cube )",
        "else if ( s == Octahedron )",
        "else if ( s == 5 )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        11,
        13,
        7
      ],
      "mod_code": [
        "else if ( s == Cube )",
        "else if ( s == Octahedron )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "else if ( s == Cube )",
        "else if ( s == Dodecahedron )"
      ],
      "err_line": 11,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        15,
        7
      ],
      "mod_code": [
        "else if ( s == Cube )",
        "else if ( s == Dodecahedron )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "else if ( s == Cube )",
        "else if ( s == 5 )"
      ],
      "err_line": 11,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        15,
        7
      ],
      "mod_code": [
        "else if ( s == Cube )",
        "else if ( s == 5 )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "else if ( s == Cube )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "else if ( s == Octahedron )",
        "else if ( s == Dodecahedron )"
      ],
      "err_line": 13,
      "err_msg": "‘Octahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        7
      ],
      "mod_code": [
        "else if ( s == Octahedron )",
        "else if ( s == Dodecahedron )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "else if ( s == Octahedron )",
        "else if ( s == 5 )"
      ],
      "err_line": 13,
      "err_msg": "‘Octahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        7
      ],
      "mod_code": [
        "else if ( s == Octahedron )",
        "else if ( s == 5 )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "else if ( s == Octahedron )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        15,
        7
      ],
      "mod_code": [
        "else if ( s == Dodecahedron )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        15,
        7
      ],
      "mod_code": [
        "else if ( s == 5 )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘let’"
    }
  ]
}