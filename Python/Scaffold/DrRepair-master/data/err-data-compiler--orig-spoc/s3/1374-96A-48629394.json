{
  "meta": {
    "index": 1374,
    "hitid": "3M67TQBQQHIJ8CL9J2VY9908W6Z9AJ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "96A",
    "subid": "48629394"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare isSubstring with strings s1 , s2 as arguments",
      "code": "int isSubstring ( string s1 , string s2 )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer M with M = length of s1",
      "code": "int M = s1 . length ( ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer N with N = length of s2",
      "code": "int N = s2 . length ( ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to N - M inclusive",
      "code": "for ( int i = 0 ; i <= N - M ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer j",
      "code": "int j ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "for j = 0 to M exclusive",
      "code": "for ( j = 0 ; j < M ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if s2 [ i + j ] is not s1 [ j ] , break loop",
      "code": "if ( s2 [ i + j ] != s1 [ j ] ) break ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if j is M , return i from function",
      "code": "if ( j == M ) return i ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return - 1 from function",
      "code": "return - 1 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "create string s1 with s1 = \" 1111111 \"",
      "code": "string s1 = \" 1111111 \" ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "create string s2 with s2 = \" 0000000 \"",
      "code": "string s2 = \" 0000000 \" ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if result of run isSubstring with s1 , s as arguments is not - 1 or result of run isSubstring with s2 , s as arguments is not - 1",
      "code": "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) != - 1 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "return - l ;"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "for ( int j = 0 ; j < M ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        12
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "for ( int j = 0 ; j < M ; j ++ )",
        "int s ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        12,
        16
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "for ( int j = 0 ; j < M ; j ++ )",
        "int s ;",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        12,
        15
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "for ( int j = 0 ; j < M ; j ++ )",
        "int s ;",
        "string s2 = \" 0\\n \" ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        12,
        18
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "for ( int j = 0 ; j < M ; j ++ )",
        "int s ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        16
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "for ( int j = 0 ; j < M ; j ++ )",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        16,
        15
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "for ( int j = 0 ; j < M ; j ++ )",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "string s2 = \" 0\\n \" ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        16,
        18
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "for ( int j = 0 ; j < M ; j ++ )",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        15
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "for ( int j = 0 ; j < M ; j ++ )",
        "string s2 = \" 0\\n \" ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        15,
        18
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "for ( int j = 0 ; j < M ; j ++ )",
        "string s2 = \" 0\\n \" ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        18
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "for ( int j = 0 ; j < M ; j ++ )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "int s ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        12,
        16
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "int s ;",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        12,
        16,
        15
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "int s ;",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "string s2 = \" 0\\n \" ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        12,
        16,
        18
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "int s ;",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        12,
        15
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "int s ;",
        "string s2 = \" 0\\n \" ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        12,
        15,
        18
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "int s ;",
        "string s2 = \" 0\\n \" ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        12,
        18
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "int s ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        16,
        15
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "string s2 = \" 0\\n \" ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        16,
        15,
        18
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "string s2 = \" 0\\n \" ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        16,
        18
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "string s2 = \" 0\\n \" ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        15,
        18
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "string s2 = \" 0\\n \" ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "void isSubstring ( string s1 , string s2 )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "for ( int j = 0 ; j < M ; j ++ )",
        "int s ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        5,
        12,
        16
      ],
      "mod_code": [
        "for ( int j = 0 ; j < M ; j ++ )",
        "int s ;",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        5,
        12,
        16,
        15
      ],
      "mod_code": [
        "for ( int j = 0 ; j < M ; j ++ )",
        "int s ;",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "string s2 = \" 0\\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        5,
        12,
        16,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < M ; j ++ )",
        "int s ;",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        5,
        12,
        15
      ],
      "mod_code": [
        "for ( int j = 0 ; j < M ; j ++ )",
        "int s ;",
        "string s2 = \" 0\\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        5,
        12,
        15,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < M ; j ++ )",
        "int s ;",
        "string s2 = \" 0\\n \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        5,
        12,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < M ; j ++ )",
        "int s ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        5,
        16,
        15,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < M ; j ++ )",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "string s2 = \" 0\\n \" ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        16,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < M ; j ++ )",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        15,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < M ; j ++ )",
        "string s2 = \" 0\\n \" ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < M ; j ++ )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "int s ;",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        12,
        16,
        15
      ],
      "mod_code": [
        "int s ;",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "string s2 = \" 0\\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        12,
        16,
        15,
        18
      ],
      "mod_code": [
        "int s ;",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "string s2 = \" 0\\n \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        12,
        16,
        18
      ],
      "mod_code": [
        "int s ;",
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "int s ;",
        "string s2 = \" 0\\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        12,
        15,
        18
      ],
      "mod_code": [
        "int s ;",
        "string s2 = \" 0\\n \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "int s ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        16,
        15,
        18
      ],
      "mod_code": [
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "string s2 = \" 0\\n \" ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "if ( isSubstring ( s1 , s ) != - 1 || isSubstring ( s2 , s ) )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        18
      ],
      "mod_code": [
        "string s2 = \" 0\\n \" ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}