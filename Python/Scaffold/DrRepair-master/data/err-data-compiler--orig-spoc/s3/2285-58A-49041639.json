{
  "meta": {
    "index": 2285,
    "hitid": "3XUY87HIVP8ZHXDS5EP8NM1SR9YMMT",
    "workerid": "AIWEXPJAU66D9",
    "probid": "58A",
    "subid": "49041639"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare long long ints x , y , i , count , j , flag , n1 and n2 with count , j and flag = 0",
      "code": "long long int x , y , i , count = 0 , j = 0 , flag = 0 , n1 , n2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare new strings s1 and s2",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read standard input to s1",
      "code": "cin >> s1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "assign \" hello \" to s2",
      "code": "s2 = \" hello \" ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "change n1 to the length of s1",
      "code": "n1 = s1 . length ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "assign the new value = length of s2 to n2",
      "code": "n2 = s2 . length ( ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n1 exclusive incrementing i",
      "code": "for ( i = 0 ; i < n1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s1 [ i ] = s2 [ j ]",
      "code": "if ( s1 [ i ] == s2 [ j ] )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if j is equal to n2",
      "code": "if ( j == n2 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if flag = 1",
      "code": "if ( flag == 1 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" YES \" to the standard output",
      "code": "cout << \" YES \" ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print \" NO \" to the output stream",
      "code": "cout << \" NO \" ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print \" \\ n \"",
      "code": "cout << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "n2 = strlen ( s2 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , j , n1 , n1 , n2 , n2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int j’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s1 new s2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘new’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> s1 )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "bool s2 = \" hello \" ;"
      ],
      "err_line": 4,
      "err_msg": "conflicting declaration ‘bool s2’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n1 = strlen ( s1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n1 = strlen ( s1 ) ;",
        "n2 = strlen ( s2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        17
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n1 = strlen ( s1 ) ;",
        "n2 = strlen ( s2 ) ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        19
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n1 = strlen ( s1 ) ;",
        "n2 = strlen ( s2 ) ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        21
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n1 = strlen ( s1 ) ;",
        "n2 = strlen ( s2 ) ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        5,
        17
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n1 = strlen ( s1 ) ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        5,
        17,
        19
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n1 = strlen ( s1 ) ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        5,
        17,
        21
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n1 = strlen ( s1 ) ;",
        "cout << \" YES \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        5,
        19
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n1 = strlen ( s1 ) ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        5,
        19,
        21
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n1 = strlen ( s1 ) ;",
        "cout << \" NO \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        5,
        21
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n1 = strlen ( s1 ) ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n2 = strlen ( s2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        6,
        17
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n2 = strlen ( s2 ) ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        6,
        17,
        19
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n2 = strlen ( s2 ) ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        6,
        17,
        21
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n2 = strlen ( s2 ) ;",
        "cout << \" YES \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        6,
        19
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n2 = strlen ( s2 ) ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        6,
        19,
        21
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n2 = strlen ( s2 ) ;",
        "cout << \" NO \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        6,
        21
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "n2 = strlen ( s2 ) ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        17,
        19
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        17,
        19,
        21
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        17,
        21
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "cout << \" YES \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        19,
        21
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "cout << \" NO \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "long long int x , y , i , count = 0 , j , flag , n1 , n1 , n2 , n2 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n1’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "n2 = strlen ( s2 ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        6,
        17
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "n2 = strlen ( s2 ) ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        6,
        17,
        19
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "n2 = strlen ( s2 ) ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        6,
        17,
        21
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "n2 = strlen ( s2 ) ;",
        "cout << \" YES \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        6,
        19
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "n2 = strlen ( s2 ) ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        6,
        19,
        21
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "n2 = strlen ( s2 ) ;",
        "cout << \" NO \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        6,
        21
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "n2 = strlen ( s2 ) ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        17,
        19
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        17,
        19,
        21
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        17,
        21
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "cout << \" YES \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        19
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        19,
        21
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "cout << \" NO \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "n1 = strlen ( s1 ) ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "n2 = strlen ( s2 ) ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        6,
        17,
        19
      ],
      "mod_code": [
        "n2 = strlen ( s2 ) ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        6,
        17,
        19,
        21
      ],
      "mod_code": [
        "n2 = strlen ( s2 ) ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        6,
        17,
        21
      ],
      "mod_code": [
        "n2 = strlen ( s2 ) ;",
        "cout << \" YES \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        6,
        19
      ],
      "mod_code": [
        "n2 = strlen ( s2 ) ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        6,
        19,
        21
      ],
      "mod_code": [
        "n2 = strlen ( s2 ) ;",
        "cout << \" NO \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        6,
        21
      ],
      "mod_code": [
        "n2 = strlen ( s2 ) ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        17,
        19,
        21
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        21
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19,
        21
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    }
  ]
}