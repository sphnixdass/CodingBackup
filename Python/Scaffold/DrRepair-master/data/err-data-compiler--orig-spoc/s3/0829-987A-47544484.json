{
  "meta": {
    "index": 829,
    "hitid": "3I6NF2WGIGQ1HGW02CARTF699SS5GA",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "987A",
    "subid": "47544484"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , s , i , j = int",
      "code": "int n , s , i , j ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "str = string",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "rean n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let color be a string vector of length 6",
      "code": "vector < string > color ( 6 ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set color [ 0 ] = \" purple \"",
      "code": "color [ 0 ] = \" purple \" ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set color at 1 = \" green \"",
      "code": "color [ 1 ] = \" green \" ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "make color [ 2 ] = \" blue \"",
      "code": "color [ 2 ] = \" blue \" ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set color [ 3 ] = \" orange \"",
      "code": "color [ 3 ] = \" orange \" ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "make color at 4 = \" red \"",
      "code": "color [ 4 ] = \" red \" ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set color [ 5 ] to \" yellow \"",
      "code": "color [ 5 ] = \" yellow \" ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "vvod = string vector of size n",
      "code": "vector < string > vvod ( n ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read the first n elements of vvod",
      "code": "for ( i = 0 ; i < n ; i ++ ) cin >> vvod [ i ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print 6 - n",
      "code": "cout << 6 - n << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 0 to 6 exclusive",
      "code": "for ( i = 0 ; i < 6 ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "t = true = bool",
      "code": "bool t = true ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "for j = 0 to n exclusive",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if color at i = vvod at j then set t to false",
      "code": "if ( color [ i ] == vvod [ j ] ) { t = false ; }",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if t isn ' t 0",
      "code": "if ( t )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if color at i = purple then print Power",
      "code": "if ( color [ i ] == \" purple \" ) cout << \" Power \" << endl ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "if color at i = green then print Time",
      "code": "if ( color [ i ] == \" green \" ) cout << \" Time \" << endl ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "if color at i = blue then print Space",
      "code": "if ( color [ i ] == \" blue \" ) cout << \" Space \" << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "if color at i = orange then print Soul",
      "code": "if ( color [ i ] == \" orange \" ) cout << \" Soul \" << endl ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "if if color at i = red then print Reality",
      "code": "if ( color [ i ] == \" red \" ) cout << \" Reality \" << endl ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "if if color at i = yellow the print Mind",
      "code": "if ( color [ i ] == \" yellow \" ) cout << \" Mind \" << endl ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "read char",
      "code": "getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "read char",
      "code": "getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( color [ i ] == blue ) cout << Space << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘blue’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘orange’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 24,
      "err_msg": "‘red’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 25,
      "err_msg": "‘yellow’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , s , i ;"
      ],
      "err_line": 16,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "color [ 0 ] += \" ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "color = \" green \" ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "color [ 2 ] = ' blue \" ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "color [ 3 ] += \" ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "color = \" red \" ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "color [ 5 ++ ] = \" yellow \" ;"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "vector < string > vvod [ n ] ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) { cout << Power << endl ; }"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( color [ i ] == green ) { cout << Time << endl ; }"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( color [ i ] == blue ) { cout << Space << endl ; }"
      ],
      "err_line": 22,
      "err_msg": "‘blue’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( color [ i ] == orange ) cout << Soul << \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "‘orange’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "if ( color [ i ] == red ) { cout << Reality << endl ; }"
      ],
      "err_line": 24,
      "err_msg": "‘red’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "if ( color [ i ] == yellow ) { cout << Mind << endl ; }"
      ],
      "err_line": 25,
      "err_msg": "‘yellow’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "gets ( ) ;"
      ],
      "err_line": 28,
      "err_msg": "too few arguments to function ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "gets ( ) ;"
      ],
      "err_line": 29,
      "err_msg": "too few arguments to function ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        20
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        21
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        21,
        22
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        21,
        23
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        21,
        24
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        21,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        22
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        22,
        23
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        22,
        24
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        22,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        23
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        23,
        24
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        23,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        24
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        24,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        20,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        21
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == green ) cout << Time << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        21,
        22
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        21,
        22,
        23
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        21,
        22,
        24
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        21,
        22,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        21,
        23
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        21,
        23,
        24
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        21,
        23,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        21,
        24
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        21,
        24,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        21,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        22
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        22,
        23
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        22,
        23,
        24
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        22,
        23,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        22,
        24
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        22,
        24,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        22,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        23
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        23,
        24
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        23,
        24,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        23,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        24
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        24,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        4,
        25
      ],
      "mod_code": [
        "vector < string > color [ 6 ] ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [7]’)"
    },
    {
      "mod_line": [
        20,
        21
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21,
        22
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21,
        22,
        23
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21,
        22,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21,
        22,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21,
        23
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21,
        23,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21,
        23,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21,
        24,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        22
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        22,
        23
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        22,
        23,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        22,
        23,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        22,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        22,
        24,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        22,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        23
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        23,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        23,
        24,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        23,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        24,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == purple ) cout << Power << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘purple’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        22
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        22,
        23
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        22,
        23,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        22,
        23,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        22,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        22,
        24,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        22,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        24,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        24,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == green ) cout << Time << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘green’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        23
      ],
      "mod_code": [
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘blue’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        23,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘blue’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        23,
        24,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘blue’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        23,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘blue’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘blue’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        24,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘blue’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == blue ) cout << Space << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘blue’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        24
      ],
      "mod_code": [
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘orange’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        24,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘orange’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == orange ) cout << Soul << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘orange’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        25
      ],
      "mod_code": [
        "if ( color [ i ] == red ) cout << Reality << endl ;",
        "if ( color [ i ] == yellow ) cout << Mind << endl ;"
      ],
      "err_line": 24,
      "err_msg": "‘red’ was not declared in this scope"
    }
  ]
}