{
  "meta": {
    "index": 1867,
    "hitid": "3SBX2M1TKDHAYMMER3WTI14XEWAQ4E",
    "workerid": "AAGJMIEHD79EY",
    "probid": "447A",
    "subid": "29114161"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create 2d int array a with lengths 301 and 2",
      "code": "int a [ 301 ] [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let n and p be ints",
      "code": "int n , p ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let i , m , j , flag be ints with flag = 0",
      "code": "int i , flag = 0 , m , j ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 301 exclusive set a [ i ] [ 1 ] to 0",
      "code": "for ( i = 0 ; i < 301 ; i ++ ) a [ i ] [ 1 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read p and n",
      "code": "cin >> p >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if a [ m mod p ] [ 1 ] equals 1",
      "code": "if ( a [ m % p ] [ 1 ] == 1 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if flag equals 0 set j to i",
      "code": "if ( flag == 0 ) j = i ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set a [ m mod p ] [ 0 ] to m",
      "code": "a [ m % p ] [ 0 ] = m ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set a [ m mod p ] [ 1 ] to 1",
      "code": "a [ m % p ] [ 1 ] = 1 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if flag equals 1",
      "code": "if ( flag == 1 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print j + 1",
      "code": "cout << j + 1 << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ lengths ] [ 2 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘lengths’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "gets ( m ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘equals’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "i , m , j , flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        3,
        8
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "i , m , j , flag = 0 ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        3,
        8,
        7
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "i , m , j , flag = 0 ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        3,
        8,
        9
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "i , m , j , flag = 0 ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        3,
        8,
        18
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "i , m , j , flag = 0 ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        3,
        7
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "i , m , j , flag = 0 ;",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        3,
        7,
        9
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "i , m , j , flag = 0 ;",
        "gets ( m ) ;",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        3,
        7,
        18
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "i , m , j , flag = 0 ;",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        3,
        9
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "i , m , j , flag = 0 ;",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        3,
        9,
        18
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "i , m , j , flag = 0 ;",
        "if ( flag == 0 ) j equals ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        3,
        18
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "i , m , j , flag = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        8,
        7
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "gets ( m ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        8,
        7,
        9
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "gets ( m ) ;",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        8,
        7,
        18
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        8,
        9
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘equals’"
    },
    {
      "mod_line": [
        13,
        8,
        9,
        18
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "if ( flag == 0 ) j equals ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘equals’"
    },
    {
      "mod_line": [
        13,
        8,
        18
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "gets ( m ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        7,
        9
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "gets ( m ) ;",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        7,
        9,
        18
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "gets ( m ) ;",
        "if ( flag == 0 ) j equals ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        7,
        18
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘equals’"
    },
    {
      "mod_line": [
        13,
        9,
        18
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "if ( flag == 0 ) j equals ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘equals’"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "a [ m % p ] [ 1 ] = ' 1 ' ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        7
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        7,
        9
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "gets ( m ) ;",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        7,
        18
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        9
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        9,
        18
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "if ( flag == 0 ) j equals ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        18
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        9
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "gets ( m ) ;",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        18
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "gets ( m ) ;",
        "if ( flag == 0 ) j equals ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        18
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        18
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "if ( flag == 0 ) j equals ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "i , m , j , flag = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "gets ( m ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        9
      ],
      "mod_code": [
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "gets ( m ) ;",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        9,
        18
      ],
      "mod_code": [
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "gets ( m ) ;",
        "if ( flag == 0 ) j equals ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        18
      ],
      "mod_code": [
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘equals’"
    },
    {
      "mod_line": [
        8,
        9,
        18
      ],
      "mod_code": [
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "if ( flag == 0 ) j equals ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘equals’"
    },
    {
      "mod_line": [
        8,
        18
      ],
      "mod_code": [
        "if ( a [ m % p ] [ 1 ] == ' 1 ' )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "gets ( m ) ;",
        "if ( flag == 0 ) j equals ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        18
      ],
      "mod_code": [
        "gets ( m ) ;",
        "if ( flag == 0 ) j equals ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        18
      ],
      "mod_code": [
        "if ( flag == 0 ) j equals ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘equals’"
    }
  ]
}