{
  "meta": {
    "index": 77,
    "hitid": "3VI0PC2ZAYEYBCX8W16UQ76VTDUXO0",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1077A",
    "subid": "48989795"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare long long ints s , n , a , b , k , i , d and e",
      "code": "long long int s , n , a , b , k , i , d , e ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read variable n from the input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i from 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read a , b and k from the input",
      "code": "cin >> a >> b >> k ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if k is even",
      "code": "if ( k % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "assign the new value = k / 2 to d",
      "code": "d = ( k / 2 ) ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "assign ( a * d ) - ( b * d ) to s",
      "code": "s = ( a * d ) - ( b * d ) ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "change the value of d to k / 2 + 1",
      "code": "d = ( k / 2 ) + 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "change the value of e to k - d",
      "code": "e = ( k - d ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set s to ( a * d ) - ( b * e )",
      "code": "s = ( a * d ) - ( b * e ) ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print s to the output stream",
      "code": "cout << s << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "{ cin >> n ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "do",
        "int s = ( a * d ) - ( b * d ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        7,
        10
      ],
      "mod_code": [
        "do",
        "int s = ( a * d ) - ( b * d ) ;",
        "e -= d ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        7,
        10,
        2
      ],
      "mod_code": [
        "do",
        "int s = ( a * d ) - ( b * d ) ;",
        "e -= d ;",
        "{ cin >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        7,
        10,
        5
      ],
      "mod_code": [
        "do",
        "int s = ( a * d ) - ( b * d ) ;",
        "e -= d ;",
        "if ( k % 2 == 1 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        7,
        10,
        4
      ],
      "mod_code": [
        "do",
        "int s = ( a * d ) - ( b * d ) ;",
        "e -= d ;",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        7,
        2
      ],
      "mod_code": [
        "do",
        "int s = ( a * d ) - ( b * d ) ;",
        "{ cin >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        7,
        2,
        5
      ],
      "mod_code": [
        "do",
        "int s = ( a * d ) - ( b * d ) ;",
        "{ cin >> n ;",
        "if ( k % 2 == 1 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        7,
        2,
        4
      ],
      "mod_code": [
        "do",
        "int s = ( a * d ) - ( b * d ) ;",
        "{ cin >> n ;",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        7,
        5
      ],
      "mod_code": [
        "do",
        "int s = ( a * d ) - ( b * d ) ;",
        "if ( k % 2 == 1 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        7,
        5,
        4
      ],
      "mod_code": [
        "do",
        "int s = ( a * d ) - ( b * d ) ;",
        "if ( k % 2 == 1 )",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        7,
        4
      ],
      "mod_code": [
        "do",
        "int s = ( a * d ) - ( b * d ) ;",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "do",
        "e -= d ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        10,
        2
      ],
      "mod_code": [
        "do",
        "e -= d ;",
        "{ cin >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        10,
        2,
        5
      ],
      "mod_code": [
        "do",
        "e -= d ;",
        "{ cin >> n ;",
        "if ( k % 2 == 1 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        10,
        2,
        4
      ],
      "mod_code": [
        "do",
        "e -= d ;",
        "{ cin >> n ;",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        10,
        5
      ],
      "mod_code": [
        "do",
        "e -= d ;",
        "if ( k % 2 == 1 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        10,
        5,
        4
      ],
      "mod_code": [
        "do",
        "e -= d ;",
        "if ( k % 2 == 1 )",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        10,
        4
      ],
      "mod_code": [
        "do",
        "e -= d ;",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "do",
        "{ cin >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        2,
        5
      ],
      "mod_code": [
        "do",
        "{ cin >> n ;",
        "if ( k % 2 == 1 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        2,
        5,
        4
      ],
      "mod_code": [
        "do",
        "{ cin >> n ;",
        "if ( k % 2 == 1 )",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        2,
        4
      ],
      "mod_code": [
        "do",
        "{ cin >> n ;",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "do",
        "if ( k % 2 == 1 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        5,
        4
      ],
      "mod_code": [
        "do",
        "if ( k % 2 == 1 )",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "do",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        7,
        10,
        2
      ],
      "mod_code": [
        "int s = ( a * d ) - ( b * d ) ;",
        "e -= d ;",
        "{ cin >> n ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        7,
        10,
        2,
        5
      ],
      "mod_code": [
        "int s = ( a * d ) - ( b * d ) ;",
        "e -= d ;",
        "{ cin >> n ;",
        "if ( k % 2 == 1 )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        7,
        10,
        2,
        4
      ],
      "mod_code": [
        "int s = ( a * d ) - ( b * d ) ;",
        "e -= d ;",
        "{ cin >> n ;",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "int s = ( a * d ) - ( b * d ) ;",
        "{ cin >> n ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        7,
        2,
        5
      ],
      "mod_code": [
        "int s = ( a * d ) - ( b * d ) ;",
        "{ cin >> n ;",
        "if ( k % 2 == 1 )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        7,
        2,
        5,
        4
      ],
      "mod_code": [
        "int s = ( a * d ) - ( b * d ) ;",
        "{ cin >> n ;",
        "if ( k % 2 == 1 )",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        7,
        2,
        4
      ],
      "mod_code": [
        "int s = ( a * d ) - ( b * d ) ;",
        "{ cin >> n ;",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "e -= d ;",
        "{ cin >> n ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        10,
        2,
        5
      ],
      "mod_code": [
        "e -= d ;",
        "{ cin >> n ;",
        "if ( k % 2 == 1 )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        10,
        2,
        5,
        4
      ],
      "mod_code": [
        "e -= d ;",
        "{ cin >> n ;",
        "if ( k % 2 == 1 )",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        10,
        2,
        4
      ],
      "mod_code": [
        "e -= d ;",
        "{ cin >> n ;",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "{ cin >> n ;",
        "if ( k % 2 == 1 )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        5,
        4
      ],
      "mod_code": [
        "{ cin >> n ;",
        "if ( k % 2 == 1 )",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "{ cin >> n ;",
        "while ( cin >> a >> b >> k )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    }
  ]
}