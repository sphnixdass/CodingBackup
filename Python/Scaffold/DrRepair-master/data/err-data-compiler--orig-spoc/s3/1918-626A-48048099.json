{
  "meta": {
    "index": 1918,
    "hitid": "3EPG8DX9LKK7UTPZ5V0ENOK19WGP5O",
    "workerid": "AIWEXPJAU66D9",
    "probid": "626A",
    "subid": "48048099"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variables n , ud , lr and ans , with ans = 0",
      "code": "int n , ud , lr , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "s is string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "ud and lr = 0",
      "code": "ud = lr = 0 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for integer j = i to n exclusive",
      "code": "for ( int j = i ; j < n ; ++ j )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increase ud by 1 if s [ j ] = ' U ' , - 1 if s [ j ] = = ' D ' or 0 if both conditions are false",
      "code": "ud += s [ j ] == ' U ' ? 1 : s [ j ] == ' D ' ? - 1 : 0 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "increase lr by 1 if s [ j ] = ' R ' , - 1 if s [ j ] = = ' L ' or 0 if both conditions are false",
      "code": "lr += s [ j ] == ' R ' ? 1 : s [ j ] == ' L ' ? - 1 : 0 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increase ans by ( ud = 0 and lr = 0 )",
      "code": "ans += ud == 0 && lr == 0 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print ans and \" \\ n \"",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , ud , lr , ans = 0 , ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? s += 1 : s [ j ] == ' D ' || s [ j ] == ' D ' ;"
      ],
      "err_line": 7,
      "err_msg": "operands to ?: have different types ‘std::__cxx11::basic_string<char>’ and ‘bool’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "ans += ( ud = 0 , lr = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        8,
        9,
        1
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "lr += s [ j ] == ' R ' ? s [ j ] += 1 : 0 ;",
        "ans += ( ud = 0 , lr = 0 ) ;",
        "int n , ud , lr , ans = 0 , ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        8,
        1
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "lr += s [ j ] == ' R ' ? s [ j ] += 1 : 0 ;",
        "int n , ud , lr , ans = 0 , ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        8,
        1,
        12
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "lr += s [ j ] == ' R ' ? s [ j ] += 1 : 0 ;",
        "int n , ud , lr , ans = 0 , ans ;",
        "cout << ans << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        9,
        1
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "ans += ( ud = 0 , lr = 0 ) ;",
        "int n , ud , lr , ans = 0 , ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        9,
        1,
        12
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "ans += ( ud = 0 , lr = 0 ) ;",
        "int n , ud , lr , ans = 0 , ans ;",
        "cout << ans << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        9,
        1,
        8
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "ans += ( ud = 0 , lr = 0 ) ;",
        "int n , ud , lr , ans = 0 , ans ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        9,
        12,
        8
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "ans += ( ud = 0 , lr = 0 ) ;",
        "cout << ans << \" \" ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        9,
        8
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "ans += ( ud = 0 , lr = 0 ) ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "int n , ud , lr , ans = 0 , ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        1,
        12
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "int n , ud , lr , ans = 0 , ans ;",
        "cout << ans << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        1,
        12,
        8
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "int n , ud , lr , ans = 0 , ans ;",
        "cout << ans << \" \" ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        1,
        8
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "int n , ud , lr , ans = 0 , ans ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        12,
        8
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "cout << ans << \" \" ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "ud += s [ j ] == ' U ' ? - 1 : s [ j ] == ' D ' ? 0 : 0 ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        9,
        1
      ],
      "mod_code": [
        "lr += s [ j ] == ' R ' ? s [ j ] += 1 : 0 ;",
        "ans += ( ud = 0 , lr = 0 ) ;",
        "int n , ud , lr , ans = 0 , ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        8,
        9,
        1,
        12
      ],
      "mod_code": [
        "lr += s [ j ] == ' R ' ? s [ j ] += 1 : 0 ;",
        "ans += ( ud = 0 , lr = 0 ) ;",
        "int n , ud , lr , ans = 0 , ans ;",
        "cout << ans << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "lr += s [ j ] == ' R ' ? s [ j ] += 1 : 0 ;",
        "int n , ud , lr , ans = 0 , ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        8,
        1,
        12
      ],
      "mod_code": [
        "lr += s [ j ] == ' R ' ? s [ j ] += 1 : 0 ;",
        "int n , ud , lr , ans = 0 , ans ;",
        "cout << ans << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "ans += ( ud = 0 , lr = 0 ) ;",
        "int n , ud , lr , ans = 0 , ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        9,
        1,
        12
      ],
      "mod_code": [
        "ans += ( ud = 0 , lr = 0 ) ;",
        "int n , ud , lr , ans = 0 , ans ;",
        "cout << ans << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        9,
        1,
        12,
        8
      ],
      "mod_code": [
        "ans += ( ud = 0 , lr = 0 ) ;",
        "int n , ud , lr , ans = 0 , ans ;",
        "cout << ans << \" \" ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        9,
        1,
        8
      ],
      "mod_code": [
        "ans += ( ud = 0 , lr = 0 ) ;",
        "int n , ud , lr , ans = 0 , ans ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        9,
        12,
        8
      ],
      "mod_code": [
        "ans += ( ud = 0 , lr = 0 ) ;",
        "cout << ans << \" \" ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "ans += ( ud = 0 , lr = 0 ) ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int n , ud , lr , ans = 0 , ans ;",
        "cout << ans << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        12,
        8
      ],
      "mod_code": [
        "int n , ud , lr , ans = 0 , ans ;",
        "cout << ans << \" \" ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int n , ud , lr , ans = 0 , ans ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "cout << ans << \" \" ;",
        "lr += ( s [ j ] == ' R ' ? s [ j ] == ' R ' || s [ j ] == ' L ' || s [ j ] == ' L ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘:’ before ‘)’ token"
    }
  ]
}