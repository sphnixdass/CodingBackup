{
  "meta": {
    "index": 630,
    "hitid": "31J7RYECZLKIFQ9ICG5V3HY0SRUL1U",
    "workerid": "AIWEXPJAU66D9",
    "probid": "5A",
    "subid": "44921411"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , cnt and total be integers with n = 0 , cnt = 0 and total = 0",
      "code": "int n = 0 , cnt = 0 , total = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare string variable str",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while can read line into str",
      "code": "while ( getline ( cin , str ) )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if str [ 0 ] is equal to ' + '",
      "code": "if ( str [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "increase cnt",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else if str [ 0 ] is equal to ' - '",
      "code": "else if ( str [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "decrease cnt by one",
      "code": "cnt -- ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "integer ln = length of str",
      "code": "int ln = str . size ( ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "for i = 1 to ln exclusive",
      "code": "for ( int i = 1 ; i < ln ; i ++ )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if str [ i ] is equal to ' : ' , n = n + ( ln - i - 1 ) * cnt",
      "code": "if ( str [ i ] == ' : ' ) n = n + ( ln - i - 1 ) * cnt ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print n and a new line",
      "code": "cout << n << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int total’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int str ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( str [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "while ( cin >> str )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int total’"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "while ( cin >> str )",
        "if ( str [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "while ( cin >> str )",
        "if ( str [ 0 ] == \" + ' )",
        "int str ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        8
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "while ( cin >> str )",
        "if ( str [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        3,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "while ( cin >> str )",
        "int str ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int total’"
    },
    {
      "mod_line": [
        1,
        3,
        2,
        8
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "while ( cin >> str )",
        "int str ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int total’"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "while ( cin >> str )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int total’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "if ( str [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        4,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "if ( str [ 0 ] == \" + ' )",
        "int str ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        4,
        2,
        8
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "if ( str [ 0 ] == \" + ' )",
        "int str ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        4,
        8
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "if ( str [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "int str ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int total’"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "int str ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int total’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int n , cnt = 0 , total = 0 , total = 0 ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int total’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "while ( cin >> str )",
        "if ( str [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        2
      ],
      "mod_code": [
        "while ( cin >> str )",
        "if ( str [ 0 ] == \" + ' )",
        "int str ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        2,
        8
      ],
      "mod_code": [
        "while ( cin >> str )",
        "if ( str [ 0 ] == \" + ' )",
        "int str ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        8
      ],
      "mod_code": [
        "while ( cin >> str )",
        "if ( str [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "while ( cin >> str )",
        "int str ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        2,
        8
      ],
      "mod_code": [
        "while ( cin >> str )",
        "int str ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "while ( cin >> str )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "if ( str [ 0 ] == \" + ' )",
        "int str ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        2,
        8
      ],
      "mod_code": [
        "if ( str [ 0 ] == \" + ' )",
        "int str ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "if ( str [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "int str ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    }
  ]
}