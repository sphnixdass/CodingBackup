{
  "meta": {
    "index": 1335,
    "hitid": "3G3AJKPCXLMJ7OD0IDDNVN7ZESNY4W",
    "workerid": "A1APYLD4DUK33J",
    "probid": "731A",
    "subid": "48552984"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string x = \" a \"",
      "code": "string x = \" a \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare integers count1 = 0 , count2 = 0",
      "code": "int count1 = 0 , count2 = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare string inp",
      "code": "string inp ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read inp",
      "code": "cin >> inp ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to length of inp exclusive",
      "code": "for ( int i = 0 ; i < inp . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let count1 = maximum of ( ( inp [ i ] - x [ 0 ] ) and ( x [ 0 ] - inp [ i ] ) )",
      "code": "count1 = max ( ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if count1 is greater than 13",
      "code": "if ( count1 > 13 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment count2 by 26 - count1",
      "code": "count2 += ( 26 - count1 ) ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increment count2 by count1",
      "code": "count2 += count1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "let x be inp [ i ]",
      "code": "x = inp [ i ] ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print count2 and newline",
      "code": "cout << count2 << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string inp = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘x’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        6,
        4
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "cout << inp ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        6,
        4,
        9
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "cout << inp ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        6,
        4,
        1
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "cout << inp ;",
        "string x = \" 8< \" ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        6,
        4,
        12
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "cout << inp ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        6,
        9
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        1
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "do",
        "string x = \" 8< \" ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        12
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "do",
        "int x = inp [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        6,
        1
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "string x = \" 8< \" ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        6,
        1,
        12
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "string x = \" 8< \" ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        6,
        12
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "cout << inp ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        4,
        9
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "cout << inp ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        4,
        9,
        1
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "cout << inp ;",
        "do",
        "string x = \" 8< \" ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        4,
        9,
        12
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "cout << inp ;",
        "do",
        "int x = inp [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "cout << inp ;",
        "string x = \" 8< \" ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        4,
        1,
        12
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "cout << inp ;",
        "string x = \" 8< \" ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        4,
        12
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "cout << inp ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        9,
        1
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "do",
        "string x = \" 8< \" ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        9,
        1,
        12
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "do",
        "string x = \" 8< \" ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        9,
        12
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "do",
        "int x = inp [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "string x = \" 8< \" ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        1,
        12
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "string x = \" 8< \" ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "string inp = getchar ( ) ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "cout << inp ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        4,
        9
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "cout << inp ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        4,
        9,
        1
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "cout << inp ;",
        "do",
        "string x = \" 8< \" ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        4,
        9,
        12
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "cout << inp ;",
        "do",
        "int x = inp [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        4,
        1
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "cout << inp ;",
        "string x = \" 8< \" ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        4,
        1,
        12
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "cout << inp ;",
        "string x = \" 8< \" ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        4,
        12
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "cout << inp ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        9,
        1
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "do",
        "string x = \" 8< \" ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        9,
        1,
        12
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "do",
        "string x = \" 8< \" ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        9,
        12
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "do",
        "int x = inp [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "string x = \" 8< \" ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        1,
        12
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "string x = \" 8< \" ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "count1 = ( max ( inp [ i ] - x [ 0 ] ) , ( x [ 0 ] - inp [ i ] ) ) ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "cout << inp ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘x’"
    },
    {
      "mod_line": [
        4,
        9,
        1
      ],
      "mod_code": [
        "cout << inp ;",
        "do",
        "string x = \" 8< \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘x’"
    },
    {
      "mod_line": [
        4,
        9,
        1,
        12
      ],
      "mod_code": [
        "cout << inp ;",
        "do",
        "string x = \" 8< \" ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘x’"
    },
    {
      "mod_line": [
        4,
        9,
        12
      ],
      "mod_code": [
        "cout << inp ;",
        "do",
        "int x = inp [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘x’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "do",
        "string x = \" 8< \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘x’"
    },
    {
      "mod_line": [
        9,
        1,
        12
      ],
      "mod_code": [
        "do",
        "string x = \" 8< \" ;",
        "int x = inp [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘x’"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "do",
        "int x = inp [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘x’"
    }
  ]
}