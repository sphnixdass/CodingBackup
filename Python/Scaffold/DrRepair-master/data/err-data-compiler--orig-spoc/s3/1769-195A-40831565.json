{
  "meta": {
    "index": 1769,
    "hitid": "356ZPKYPUHB5WHZJGX5BYLIU5OIPYD",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "195A",
    "subid": "40831565"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a , b , c , x = int , cal and count = 0",
      "code": "int a , b , c , x , cal = 0 , count = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a , b , c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "x = a * c",
      "code": "x = a * c ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "i = 0 , increment i at end of for",
      "code": "for ( int i = 0 ; ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "cal = b + cal",
      "code": "cal = b + cal ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment count",
      "code": "++ count ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if cal > = x",
      "code": "if ( cal >= x )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print count - c",
      "code": "cout << count - c << endl ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char i = 0 , i ++ ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a , b , c , x , x , count = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int64_t i = 0 , i ++ ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( cal >= x )"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "cal += cal ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        4,
        5,
        3
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "cal += cal ;",
        "x -= c ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        4,
        5,
        3,
        7
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "cal += cal ;",
        "x -= c ;",
        "else if ( cal >= x )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        4,
        5,
        3,
        9
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "cal += cal ;",
        "x -= c ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "cal += cal ;",
        "else if ( cal >= x )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        9
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "cal += cal ;",
        "else if ( cal >= x )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        4,
        5,
        9
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "cal += cal ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "x -= c ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        4,
        3,
        7
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "x -= c ;",
        "else if ( cal >= x )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        4,
        3,
        7,
        9
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "x -= c ;",
        "else if ( cal >= x )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        4,
        3,
        9
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "x -= c ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "else if ( cal >= x )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        4,
        7,
        9
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "else if ( cal >= x )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "char i = 0 , i ++ ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        5,
        3,
        7
      ],
      "mod_code": [
        "cal += cal ;",
        "x -= c ;",
        "else if ( cal >= x )"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        3,
        7,
        4
      ],
      "mod_code": [
        "cal += cal ;",
        "x -= c ;",
        "else if ( cal >= x )",
        "int64_t i = 0 , i ++ ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        5,
        3,
        7,
        9
      ],
      "mod_code": [
        "cal += cal ;",
        "x -= c ;",
        "else if ( cal >= x )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        3,
        4
      ],
      "mod_code": [
        "cal += cal ;",
        "x -= c ;",
        "int64_t i = 0 , i ++ ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        5,
        3,
        4,
        9
      ],
      "mod_code": [
        "cal += cal ;",
        "x -= c ;",
        "int64_t i = 0 , i ++ ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        5,
        3,
        9
      ],
      "mod_code": [
        "cal += cal ;",
        "x -= c ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "cal += cal ;",
        "else if ( cal >= x )"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        7,
        4
      ],
      "mod_code": [
        "cal += cal ;",
        "else if ( cal >= x )",
        "int64_t i = 0 , i ++ ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        5,
        7,
        4,
        9
      ],
      "mod_code": [
        "cal += cal ;",
        "else if ( cal >= x )",
        "int64_t i = 0 , i ++ ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        5,
        7,
        9
      ],
      "mod_code": [
        "cal += cal ;",
        "else if ( cal >= x )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "cal += cal ;",
        "int64_t i = 0 , i ++ ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        5,
        4,
        9
      ],
      "mod_code": [
        "cal += cal ;",
        "int64_t i = 0 , i ++ ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "cal += cal ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "x -= c ;",
        "else if ( cal >= x )"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        7,
        4
      ],
      "mod_code": [
        "x -= c ;",
        "else if ( cal >= x )",
        "int64_t i = 0 , i ++ ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        3,
        7,
        4,
        9
      ],
      "mod_code": [
        "x -= c ;",
        "else if ( cal >= x )",
        "int64_t i = 0 , i ++ ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        3,
        7,
        9
      ],
      "mod_code": [
        "x -= c ;",
        "else if ( cal >= x )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "x -= c ;",
        "int64_t i = 0 , i ++ ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        3,
        4,
        9
      ],
      "mod_code": [
        "x -= c ;",
        "int64_t i = 0 , i ++ ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "x -= c ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "else if ( cal >= x )",
        "int64_t i = 0 , i ++ ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        7,
        4,
        9
      ],
      "mod_code": [
        "else if ( cal >= x )",
        "int64_t i = 0 , i ++ ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "else if ( cal >= x )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "int64_t i = 0 , i ++ ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘++’ token"
    }
  ]
}