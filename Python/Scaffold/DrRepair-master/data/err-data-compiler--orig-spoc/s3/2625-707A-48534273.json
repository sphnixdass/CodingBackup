{
  "meta": {
    "index": 2625,
    "hitid": "3XUSYT70ITVZAP083G376Z7LE530D1",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "707A",
    "subid": "48534273"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , m = integers",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read n , m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "flag = integer with 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "x = character",
      "code": "char x ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "Read x",
      "code": "cin >> x ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if x is equal to C OR x is equal to M OR x is equal to Y , set flag to 1",
      "code": "if ( x == ' C ' || x == ' M ' || x == ' Y ' ) flag = 1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if flag is equal to 1",
      "code": "if ( flag == 1 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print # Color and a new line",
      "code": "cout << \" #Color \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print # Black & White and a new line",
      "code": "cout << \" #Black&White \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "‘M’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "set < char > x ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( x == C || x == M || x == Y ) flag = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" ;"
      ],
      "err_line": 8,
      "err_msg": "‘M’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        12,
        14
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" ;",
        "cout << \" # \" << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "‘M’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        12,
        14,
        13
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" ;",
        "cout << \" # \" << \" \\n \" ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "‘M’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        12,
        14,
        7
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" ;",
        "cout << \" # \" << \" \\n \" ;",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12,
        13
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "‘M’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        12,
        13,
        7
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" ;",
        "do",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12,
        7
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" ;",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "‘M’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        14,
        13
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" << \" \\n \" ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "‘M’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        14,
        13,
        7
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" << \" \\n \" ;",
        "do",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        14,
        13,
        12
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" << \" \\n \" ;",
        "do",
        "cout << \" # \" << ' \\n ' ;"
      ],
      "err_line": 8,
      "err_msg": "‘M’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        14,
        7
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" << \" \\n \" ;",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        14,
        7,
        12
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" << \" \\n \" ;",
        "gets ( x ) ;",
        "cout << \" # \" << ' \\n ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        14,
        12
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" << \" \\n \" ;",
        "cout << \" # \" << ' \\n ' ;"
      ],
      "err_line": 8,
      "err_msg": "‘M’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "‘M’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13,
        7
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "do",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        13,
        7,
        12
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "do",
        "gets ( x ) ;",
        "cout << \" # \" << ' \\n ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        13,
        12
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "do",
        "cout << \" # \" << ' \\n ' ;"
      ],
      "err_line": 8,
      "err_msg": "‘M’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        12
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "gets ( x ) ;",
        "cout << \" # \" << ' \\n ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "if ( x == ' C ' || x == M || x == Y ) flag = 1 ;",
        "cout << \" # \" << ' \\n ' ;"
      ],
      "err_line": 8,
      "err_msg": "‘M’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        13
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "cout << \" # \" << \" \\n \" ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        12,
        14,
        13,
        7
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "cout << \" # \" << \" \\n \" ;",
        "do",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        14,
        7
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "cout << \" # \" << \" \\n \" ;",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        12,
        13,
        7
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "do",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        13
      ],
      "mod_code": [
        "cout << \" # \" << \" \\n \" ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        14,
        13,
        7
      ],
      "mod_code": [
        "cout << \" # \" << \" \\n \" ;",
        "do",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        13,
        7,
        12
      ],
      "mod_code": [
        "cout << \" # \" << \" \\n \" ;",
        "do",
        "gets ( x ) ;",
        "cout << \" # \" << ' \\n ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        13,
        12
      ],
      "mod_code": [
        "cout << \" # \" << \" \\n \" ;",
        "do",
        "cout << \" # \" << ' \\n ' ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        14,
        7
      ],
      "mod_code": [
        "cout << \" # \" << \" \\n \" ;",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        7,
        12
      ],
      "mod_code": [
        "cout << \" # \" << \" \\n \" ;",
        "gets ( x ) ;",
        "cout << \" # \" << ' \\n ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "do",
        "gets ( x ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        7,
        12
      ],
      "mod_code": [
        "do",
        "gets ( x ) ;",
        "cout << \" # \" << ' \\n ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "do",
        "cout << \" # \" << ' \\n ' ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "gets ( x ) ;",
        "cout << \" # \" << ' \\n ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    }
  ]
}