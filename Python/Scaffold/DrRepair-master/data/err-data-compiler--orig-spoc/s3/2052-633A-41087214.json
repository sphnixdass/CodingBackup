{
  "meta": {
    "index": 2052,
    "hitid": "309D674SHZFQPKX4105L6ALMLWHBC2",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "633A",
    "subid": "41087214"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a , b , c , n , x , y , z , i = integers with z = 0",
      "code": "int a , b , c , n , x , y , z = 0 , i ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read x , y , z",
      "code": "cin >> x >> y >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for b = 0 to n - b * y > = 0",
      "code": "for ( b = 0 ; n - b * y >= 0 ; b ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "a = ( n - b * y ) / x",
      "code": "a = ( n - b * y ) / x ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if x * a + y * b is n",
      "code": "if ( x * a + y * b == n )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "z = 1",
      "code": "z = 1 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if z is 1",
      "code": "if ( z == 1 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print Yes",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print No",
      "code": "cout << \" No \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a , b , c , n , x , y , z , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        12
      ],
      "mod_code": [
        "cin >> x >> y >> z ;",
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        12,
        7
      ],
      "mod_code": [
        "cin >> x >> y >> z ;",
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        3,
        12,
        6
      ],
      "mod_code": [
        "cin >> x >> y >> z ;",
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do",
        "int z = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "cin >> x >> y >> z ;",
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        6
      ],
      "mod_code": [
        "cin >> x >> y >> z ;",
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do",
        "int z = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "cin >> x >> y >> z ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        12,
        7
      ],
      "mod_code": [
        "cin >> x >> y >> z ;",
        "do",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        12,
        7,
        6
      ],
      "mod_code": [
        "cin >> x >> y >> z ;",
        "do",
        "do",
        "int z = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        12,
        6
      ],
      "mod_code": [
        "cin >> x >> y >> z ;",
        "do",
        "int z = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "cin >> x >> y >> z ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        7,
        6
      ],
      "mod_code": [
        "cin >> x >> y >> z ;",
        "do",
        "int z = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        12,
        2
      ],
      "mod_code": [
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do",
        "cin >> x >> x >> z ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        12,
        2,
        7
      ],
      "mod_code": [
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do",
        "cin >> x >> x >> z ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        12,
        2,
        6
      ],
      "mod_code": [
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do",
        "cin >> x >> x >> z ;",
        "int z = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        12,
        7
      ],
      "mod_code": [
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        12,
        7,
        6
      ],
      "mod_code": [
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do",
        "do",
        "int z = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        12,
        6
      ],
      "mod_code": [
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do",
        "int z = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        2,
        7
      ],
      "mod_code": [
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "cin >> x >> x >> z ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        2,
        7,
        6
      ],
      "mod_code": [
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "cin >> x >> x >> z ;",
        "do",
        "int z = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        7,
        6
      ],
      "mod_code": [
        "for ( int b = 0 ; b < n - b * y >= 0 ; b ++ )",
        "do",
        "int z = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "do",
        "cin >> x >> x >> z ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        12,
        2,
        7
      ],
      "mod_code": [
        "do",
        "cin >> x >> x >> z ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        2,
        7,
        6
      ],
      "mod_code": [
        "do",
        "cin >> x >> x >> z ;",
        "do",
        "int z = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        2,
        6
      ],
      "mod_code": [
        "do",
        "cin >> x >> x >> z ;",
        "int z = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        7,
        6
      ],
      "mod_code": [
        "do",
        "do",
        "int z = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "do",
        "int z = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "cin >> x >> x >> z ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        7,
        6
      ],
      "mod_code": [
        "cin >> x >> x >> z ;",
        "do",
        "int z = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "do",
        "int z = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}