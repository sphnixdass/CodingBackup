{
  "meta": {
    "index": 2526,
    "hitid": "3YGE63DIN8RYJV0ZKB8XYNW6M8C0WO",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "469A",
    "subid": "48550818"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , a , b , x , y , sum = 0 , vis [ 101 ] be ints",
      "code": "int n , a , b , x , y , sum = 0 , vis [ 101 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "memset vis to - 1",
      "code": "memset ( vis , - 1 , sizeof ( vis ) ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to a exclusive",
      "code": "for ( int i = 0 ; i < a ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if vis at x is non zero negative",
      "code": "if ( vis [ x ] < 0 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment sum by x",
      "code": "sum += x ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set vis [ x ] = 1",
      "code": "vis [ x ] = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read b",
      "code": "cin >> b ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to b exclusive",
      "code": "for ( int i = 0 ; i < b ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read y",
      "code": "cin >> y ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if vis [ i ] < 0",
      "code": "if ( vis [ y ] < 0 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increment sum by y",
      "code": "sum += y ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "set vis [ y ] to 1",
      "code": "vis [ y ] = 1 ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if sum = n * ( n + 1 ) / 2",
      "code": "if ( sum == n * ( n + 1 ) / 2 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print \" I become the guy . \" and -",
      "code": "cout << \" I become the guy. \"",
      "indent": 2
    },
    {
      "line": 22,
      "text": "new line",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print \" Oh , my keyboard \" and -",
      "code": "cout << \" Oh, my keyboard! \"",
      "indent": 2
    },
    {
      "line": 26,
      "text": "new line",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "cout << \" I become << \" \" ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "cout << \" Oh \" << my << \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "‘my’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "vis = - 1 ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [101]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < a ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "gets ( y ) ;"
      ],
      "err_line": 14,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "cout << \" I become -> \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "cout << \" Oh \" << \" \\n \" ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "cout << endl ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "if ( vis [ i ] < 0 )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        15,
        21
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "if ( vis [ i ] < 0 )",
        "cout << \" I become << \" \" ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        15,
        21,
        25
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "if ( vis [ i ] < 0 )",
        "cout << \" I become << \" \" ;",
        "cout << \" Oh \" << my << \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        15,
        21,
        22
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "if ( vis [ i ] < 0 )",
        "cout << \" I become << \" \" ;",
        "cout << endl ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        15,
        21,
        13
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "if ( vis [ i ] < 0 )",
        "cout << \" I become << \" \" ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        15,
        25
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "if ( vis [ i ] < 0 )",
        "cout << \" Oh \" << my << \" \\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        15,
        25,
        22
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "if ( vis [ i ] < 0 )",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "cout << endl ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        15,
        25,
        13
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "if ( vis [ i ] < 0 )",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        15,
        22
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "if ( vis [ i ] < 0 )",
        "cout << endl ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        15,
        22,
        13
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "if ( vis [ i ] < 0 )",
        "cout << endl ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        15,
        13
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "if ( vis [ i ] < 0 )",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        21
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "cout << \" I become << \" \" ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        21,
        25
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "cout << \" I become << \" \" ;",
        "cout << \" Oh \" << my << \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        21,
        25,
        22
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "cout << \" I become << \" \" ;",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "cout << endl ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        21,
        25,
        13
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "cout << \" I become << \" \" ;",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        21,
        22
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "cout << \" I become << \" \" ;",
        "cout << endl ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        21,
        22,
        13
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "cout << \" I become << \" \" ;",
        "cout << endl ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        21,
        13
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "cout << \" I become << \" \" ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        25
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "cout << \" Oh \" << my << \" \\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        25,
        22
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "cout << endl ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        25,
        22,
        13
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "cout << endl ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        25,
        13
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        22
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "cout << endl ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        22,
        13
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "cout << endl ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "memset ( vis , - 1 ) ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        15,
        21
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "cout << \" I become << \" \" ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        15,
        21,
        25
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "cout << \" I become << \" \" ;",
        "cout << \" Oh \" << my << \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        15,
        21,
        25,
        22
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "cout << \" I become << \" \" ;",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "cout << endl ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        15,
        21,
        25,
        13
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "cout << \" I become << \" \" ;",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        15,
        21,
        22
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "cout << \" I become << \" \" ;",
        "cout << endl ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        15,
        21,
        22,
        13
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "cout << \" I become << \" \" ;",
        "cout << endl ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        15,
        21,
        13
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "cout << \" I become << \" \" ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        15,
        25
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "cout << \" Oh \" << my << \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "‘my’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        25,
        22
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        15,
        25,
        22,
        13
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "cout << endl ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        25,
        13
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        22
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        15,
        22,
        13
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "cout << endl ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "if ( vis [ i ] < 0 )",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        25
      ],
      "mod_code": [
        "cout << \" I become << \" \" ;",
        "cout << \" Oh \" << my << \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        21,
        25,
        22
      ],
      "mod_code": [
        "cout << \" I become << \" \" ;",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "cout << endl ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        21,
        25,
        22,
        13
      ],
      "mod_code": [
        "cout << \" I become << \" \" ;",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "cout << endl ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        21,
        25,
        13
      ],
      "mod_code": [
        "cout << \" I become << \" \" ;",
        "cout << \" Oh \" << my << \" \\n \" ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        21,
        22
      ],
      "mod_code": [
        "cout << \" I become << \" \" ;",
        "cout << endl ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        21,
        22,
        13
      ],
      "mod_code": [
        "cout << \" I become << \" \" ;",
        "cout << endl ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        21,
        13
      ],
      "mod_code": [
        "cout << \" I become << \" \" ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        25,
        22
      ],
      "mod_code": [
        "cout << \" Oh \" << my << \" \\n \" ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        25,
        22,
        13
      ],
      "mod_code": [
        "cout << \" Oh \" << my << \" \\n \" ;",
        "cout << endl ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        25,
        13
      ],
      "mod_code": [
        "cout << \" Oh \" << my << \" \\n \" ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        13
      ],
      "mod_code": [
        "cout << endl ;",
        "for ( i = 0 ; i < b ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}