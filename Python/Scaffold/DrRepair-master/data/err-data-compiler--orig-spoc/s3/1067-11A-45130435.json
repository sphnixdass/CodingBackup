{
  "meta": {
    "index": 1067,
    "hitid": "3MIVREZQVHSVCOBHCVJ9PITTB3HKQL",
    "workerid": "A1APYLD4DUK33J",
    "probid": "11A",
    "subid": "45130435"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , d",
      "code": "int n , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n read d",
      "code": "cin >> n >> d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer prev",
      "code": "int prev ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer count with count = 0",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create integer b",
      "code": "int b ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "read b",
      "code": "cin >> b ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if i is greater than 0",
      "code": "if ( i > 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if b is less than prev",
      "code": "if ( b < prev )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "create integer mult with mult = ( prev - b ) / d + ( 1 if prev - b % d is true , else 0 )",
      "code": "int mult = ( prev - b ) / d + ( ( ( prev - b ) % d ) ? 1 : 0 ) ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "if b * d * mult is prev , increment mult",
      "code": "if ( b + d * mult == prev ) mult ++ ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "increment count by mult",
      "code": "count += mult ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "set prev to b + mult * d",
      "code": "prev = b + mult * d ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else if b is prev",
      "code": "else if ( b == prev )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "increment prev by d",
      "code": "prev += d ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 18,
      "text": "set prev to b",
      "code": "prev = b ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "set prev to b",
      "code": "prev = b ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print count print newline",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n >> d )"
      ],
      "err_line": 9,
      "err_msg": "‘prev’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        17
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        17,
        8
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "do",
        "if ( i >= 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        17,
        8,
        21
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "do",
        "if ( i >= 0 )",
        "int prev = b ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        17,
        8,
        20
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "do",
        "if ( i >= 0 )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        17,
        8,
        14
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "do",
        "if ( i >= 0 )",
        "else if ( prev == prev )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        17,
        21
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "do",
        "int prev = b ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        17,
        21,
        20
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "do",
        "int prev = b ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        17,
        21,
        14
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "do",
        "int prev = b ;",
        "else if ( prev == prev )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        17,
        20
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        17,
        20,
        14
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "do",
        "do",
        "else if ( prev == prev )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        17,
        14
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "do",
        "else if ( prev == prev )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "if ( i >= 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        8,
        21
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "if ( i >= 0 )",
        "int prev = b ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        8,
        21,
        20
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "if ( i >= 0 )",
        "int prev = b ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        8,
        21,
        14
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "if ( i >= 0 )",
        "int prev = b ;",
        "else if ( prev == prev )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        8,
        20
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "if ( i >= 0 )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        8,
        20,
        14
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "if ( i >= 0 )",
        "do",
        "else if ( prev == prev )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        8,
        14
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "if ( i >= 0 )",
        "else if ( prev == prev )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        21
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "int prev = b ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        21,
        20
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "int prev = b ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        21,
        20,
        14
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "int prev = b ;",
        "do",
        "else if ( prev == prev )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        21,
        14
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "int prev = b ;",
        "else if ( prev == prev )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        20
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        20,
        14
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "do",
        "else if ( prev == prev )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "int mult = ( prev - b ) / d + ( prev - b % d ) : 0 ;",
        "else if ( prev == prev )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "do",
        "if ( i >= 0 )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        8,
        21
      ],
      "mod_code": [
        "do",
        "if ( i >= 0 )",
        "int prev = b ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        8,
        21,
        20
      ],
      "mod_code": [
        "do",
        "if ( i >= 0 )",
        "int prev = b ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        8,
        21,
        14
      ],
      "mod_code": [
        "do",
        "if ( i >= 0 )",
        "int prev = b ;",
        "else if ( prev == prev )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        8,
        20
      ],
      "mod_code": [
        "do",
        "if ( i >= 0 )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        8,
        20,
        14
      ],
      "mod_code": [
        "do",
        "if ( i >= 0 )",
        "do",
        "else if ( prev == prev )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        8,
        14
      ],
      "mod_code": [
        "do",
        "if ( i >= 0 )",
        "else if ( prev == prev )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        21
      ],
      "mod_code": [
        "do",
        "int prev = b ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        21,
        20
      ],
      "mod_code": [
        "do",
        "int prev = b ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        21,
        20,
        14
      ],
      "mod_code": [
        "do",
        "int prev = b ;",
        "do",
        "else if ( prev == prev )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        21,
        14
      ],
      "mod_code": [
        "do",
        "int prev = b ;",
        "else if ( prev == prev )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        20
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        20,
        14
      ],
      "mod_code": [
        "do",
        "do",
        "else if ( prev == prev )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        14
      ],
      "mod_code": [
        "do",
        "else if ( prev == prev )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        21,
        20
      ],
      "mod_code": [
        "if ( i >= 0 )",
        "int prev = b ;",
        "do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        21,
        20,
        14
      ],
      "mod_code": [
        "if ( i >= 0 )",
        "int prev = b ;",
        "do",
        "else if ( prev == prev )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        20
      ],
      "mod_code": [
        "if ( i >= 0 )",
        "do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        20,
        14
      ],
      "mod_code": [
        "if ( i >= 0 )",
        "do",
        "else if ( prev == prev )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        20
      ],
      "mod_code": [
        "int prev = b ;",
        "do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        20,
        14
      ],
      "mod_code": [
        "int prev = b ;",
        "do",
        "else if ( prev == prev )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        14
      ],
      "mod_code": [
        "do",
        "else if ( prev == prev )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}