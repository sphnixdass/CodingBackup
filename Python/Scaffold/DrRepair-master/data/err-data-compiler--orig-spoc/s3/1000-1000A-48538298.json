{
  "meta": {
    "index": 1000,
    "hitid": "3FHTJGYT8NU5AQEJMRJ5RLBQ0STPGG",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "1000A",
    "subid": "48538298"
  },
  "lines": [
    {
      "line": 0,
      "text": "N = constant long long = 1110",
      "code": "const long long N = 1110 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "Q = constant long long = 2e18",
      "code": "const long long Q = 2e18 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "mod = constant long long = 1e9 + 7",
      "code": "const long long mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "magic = constant long long = 30",
      "code": "const long long MAGIC = 30 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "d1 = integer array of size 200 and width 200",
      "code": "int d1 [ 200 ] [ 200 ] ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "d2 = integer array of size 200 and width 200",
      "code": "int d2 [ 200 ] [ 200 ] ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "in function solve that returns nothing",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "s = string",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increase d1 [ size of s ] [ s [ size of s - 1 ] by 1",
      "code": "d1 [ s . size ( ) ] [ s [ s . size ( ) - 1 ] ] ++ ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "s = string",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increase d2 [ size of s ] [ s [ size of s - 1 ] by 1",
      "code": "d2 [ s . size ( ) ] [ s [ s . size ( ) - 1 ] ] ++ ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "cnt = integer = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for i = 0 to 200 exclusive",
      "code": "for ( int i = 0 ; i < 200 ; i ++ )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for j = 0 to 200 exclusive , then cnt = cnt + the bigger value between 0 and d2 [ i ] [ j ] - d1 [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 200 ; j ++ ) { cnt += max ( 0 , d2 [ i ] [ j ] - d1 [ i ] [ j ] ) ; }",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print cnt",
      "code": "cout << cnt << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 25,
      "text": "mtest = boolean = false",
      "code": "bool mtest = false ;",
      "indent": 0
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 27,
      "text": "TE = integer = 1",
      "code": "int TE = 1 ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if mtest if trie , then read TE",
      "code": "if ( mtest ) cin >> TE ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "while looping decrease TE by 1 , call solve",
      "code": "while ( TE -- ) solve ( ) ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "if ( cin >> trie ) cin >> TE ;"
      ],
      "err_line": 28,
      "err_msg": "‘trie’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "const long long const magic = 30 ;"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int d1 [ 200 ] width 200 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "long long d2 [ 200 ] [ 200 ] ;"
      ],
      "err_line": 21,
      "err_msg": "no matching function for call to ‘max(int, long long int)’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "void solve ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const long long int’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 12,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 17,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( i = 0 ; i < 200 ; i ++ )"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 28,
      "err_msg": "‘trie’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        17,
        28
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "if ( cin >> trie ) cin >> TE ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        17,
        28,
        5
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "if ( cin >> trie ) cin >> TE ;",
        "int d1 [ 200 ] width 200 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        12,
        17,
        28,
        11
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "if ( cin >> trie ) cin >> TE ;",
        "s >> s ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        17,
        5
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "int d1 [ 200 ] width 200 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        12,
        17,
        5,
        11
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "int d1 [ 200 ] width 200 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        12,
        17,
        5,
        28
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "int d1 [ 200 ] width 200 ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        12,
        17,
        11
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        17,
        11,
        28
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "s >> s ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        17,
        28
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        28
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "if ( cin >> trie ) cin >> TE ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        28,
        5
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "if ( cin >> trie ) cin >> TE ;",
        "int d1 [ 200 ] width 200 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        12,
        28,
        5,
        11
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "if ( cin >> trie ) cin >> TE ;",
        "int d1 [ 200 ] width 200 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        12,
        28,
        11
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "if ( cin >> trie ) cin >> TE ;",
        "s >> s ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "int d1 [ 200 ] width 200 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        12,
        5,
        11
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "int d1 [ 200 ] width 200 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        12,
        5,
        11,
        28
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "int d1 [ 200 ] width 200 ;",
        "s >> s ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        12,
        5,
        28
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "int d1 [ 200 ] width 200 ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        11,
        28
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "s >> s ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        28
      ],
      "mod_code": [
        "d1 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ] ++ ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        28
      ],
      "mod_code": [
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "if ( cin >> trie ) cin >> TE ;"
      ],
      "err_line": 28,
      "err_msg": "‘trie’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        28,
        5
      ],
      "mod_code": [
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "if ( cin >> trie ) cin >> TE ;",
        "int d1 [ 200 ] width 200 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        17,
        28,
        5,
        11
      ],
      "mod_code": [
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "if ( cin >> trie ) cin >> TE ;",
        "int d1 [ 200 ] width 200 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        17,
        28,
        11
      ],
      "mod_code": [
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "if ( cin >> trie ) cin >> TE ;",
        "s >> s ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        5
      ],
      "mod_code": [
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "int d1 [ 200 ] width 200 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        17,
        5,
        11
      ],
      "mod_code": [
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "int d1 [ 200 ] width 200 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        17,
        5,
        11,
        28
      ],
      "mod_code": [
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "int d1 [ 200 ] width 200 ;",
        "s >> s ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        17,
        5,
        28
      ],
      "mod_code": [
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "int d1 [ 200 ] width 200 ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        17,
        11
      ],
      "mod_code": [
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        11,
        28
      ],
      "mod_code": [
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "s >> s ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        28
      ],
      "mod_code": [
        "d2 [ s . size ( ) ] [ s . size ( ) - 1 ] ++ ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 28,
      "err_msg": "‘trie’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        5
      ],
      "mod_code": [
        "if ( cin >> trie ) cin >> TE ;",
        "int d1 [ 200 ] width 200 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        28,
        5,
        11
      ],
      "mod_code": [
        "if ( cin >> trie ) cin >> TE ;",
        "int d1 [ 200 ] width 200 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        28,
        11
      ],
      "mod_code": [
        "if ( cin >> trie ) cin >> TE ;",
        "s >> s ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "int d1 [ 200 ] width 200 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        5,
        11,
        28
      ],
      "mod_code": [
        "int d1 [ 200 ] width 200 ;",
        "s >> s ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        5,
        28
      ],
      "mod_code": [
        "int d1 [ 200 ] width 200 ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘width’"
    },
    {
      "mod_line": [
        11,
        28
      ],
      "mod_code": [
        "s >> s ;",
        "if ( cin >> trie ) { cin >> TE ; }"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}