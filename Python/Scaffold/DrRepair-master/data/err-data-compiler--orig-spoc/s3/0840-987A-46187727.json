{
  "meta": {
    "index": 840,
    "hitid": "3QMELQS6Y55OPA5SN6E8KPYG7WER68",
    "workerid": "A1APYLD4DUK33J",
    "probid": "987A",
    "subid": "46187727"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , i , j",
      "code": "int n , i , j ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare string array a size 7",
      "code": "string a [ 7 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare string array x size 7",
      "code": "string x [ 7 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare string array y size 7",
      "code": "string y [ 7 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare integer array u size 7",
      "code": "int u [ 7 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare integer array b size 7",
      "code": "int b [ 7 ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare boolean t",
      "code": "bool t ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "let a [ 1 ] be \" purple \"",
      "code": "a [ 1 ] = \" purple \" ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "let y [ 1 ] be \" Power \"",
      "code": "y [ 1 ] = \" Power \" ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let a [ 2 ] be \" green \"",
      "code": "a [ 2 ] = \" green \" ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "let y [ 2 ] be \" Time \"",
      "code": "y [ 2 ] = \" Time \" ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "let a [ 3 ] be \" blue \"",
      "code": "a [ 3 ] = \" blue \" ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "let y [ 3 ] be \" Space \"",
      "code": "y [ 3 ] = \" Space \" ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "let a [ 4 ] be \" orange \"",
      "code": "a [ 4 ] = \" orange \" ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "let y [ 4 ] be \" Soul \"",
      "code": "y [ 4 ] = \" Soul \" ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "let a [ 5 ] be \" red \"",
      "code": "a [ 5 ] = \" red \" ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "let y [ 5 ] be \" Reality \"",
      "code": "y [ 5 ] = \" Reality \" ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "let a [ 6 ] be \" yellow \"",
      "code": "a [ 6 ] = \" yellow \" ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "let y [ 6 ] be \" Mind \"",
      "code": "y [ 6 ] = \" Mind \" ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for i = 1 to n inclusive , read x [ i ]",
      "code": "for ( i = 1 ; i <= n ; i ++ ) { cin >> x [ i ] ; }",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print 6 - n and newline",
      "code": "cout << 6 - n << endl ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "for j = 1 to 6 inclusive",
      "code": "for ( j = 1 ; j <= 6 ; j ++ )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if x [ i ] is a [ j ] , let b [ i ] be j",
      "code": "if ( x [ i ] == a [ j ] ) { b [ i ] = j ; }",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for i = 1 to 6 inclusive",
      "code": "for ( i = 1 ; i <= 6 ; i ++ )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "let t be true",
      "code": "t = true ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "for j = 1 to 6 inclusive",
      "code": "for ( j = 1 ; j <= 6 ; j ++ )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "if b [ j ] is i , let t be false",
      "code": "if ( b [ j ] == i ) { t = false ; }",
      "indent": 3
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 33,
      "text": "if t is true , print y [ i ] and newline",
      "code": "if ( t ) { cout << y [ i ] << endl ; }",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int a [ 7 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "bool t )"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 8,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "a [ 5 ] /= \" red \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        9,
        16,
        14,
        17
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "y [ 4 ] = \" \\0 \" ;",
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        9,
        16,
        14,
        13
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "y [ 4 ] = \" \\0 \" ;",
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        16,
        17
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "y [ 4 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        9,
        16,
        17,
        12
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "y [ 4 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "y [ 2 ] = \" 0\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        9,
        16,
        17,
        13
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "y [ 4 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        16,
        12,
        13
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "y [ 4 ] = \" \\0 \" ;",
        "y [ 2 ] = \" 0\\n \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        16,
        13
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "y [ 4 ] = \" \\0 \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        14,
        17
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        9,
        14,
        17,
        12
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "y [ 2 ] = \" 0\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        9,
        14,
        17,
        13
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        14,
        12,
        13
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "y [ 3 ] = \" \\0 \" ;",
        "y [ 2 ] = \" 0\\n \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        14,
        13
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        9,
        17,
        12
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "y [ 2 ] = \" 0\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        9,
        17,
        12,
        13
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "y [ 2 ] = \" 0\\n \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        17,
        13
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        12,
        13
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "y [ 2 ] = \" 0\\n \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "a [ 1 ] = \" \\0 \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        14,
        17
      ],
      "mod_code": [
        "y [ 4 ] = \" \\0 \" ;",
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        16,
        14,
        17,
        12
      ],
      "mod_code": [
        "y [ 4 ] = \" \\0 \" ;",
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "y [ 2 ] = \" 0\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        16,
        14,
        17,
        13
      ],
      "mod_code": [
        "y [ 4 ] = \" \\0 \" ;",
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        14,
        12,
        13
      ],
      "mod_code": [
        "y [ 4 ] = \" \\0 \" ;",
        "y [ 3 ] = \" \\0 \" ;",
        "y [ 2 ] = \" 0\\n \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        14,
        13
      ],
      "mod_code": [
        "y [ 4 ] = \" \\0 \" ;",
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "y [ 4 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        16,
        17,
        12
      ],
      "mod_code": [
        "y [ 4 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "y [ 2 ] = \" 0\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        16,
        17,
        12,
        13
      ],
      "mod_code": [
        "y [ 4 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "y [ 2 ] = \" 0\\n \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        17,
        13
      ],
      "mod_code": [
        "y [ 4 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        12,
        13
      ],
      "mod_code": [
        "y [ 4 ] = \" \\0 \" ;",
        "y [ 2 ] = \" 0\\n \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        13
      ],
      "mod_code": [
        "y [ 4 ] = \" \\0 \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        14,
        17
      ],
      "mod_code": [
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        14,
        17,
        12
      ],
      "mod_code": [
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "y [ 2 ] = \" 0\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        14,
        17,
        12,
        13
      ],
      "mod_code": [
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "y [ 2 ] = \" 0\\n \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        14,
        17,
        13
      ],
      "mod_code": [
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 5 ] /= \" red \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        14,
        12,
        13
      ],
      "mod_code": [
        "y [ 3 ] = \" \\0 \" ;",
        "y [ 2 ] = \" 0\\n \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        14,
        13
      ],
      "mod_code": [
        "y [ 3 ] = \" \\0 \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        17,
        12
      ],
      "mod_code": [
        "a [ 5 ] /= \" red \" ;",
        "y [ 2 ] = \" 0\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator/=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [4]’)"
    },
    {
      "mod_line": [
        17,
        12,
        13
      ],
      "mod_code": [
        "a [ 5 ] /= \" red \" ;",
        "y [ 2 ] = \" 0\\n \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        17,
        13
      ],
      "mod_code": [
        "a [ 5 ] /= \" red \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "y [ 2 ] = \" 0\\n \" ;",
        "a [ 3 ] = ' blue \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    }
  ]
}