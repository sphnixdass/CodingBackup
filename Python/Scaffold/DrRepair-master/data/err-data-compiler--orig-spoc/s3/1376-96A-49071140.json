{
  "meta": {
    "index": 1376,
    "hitid": "3O71U79SRBJ2FSQXPBLUZV0YIBDMSR",
    "workerid": "AIWEXPJAU66D9",
    "probid": "96A",
    "subid": "49071140"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let i , j , k , l , m , n , o , p , counta , flag and counta2 be integers , with counta , counta2 and flag = 0",
      "code": "int i , j , k , l , m , n , o , p , counta = 0 , flag = 0 , counta2 = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "arr is an array of characters with size 100",
      "code": "char arr [ 100 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read arr",
      "code": "cin >> arr ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "l = strlen of arr",
      "code": "l = strlen ( arr ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to l exclusive",
      "code": "for ( i = 0 ; i < l ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if arr [ i ] = ' 1 '",
      "code": "if ( arr [ i ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set value of counta2 to 0",
      "code": "counta2 = 0 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "increment counta",
      "code": "counta ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if counta > = 7",
      "code": "if ( counta >= 7 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "assign value of 1 to flag",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set counta to 0",
      "code": "counta = 0 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "increment counta2",
      "code": "counta2 ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if counta2 > = 7",
      "code": "if ( counta2 >= 7 )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "flag = 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if flag = 0 , print \" NO \" and a new line",
      "code": "if ( flag == 0 ) { cout << \" NO \" << endl ; }",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int i , j , k , l , m , o , p , counta , counta , counta , flag = 0 , counta2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int counta’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "getline ( cin , arr ) ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int l = strlen ( arr ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "* counta2 = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        3
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "cout << \" YES \" << endl << endl ;",
        "getline ( cin , arr ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        3,
        14
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "cout << \" YES \" << endl << endl ;",
        "getline ( cin , arr ) ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        3,
        18
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "cout << \" YES \" << endl << endl ;",
        "getline ( cin , arr ) ;",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        3,
        7
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "cout << \" YES \" << endl << endl ;",
        "getline ( cin , arr ) ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        14
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "cout << \" YES \" << endl << endl ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        14,
        18
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "cout << \" YES \" << endl << endl ;",
        "do",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        14,
        7
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "cout << \" YES \" << endl << endl ;",
        "do",
        "* counta2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        18
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "cout << \" YES \" << endl << endl ;",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        18,
        7
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "cout << \" YES \" << endl << endl ;",
        "cout << \" YES \" << endl << endl ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        7
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "cout << \" YES \" << endl << endl ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "getline ( cin , arr ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        3,
        14
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "getline ( cin , arr ) ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        18
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "getline ( cin , arr ) ;",
        "do",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        7
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "getline ( cin , arr ) ;",
        "do",
        "* counta2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        3,
        18
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "getline ( cin , arr ) ;",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        3,
        18,
        7
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "getline ( cin , arr ) ;",
        "cout << \" YES \" << endl << endl ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "getline ( cin , arr ) ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        14,
        18
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "do",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        14,
        18,
        7
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "do",
        "cout << \" YES \" << endl << endl ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        14,
        7
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "do",
        "* counta2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        18,
        7
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "cout << \" YES \" << endl << endl ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int i , j , k , l , m , n , p , p , counta , counta , flag = 0 , counta2 = 0 ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "getline ( cin , arr ) ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        10,
        3,
        14
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "getline ( cin , arr ) ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        10,
        3,
        14,
        18
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "getline ( cin , arr ) ;",
        "do",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        10,
        3,
        14,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "getline ( cin , arr ) ;",
        "do",
        "* counta2 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        10,
        3,
        18
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "getline ( cin , arr ) ;",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        10,
        3,
        18,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "getline ( cin , arr ) ;",
        "cout << \" YES \" << endl << endl ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        10,
        3,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "getline ( cin , arr ) ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        14,
        18
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "do",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        14,
        18,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "do",
        "cout << \" YES \" << endl << endl ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        14,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "do",
        "* counta2 = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        18,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "cout << \" YES \" << endl << endl ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "getline ( cin , arr ) ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        3,
        14,
        18
      ],
      "mod_code": [
        "getline ( cin , arr ) ;",
        "do",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        3,
        14,
        18,
        7
      ],
      "mod_code": [
        "getline ( cin , arr ) ;",
        "do",
        "cout << \" YES \" << endl << endl ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        3,
        14,
        7
      ],
      "mod_code": [
        "getline ( cin , arr ) ;",
        "do",
        "* counta2 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "getline ( cin , arr ) ;",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        3,
        18,
        7
      ],
      "mod_code": [
        "getline ( cin , arr ) ;",
        "cout << \" YES \" << endl << endl ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "getline ( cin , arr ) ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [100])’"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "do",
        "cout << \" YES \" << endl << endl ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18,
        7
      ],
      "mod_code": [
        "do",
        "cout << \" YES \" << endl << endl ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14,
        7
      ],
      "mod_code": [
        "do",
        "* counta2 = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        18,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl << endl ;",
        "* counta2 = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}