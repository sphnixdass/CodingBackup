{
  "meta": {
    "index": 2369,
    "hitid": "3SR6AEG6W5NDJ01VXKX6PCG3IACYHA",
    "workerid": "A1AYVATMT88U1W",
    "probid": "1004A",
    "subid": "48437698"
  },
  "lines": [
    {
      "line": 0,
      "text": "let INF be a constant integer with value INF is equal to 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let PI be a constant double with value PI is equal to arc cosine of ( - 1 . 0 )",
      "code": "const double PI = acos ( - 1.0 ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let n , d be integers",
      "code": "int n , d ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n and d",
      "code": "cin >> n >> d ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let N be a constant integer with value as N is equal to 1e2 + 5",
      "code": "const int N = 1e2 + 5 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "v = array of integers of length N",
      "code": "int v [ N ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let a be a integer",
      "code": "int a ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if ( a is less than 0 )",
      "code": "if ( a < 0 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "a is equal to absolute of ( a )",
      "code": "a = abs ( a ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "the 0th element of array v is equal to 0",
      "code": "v [ 0 ] = 0 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "the 0th element of array v is equal to a",
      "code": "v [ 0 ] = a ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "a is equal to 0",
      "code": "a = 0 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for ( i = 1 to n exclusive )",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "read the ith element of array v",
      "code": "cin >> v [ i ] ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "the ith element of array v is equal to ( the ith element of array v + a )",
      "code": "v [ i ] += a ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "let ans be a integer with value 2",
      "code": "int ans = 2 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for ( integer i = 0 to n - 1 exclusive )",
      "code": "for ( int i = 0 ; i < n - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if ( [ i + 1 ] th element of array v - ( ith element of array v + d ) is greater than d )",
      "code": "if ( v [ i + 1 ] - ( v [ i ] + d ) > d )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "the value of ans is equal to ans + 2",
      "code": "ans += 2 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "else if ( [ i + 1 ] th element of array v - ( ith element of array v + d ) is equal to d )",
      "code": "else if ( v [ i + 1 ] - ( v [ i ] + d ) == d )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "increase ans value by 1",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print ans and newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "else if ( v [ i + 1 ] == d [ i + 1 ] )"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( cin >> n >> d )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const int’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "v [ i ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "v [ i ] = a ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "cin >> v [ j ] ;"
      ],
      "err_line": 17,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "ans = 2 ;"
      ],
      "err_line": 20,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( v [ i + 1 ] > d [ i + 1 ] )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "if ( v [ i + 1 ] > v [ i + 1 ] )"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        22,
        24
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "if ( v [ i + 1 ] > v [ i + 1 ] )",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        22,
        24,
        8
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "if ( v [ i + 1 ] > v [ i + 1 ] )",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        22,
        24,
        14
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "if ( v [ i + 1 ] > v [ i + 1 ] )",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "int a = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        22,
        8
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "if ( v [ i + 1 ] > v [ i + 1 ] )",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        22,
        8,
        14
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "if ( v [ i + 1 ] > v [ i + 1 ] )",
        "cin >> N ;",
        "int a = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        22,
        14
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "if ( v [ i + 1 ] > v [ i + 1 ] )",
        "int a = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        24
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        24,
        8
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        24,
        8,
        22
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "cin >> N ;",
        "if ( v [ i + 1 ] > d [ i + 1 ] )"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        24,
        8,
        14
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "cin >> N ;",
        "int a = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        24,
        22
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "if ( v [ i + 1 ] > d [ i + 1 ] )"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        24,
        22,
        14
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "if ( v [ i + 1 ] > d [ i + 1 ] )",
        "int a = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        24,
        14
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "int a = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "cin >> N ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        8,
        22
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "cin >> N ;",
        "if ( v [ i + 1 ] > d [ i + 1 ] )"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        8,
        22,
        14
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "cin >> N ;",
        "if ( v [ i + 1 ] > d [ i + 1 ] )",
        "int a = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        8,
        14
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "cin >> N ;",
        "int a = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "if ( v [ i + 1 ] > d [ i + 1 ] )"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        22,
        14
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "if ( v [ i + 1 ] > d [ i + 1 ] )",
        "int a = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "const int INF = INF = 0x3f3f3f3f ;",
        "int a = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        22,
        24
      ],
      "mod_code": [
        "if ( v [ i + 1 ] > v [ i + 1 ] )",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        22,
        24,
        8
      ],
      "mod_code": [
        "if ( v [ i + 1 ] > v [ i + 1 ] )",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "cin >> N ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const int’)"
    },
    {
      "mod_line": [
        22,
        24,
        8,
        14
      ],
      "mod_code": [
        "if ( v [ i + 1 ] > v [ i + 1 ] )",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "cin >> N ;",
        "int a = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const int’)"
    },
    {
      "mod_line": [
        22,
        24,
        14
      ],
      "mod_code": [
        "if ( v [ i + 1 ] > v [ i + 1 ] )",
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "int a = 0 ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        22,
        8
      ],
      "mod_code": [
        "if ( v [ i + 1 ] > v [ i + 1 ] )",
        "cin >> N ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const int’)"
    },
    {
      "mod_line": [
        22,
        8,
        14
      ],
      "mod_code": [
        "if ( v [ i + 1 ] > v [ i + 1 ] )",
        "cin >> N ;",
        "int a = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const int’)"
    },
    {
      "mod_line": [
        24,
        8
      ],
      "mod_code": [
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "cin >> N ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const int’)"
    },
    {
      "mod_line": [
        24,
        8,
        22
      ],
      "mod_code": [
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "cin >> N ;",
        "if ( v [ i + 1 ] > d [ i + 1 ] )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const int’)"
    },
    {
      "mod_line": [
        24,
        8,
        22,
        14
      ],
      "mod_code": [
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "cin >> N ;",
        "if ( v [ i + 1 ] > d [ i + 1 ] )",
        "int a = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const int’)"
    },
    {
      "mod_line": [
        24,
        8,
        14
      ],
      "mod_code": [
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "cin >> N ;",
        "int a = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const int’)"
    },
    {
      "mod_line": [
        24,
        22
      ],
      "mod_code": [
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "if ( v [ i + 1 ] > d [ i + 1 ] )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        22,
        14
      ],
      "mod_code": [
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "if ( v [ i + 1 ] > d [ i + 1 ] )",
        "int a = 0 ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        14
      ],
      "mod_code": [
        "else if ( v [ i + 1 ] == d [ i + 1 ] )",
        "int a = 0 ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        22
      ],
      "mod_code": [
        "cin >> N ;",
        "if ( v [ i + 1 ] > d [ i + 1 ] )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const int’)"
    },
    {
      "mod_line": [
        8,
        22,
        14
      ],
      "mod_code": [
        "cin >> N ;",
        "if ( v [ i + 1 ] > d [ i + 1 ] )",
        "int a = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const int’)"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "cin >> N ;",
        "int a = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const int’)"
    },
    {
      "mod_line": [
        22,
        14
      ],
      "mod_code": [
        "if ( v [ i + 1 ] > d [ i + 1 ] )",
        "int a = 0 ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}