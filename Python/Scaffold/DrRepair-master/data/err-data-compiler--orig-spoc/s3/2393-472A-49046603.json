{
  "meta": {
    "index": 2393,
    "hitid": "3GKAWYFRAPN2Y64SK1IXL08TMDDPDV",
    "workerid": "A1AYVATMT88U1W",
    "probid": "472A",
    "subid": "49046603"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n is a long integer",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "vector boolean p",
      "code": "vector < bool > p ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "do p . resize ( n + 10 )",
      "code": "p . resize ( n + 10 ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 upto n inclusive",
      "code": "for ( int i = 0 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if remainder of i is 0 when divided by 2",
      "code": "if ( i % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "i ' th value of p is false",
      "code": "p [ i ] = false ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "i th value of p is true",
      "code": "p [ i ] = true ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "0th value of p is equal to 1st value of p is equal to 0",
      "code": "p [ 0 ] = p [ 1 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "2nd value of p is 1",
      "code": "p [ 2 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for ( int i is equal to 3 , i * i < = n , i + = 2 )",
      "code": "for ( int i = 3 ; i * i <= n ; i += 2 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if ( not equals to ith element of p ) continue",
      "code": "if ( ! p [ i ] ) continue ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for ( int j = i * i ; j < = n ; j + = i + i ) , jth element of p is equal to 0",
      "code": "for ( int j = i * i ; j <= n ; j += i + i ) p [ j ] = 0 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "initialize long integer a to 2",
      "code": "long long a = 2 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "decrease value of n by 2",
      "code": "n -= 2 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "while p [ a ] or p [ n ] is true",
      "code": "while ( p [ a ] || p [ n ] )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "increase a by 1",
      "code": "a ++ ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "decrease n by 1",
      "code": "n -- ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print a , space and n and new line",
      "code": "cout << a << \" \" << n << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool p ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "p = false ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "p = true ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "p = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘int’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( remainder % 2 == 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘double(double, double) throw ()’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "p = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘int’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "p = * 1 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( ! p . element ( ) ) continue ;"
      ],
      "err_line": 14,
      "err_msg": "‘class std::vector<bool>’ has no member named ‘element’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        9
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p = true ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        11
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p = true ;",
        "p . 0th ( p , 0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        12
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p = true ;",
        "p = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        13
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p = true ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p = true ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p = true ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        11
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p . 0th ( p , 0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        7,
        11,
        12
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        7,
        11,
        13
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        7,
        11,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        7,
        11,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        7,
        12
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        12,
        13
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        12,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        12,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "p = 1 ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        13
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        13,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        13,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        14,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        7,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = false ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        9,
        11
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "p . 0th ( p , 0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        12
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        13
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        9,
        12
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "p = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        9,
        12,
        13
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        9,
        12,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        9,
        12,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "p = 1 ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        9,
        13
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        9,
        13,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        9,
        13,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        9,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        9,
        14,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        9,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = true ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "bool p ;",
        "p . 0th ( p , 0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        11,
        12
      ],
      "mod_code": [
        "bool p ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        11,
        12,
        13
      ],
      "mod_code": [
        "bool p ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        11,
        12,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        11,
        12,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        11,
        13
      ],
      "mod_code": [
        "bool p ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        11,
        13,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        11,
        13,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        11,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p . 0th ( p , 0 ) ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        11,
        14,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p . 0th ( p , 0 ) ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        11,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "bool p ;",
        "p = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        12,
        13
      ],
      "mod_code": [
        "bool p ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        12,
        13,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        12,
        13,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        12,
        14
      ],
      "mod_code": [
        "bool p ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        12,
        14,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        12,
        15
      ],
      "mod_code": [
        "bool p ;",
        "p = 1 ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "bool p ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        13,
        14
      ],
      "mod_code": [
        "bool p ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        13,
        14,
        15
      ],
      "mod_code": [
        "bool p ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        13,
        15
      ],
      "mod_code": [
        "bool p ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "bool p ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        14,
        15
      ],
      "mod_code": [
        "bool p ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "bool p ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘resize’ in ‘p’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        9,
        11
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "p . 0th ( p , 0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        12
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        13
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        14
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        15
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        9,
        12
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "p = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        9,
        12,
        13
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        9,
        12,
        14
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        9,
        12,
        15
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "p = 1 ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        9,
        13
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        9,
        13,
        14
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        9,
        13,
        15
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        9,
        14
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        9,
        14,
        15
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        9,
        15
      ],
      "mod_code": [
        "p = false ;",
        "p = true ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "p = false ;",
        "p . 0th ( p , 0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        11,
        12
      ],
      "mod_code": [
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        11,
        12,
        13
      ],
      "mod_code": [
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        11,
        12,
        14
      ],
      "mod_code": [
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        11,
        12,
        15
      ],
      "mod_code": [
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        11,
        13
      ],
      "mod_code": [
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        11,
        13,
        14
      ],
      "mod_code": [
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        11,
        13,
        15
      ],
      "mod_code": [
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        11,
        14
      ],
      "mod_code": [
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        11,
        14,
        15
      ],
      "mod_code": [
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        11,
        15
      ],
      "mod_code": [
        "p = false ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "p = false ;",
        "p = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        12,
        13
      ],
      "mod_code": [
        "p = false ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        12,
        13,
        14
      ],
      "mod_code": [
        "p = false ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        12,
        13,
        15
      ],
      "mod_code": [
        "p = false ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        12,
        14
      ],
      "mod_code": [
        "p = false ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        12,
        14,
        15
      ],
      "mod_code": [
        "p = false ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        12,
        15
      ],
      "mod_code": [
        "p = false ;",
        "p = 1 ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "p = false ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        13,
        14
      ],
      "mod_code": [
        "p = false ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        13,
        14,
        15
      ],
      "mod_code": [
        "p = false ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        13,
        15
      ],
      "mod_code": [
        "p = false ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "p = false ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        14,
        15
      ],
      "mod_code": [
        "p = false ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "p = false ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "p = true ;",
        "p . 0th ( p , 0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        9,
        11,
        12
      ],
      "mod_code": [
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        9,
        11,
        12,
        13
      ],
      "mod_code": [
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        9,
        11,
        12,
        14
      ],
      "mod_code": [
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        9,
        11,
        12,
        15
      ],
      "mod_code": [
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        9,
        11,
        13
      ],
      "mod_code": [
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        9,
        11,
        13,
        14
      ],
      "mod_code": [
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        9,
        11,
        13,
        15
      ],
      "mod_code": [
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        9,
        11,
        14
      ],
      "mod_code": [
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        9,
        11,
        14,
        15
      ],
      "mod_code": [
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        9,
        11,
        15
      ],
      "mod_code": [
        "p = true ;",
        "p . 0th ( p , 0 ) ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "p = true ;",
        "p = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        12,
        13
      ],
      "mod_code": [
        "p = true ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        12,
        13,
        14
      ],
      "mod_code": [
        "p = true ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        12,
        13,
        15
      ],
      "mod_code": [
        "p = true ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        12,
        14
      ],
      "mod_code": [
        "p = true ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        12,
        14,
        15
      ],
      "mod_code": [
        "p = true ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        12,
        15
      ],
      "mod_code": [
        "p = true ;",
        "p = 1 ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "p = true ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        13,
        14
      ],
      "mod_code": [
        "p = true ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        13,
        14,
        15
      ],
      "mod_code": [
        "p = true ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        13,
        15
      ],
      "mod_code": [
        "p = true ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "p = true ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        14,
        15
      ],
      "mod_code": [
        "p = true ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "p = true ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘bool’)"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        11,
        12,
        13
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        11,
        12,
        13,
        14
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        11,
        12,
        13,
        15
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        11,
        12,
        14
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        11,
        12,
        14,
        15
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        11,
        12,
        15
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "p = 1 ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        11,
        13,
        14
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        11,
        13,
        14,
        15
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        11,
        13,
        15
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        11,
        14,
        15
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "p . 0th ( p , 0 ) ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid suffix \"th\" on integer constant"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘int’)"
    },
    {
      "mod_line": [
        12,
        13,
        14
      ],
      "mod_code": [
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘int’)"
    },
    {
      "mod_line": [
        12,
        13,
        14,
        15
      ],
      "mod_code": [
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘int’)"
    },
    {
      "mod_line": [
        12,
        13,
        15
      ],
      "mod_code": [
        "p = 1 ;",
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘int’)"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘int’)"
    },
    {
      "mod_line": [
        12,
        14,
        15
      ],
      "mod_code": [
        "p = 1 ;",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘int’)"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "p = 1 ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<bool>’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;"
      ],
      "err_line": 14,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        13,
        14,
        15
      ],
      "mod_code": [
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "if ( ! p . front ( ) ) continue ;",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 14,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "for ( int i = 3 ; i * i <= n ; i ++ ) { i += 2 ; }",
        "for ( int j = i * i ; j <= n ; j ++ ) { p . push_back ( i + i ) ; }"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}