{
  "meta": {
    "index": 795,
    "hitid": "33BFF6QPI15U0NZW3YQG0LUDPKM3WC",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "81A",
    "subid": "35427729"
  },
  "lines": [
    {
      "line": 0,
      "text": "OO = const long long with OO = 1e8",
      "code": "const long long OO = 1e8 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "o_o = const integer with o_o = 0",
      "code": "const int o_o = 0 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "EPS = double with EPS = double epsilon numeric_limits",
      "code": "double EPS = numeric_limits < double > :: epsilon ( ) ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "MAX = integer const with MAX = 2 * 100000 + 9",
      "code": "int const MAX = 2 * 100000 + 9 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "ar = character array of size MAX",
      "code": "char ar [ MAX ] ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "co = integer with co = - 1",
      "code": "int co = - 1 ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "in the function inzlition",
      "code": "void inzlition ( )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "for i = 0 to MAX exclusive , ar [ i ] = 0",
      "code": "for ( int i = 0 ; i < MAX ; i ++ ) { ar [ i ] = ' 0 ' ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "text = string",
      "code": "string text ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read text",
      "code": "getline ( cin , text ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "call inzlition",
      "code": "inzlition ( ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "co = - 1",
      "code": "co = - 1 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 0 to text . size ( ) exclusive",
      "code": "for ( int i = 0 ; i < text . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if co is - 1",
      "code": "if ( co == - 1 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increment co",
      "code": "co ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "ar [ co ] = text [ i ]",
      "code": "ar [ co ] = text [ i ] ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else if text [ i ] is ar [ co ]",
      "code": "else if ( text [ i ] == ar [ co ] )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "ar [ co ] = 0",
      "code": "ar [ co ] = ' 0 ' ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "decrement co",
      "code": "co -- ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 22,
      "text": "increment co",
      "code": "co ++ ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "ar [ co ] = text [ i ]",
      "code": "ar [ co ] = text [ i ] ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "for j = 0 to co , print ar [ j ]",
      "code": "for ( int j = 0 ; j <= co ; j ++ ) { cout << ar [ j ] ; }",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print next line",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "double EPS = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘double’ in initialization"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char ar [ MAX ] [ MAX ] ;"
      ],
      "err_line": 7,
      "err_msg": "incompatible types in assignment of ‘char’ to ‘char [200009]’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "char text ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "text >> text ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "return inzlition ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘void (*)()’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 17,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        26,
        11
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "text >> text ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        26,
        11,
        21
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "text >> text ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        26,
        11,
        10
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "text >> text ;",
        "char text ;"
      ],
      "err_line": 14,
      "err_msg": "request for member ‘size’ in ‘text’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2,
        26,
        11,
        23
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "text >> text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        26,
        21
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        26,
        21,
        10
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "do",
        "char text ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        2,
        26,
        21,
        23
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "do",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        26,
        10
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "char text ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        2,
        26,
        10,
        23
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "char text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        26,
        23
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "text >> text ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        11,
        21
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "text >> text ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        11,
        21,
        10
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "text >> text ;",
        "do",
        "char text ;"
      ],
      "err_line": 14,
      "err_msg": "request for member ‘size’ in ‘text’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2,
        11,
        21,
        23
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "text >> text ;",
        "do",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        11,
        10
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "text >> text ;",
        "char text ;"
      ],
      "err_line": 14,
      "err_msg": "request for member ‘size’ in ‘text’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2,
        11,
        10,
        23
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "text >> text ;",
        "char text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        11,
        23
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "text >> text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        21
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        21,
        10
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "do",
        "char text ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        2,
        21,
        10,
        23
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "do",
        "char text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        21,
        23
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "do",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "char text ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        2,
        10,
        23
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "char text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        23
      ],
      "mod_code": [
        "double EPS = getchar ( ) ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        26,
        11
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "text >> text ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        11,
        21
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "text >> text ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        11,
        21,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "text >> text ;",
        "do",
        "char text ;"
      ],
      "err_line": 14,
      "err_msg": "request for member ‘size’ in ‘text’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        26,
        11,
        21,
        23
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "text >> text ;",
        "do",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        26,
        11,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "text >> text ;",
        "char text ;"
      ],
      "err_line": 14,
      "err_msg": "request for member ‘size’ in ‘text’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        26,
        11,
        10,
        23
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "text >> text ;",
        "char text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        26,
        11,
        23
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "text >> text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        26,
        21
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        21,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "do",
        "char text ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        26,
        21,
        10,
        23
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "do",
        "char text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        26,
        21,
        23
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "do",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        26,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "char text ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        26,
        10,
        23
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "char text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        26,
        23
      ],
      "mod_code": [
        "for ( int j = 0 ; j < co ; j ++ ) cout << ar [ j ] ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        21
      ],
      "mod_code": [
        "text >> text ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        21,
        10
      ],
      "mod_code": [
        "text >> text ;",
        "do",
        "char text ;"
      ],
      "err_line": 14,
      "err_msg": "request for member ‘size’ in ‘text’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        11,
        21,
        10,
        23
      ],
      "mod_code": [
        "text >> text ;",
        "do",
        "char text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        21,
        23
      ],
      "mod_code": [
        "text >> text ;",
        "do",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "text >> text ;",
        "char text ;"
      ],
      "err_line": 14,
      "err_msg": "request for member ‘size’ in ‘text’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        11,
        10,
        23
      ],
      "mod_code": [
        "text >> text ;",
        "char text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        23
      ],
      "mod_code": [
        "text >> text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        21,
        10
      ],
      "mod_code": [
        "do",
        "char text ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        21,
        10,
        23
      ],
      "mod_code": [
        "do",
        "char text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        21,
        23
      ],
      "mod_code": [
        "do",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        10,
        23
      ],
      "mod_code": [
        "char text ;",
        "ar [ ' co ] = text [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "missing terminating ' character"
    }
  ]
}