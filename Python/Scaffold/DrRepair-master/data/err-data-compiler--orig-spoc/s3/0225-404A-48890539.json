{
  "meta": {
    "index": 225,
    "hitid": "3BJKPTD2QC6UR8G4JJM1VZQUR4STRO",
    "workerid": "A277IUJ2DY3GZQ",
    "probid": "404A",
    "subid": "48890539"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let a , e , f ints with e and f = 0",
      "code": "int a , e = 0 , f = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let b a 2d char array with dims a by a , and let c and d chars",
      "code": "char b [ a ] [ a ] , c , d ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i from 0 to a exclusive",
      "code": "for ( int i = 0 ; i < a ; ++ i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read the first a values of b [ i ]",
      "code": "for ( int j = 0 ; j < a ; ++ j ) { cin >> b [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set c to b [ 0 ] [ 0 ]",
      "code": "c = b [ 0 ] [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set d to b [ 0 ] [ 1 ]",
      "code": "d = b [ 0 ] [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i , j starting at 0 and increasing by 1 while i < a",
      "code": "for ( int i = 0 , j = 0 ; i < a ; ++ i && j ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if b [ i ] [ j ] is c , increment e",
      "code": "if ( b [ i ] [ j ] == c ) { e ++ ; }",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 , j = a - 1 , with i increasing by 1 and j decreasing by 1 while i < a",
      "code": "for ( int i = 0 , j = a - 1 ; i < a ; ++ i && -- j )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if b [ i ] [ j ] is c , increment e",
      "code": "if ( b [ i ] [ j ] == c ) { e ++ ; }",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i from 0 to a exclusive",
      "code": "for ( int i = 0 ; i < a ; ++ i )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for j from 0 to a exclusive",
      "code": "for ( int j = 0 ; j < a ; ++ j )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if b [ i ] [ j ] is d , increment f",
      "code": "if ( b [ i ] [ j ] == d ) { f ++ ; }",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if a is even",
      "code": "if ( a % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if e is 2 * a and f is a * a - 2 * a",
      "code": "if ( e == 2 * a && f == a * a - 2 * a )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print YES",
      "code": "cout << \" YES\\n \" ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "otherwise",
      "code": "else",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "otherwise",
      "code": "else",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if e is 2 * a and f is a * a - 2 * a + 1",
      "code": "if ( e == 2 * a && f == a * a - 2 * a + 1 )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "print YES",
      "code": "cout << \" YES\\n \" ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "otherwise",
      "code": "else",
      "indent": 2
    },
    {
      "line": 30,
      "text": "print NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < a ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int c = b [ 0 ] [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "conflicting declaration ‘int c’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int d = b [ 0 ] [ 1 ] ;"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int d’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a ; i ++ ) { i ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( int i = 0 , j = a - 1 ; i < a ; i ++ ) { i = a - 1 ; }"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < a ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( j = 0 ; j < a ; j ++ )"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "return else ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "return else ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "return else ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "char b [ a ] [ a ] , c , d , d ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        1,
        3,
        9
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 ; i < a ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        1,
        3,
        9,
        12
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        1,
        3,
        9,
        23
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        1,
        3,
        9,
        29
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        1,
        3,
        12
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        1,
        3,
        12,
        23
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        1,
        3,
        12,
        29
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        1,
        3,
        23
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "char b [ a ] [ a ] , c , d , d ;",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        1,
        3,
        23,
        29
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "char b [ a ] [ a ] , c , d , d ;",
        "return else ;",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        1,
        3,
        29
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "char b [ a ] [ a ] , c , d , d ;",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "for ( int i = 0 ; i < a ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9,
        12
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9,
        12,
        23
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9,
        12,
        29
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9,
        23
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "return else ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9,
        23,
        29
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "return else ;",
        "return else ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9,
        29
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "return else ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12,
        23
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        12,
        23,
        29
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;",
        "return else ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        12,
        29
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "return else ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        23,
        29
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "return else ;",
        "return else ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        29
      ],
      "mod_code": [
        "int a , e , f = 0 ;",
        "return else ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 ; i < a ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3,
        9,
        12
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3,
        9,
        12,
        23
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3,
        9,
        12,
        29
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3,
        9,
        23
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3,
        9,
        23,
        29
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "return else ;",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3,
        9,
        29
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 ; i < a ; i ++ )",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3,
        12,
        23
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3,
        12,
        23,
        29
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3,
        12,
        29
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3,
        23
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3,
        23,
        29
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "return else ;",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3,
        29
      ],
      "mod_code": [
        "char b [ a ] [ a ] , c , d , d ;",
        "return else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a ; i ++ )",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        12,
        23
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a ; i ++ )",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        12,
        23,
        29
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a ; i ++ )",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;",
        "return else ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        12,
        29
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a ; i ++ )",
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        23
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a ; i ++ )",
        "return else ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        23,
        29
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a ; i ++ )",
        "return else ;",
        "return else ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        29
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a ; i ++ )",
        "return else ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        23
      ],
      "mod_code": [
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        23,
        29
      ],
      "mod_code": [
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;",
        "return else ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        29
      ],
      "mod_code": [
        "for ( int i = 0 , j = a - 1 ; i < a ; i += 1 )",
        "return else ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        29
      ],
      "mod_code": [
        "return else ;",
        "return else ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}