{
  "meta": {
    "index": 2606,
    "hitid": "3EFNPKWBMSI1SXYBARXVTQL9NSE306",
    "workerid": "AIWEXPJAU66D9",
    "probid": "707A",
    "subid": "42003309"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , m and cnt where cnt = 1",
      "code": "int n , m , cnt = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare characters ch1 and ch2",
      "code": "char ch1 , ch2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read ch1",
      "code": "cin >> ch1 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if ch1 is one of : ' C ' , ' M ' or ' Y ' , set cnt to 0",
      "code": "if ( ch1 == ' C ' || ch1 == ' M ' || ch1 == ' Y ' ) cnt = 0 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if cnt > 0",
      "code": "if ( cnt )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" # Black & White \"",
      "code": "cout << \" #Black&White \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" # Color \"",
      "code": "cout << \" #Color \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char ch1 and ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( ch1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << \" # Black ( \" ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        11,
        13,
        12
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "cout << \" #. \" ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        11,
        13,
        12,
        2
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "cout << \" #. \" ;",
        "do",
        "char ch1 and ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        13,
        2
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "cout << \" #. \" ;",
        "char ch1 and ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        11,
        12,
        2
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "do",
        "char ch1 and ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        12,
        2,
        13
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "do",
        "char ch1 and ch2 ;",
        "cout << \" # \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        12,
        13
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "do",
        "cout << \" # \" ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "char ch1 and ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        2,
        13
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "char ch1 and ch2 ;",
        "cout << \" # \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        12,
        11
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "do",
        "cout << \" # Black ( \" ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        12,
        11,
        2
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "do",
        "cout << \" # Black ( \" ) ;",
        "char ch1 and ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        12,
        2
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "do",
        "char ch1 and ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        11
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "cout << \" # Black ( \" ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        11,
        2
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "cout << \" # Black ( \" ) ;",
        "char ch1 and ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "char ch1 and ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "do",
        "cout << \" # Black ( \" ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        11,
        2
      ],
      "mod_code": [
        "do",
        "cout << \" # Black ( \" ) ;",
        "char ch1 and ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        12,
        11,
        2,
        13
      ],
      "mod_code": [
        "do",
        "cout << \" # Black ( \" ) ;",
        "char ch1 and ch2 ;",
        "cout << \" # \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        12,
        11,
        13
      ],
      "mod_code": [
        "do",
        "cout << \" # Black ( \" ) ;",
        "cout << \" # \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "do",
        "char ch1 and ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        12,
        2,
        13
      ],
      "mod_code": [
        "do",
        "char ch1 and ch2 ;",
        "cout << \" # \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "do",
        "cout << \" # \" ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "cout << \" # Black ( \" ) ;",
        "char ch1 and ch2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        2,
        13
      ],
      "mod_code": [
        "cout << \" # Black ( \" ) ;",
        "char ch1 and ch2 ;",
        "cout << \" # \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "cout << \" # Black ( \" ) ;",
        "cout << \" # \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "char ch1 and ch2 ;",
        "cout << \" # \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    }
  ]
}