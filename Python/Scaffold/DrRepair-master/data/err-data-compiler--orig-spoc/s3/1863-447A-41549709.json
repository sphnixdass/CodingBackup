{
  "meta": {
    "index": 1863,
    "hitid": "3PKJ68EHDNQNOB6WBKW3FP1F564JH2",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "447A",
    "subid": "41549709"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "p , n , x , flag = integers with flag = 0",
      "code": "int p , n , x , flag = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "arr = array of 305 integers",
      "code": "int arr [ 305 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 299 , arr [ i ] = 0",
      "code": "for ( int i = 0 ; i < 300 ; i ++ ) { arr [ i ] = 0 ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read p and n",
      "code": "cin >> p >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if arr [ x modulo p ] is 0",
      "code": "if ( arr [ x % p ] == 0 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "arr [ x modulo p ] = 1 ;",
      "code": "arr [ x % p ] = 1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print i + 1",
      "code": "cout << i + 1 << endl ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "flag = 1",
      "code": "flag = 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if not flag , print - 1",
      "code": "if ( ! flag ) { cout << - 1 << endl ; }",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( arr [ x modulo p ] == 0 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        11,
        12
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "int flag = 1 ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        11,
        12,
        7
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "int flag = 1 ;",
        "do",
        "if ( arr [ x modulo p ] == 0 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        4,
        11,
        12,
        9
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "int flag = 1 ;",
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        11,
        12,
        6
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "int flag = 1 ;",
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        11,
        7
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "int flag = 1 ;",
        "if ( arr [ x modulo p ] == 0 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        4,
        11,
        7,
        9
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "int flag = 1 ;",
        "if ( arr [ x modulo p ] == 0 )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        4,
        11,
        7,
        6
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "int flag = 1 ;",
        "if ( arr [ x modulo p ] == 0 )",
        "while ( cin >> x )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        4,
        11,
        9
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "int flag = 1 ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        11,
        9,
        6
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "int flag = 1 ;",
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        12,
        7
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "do",
        "if ( arr [ x modulo p ] == 0 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        4,
        12,
        7,
        9
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "do",
        "if ( arr [ x modulo p ] == 0 )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        4,
        12,
        7,
        6
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "do",
        "if ( arr [ x modulo p ] == 0 )",
        "while ( cin >> x )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        4,
        12,
        9
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        12,
        9,
        6
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "do",
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        12,
        6
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "if ( arr [ x modulo p ] == 0 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        4,
        7,
        9
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "if ( arr [ x modulo p ] == 0 )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        6
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "if ( arr [ x modulo p ] == 0 )",
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        4,
        7,
        6
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "if ( arr [ x modulo p ] == 0 )",
        "while ( cin >> x )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        9,
        6
      ],
      "mod_code": [
        "while ( cin >> p >> n )",
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "int flag = 1 ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        12,
        7
      ],
      "mod_code": [
        "int flag = 1 ;",
        "do",
        "if ( arr [ x modulo p ] == 0 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        11,
        12,
        7,
        9
      ],
      "mod_code": [
        "int flag = 1 ;",
        "do",
        "if ( arr [ x modulo p ] == 0 )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        11,
        12,
        7,
        6
      ],
      "mod_code": [
        "int flag = 1 ;",
        "do",
        "if ( arr [ x modulo p ] == 0 )",
        "while ( cin >> x )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        11,
        12,
        9
      ],
      "mod_code": [
        "int flag = 1 ;",
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        12,
        9,
        6
      ],
      "mod_code": [
        "int flag = 1 ;",
        "do",
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        12,
        6
      ],
      "mod_code": [
        "int flag = 1 ;",
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "int flag = 1 ;",
        "if ( arr [ x modulo p ] == 0 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        11,
        7,
        9
      ],
      "mod_code": [
        "int flag = 1 ;",
        "if ( arr [ x modulo p ] == 0 )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        11,
        7,
        9,
        6
      ],
      "mod_code": [
        "int flag = 1 ;",
        "if ( arr [ x modulo p ] == 0 )",
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        11,
        7,
        6
      ],
      "mod_code": [
        "int flag = 1 ;",
        "if ( arr [ x modulo p ] == 0 )",
        "while ( cin >> x )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "int flag = 1 ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        6
      ],
      "mod_code": [
        "int flag = 1 ;",
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "do",
        "if ( arr [ x modulo p ] == 0 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        12,
        7,
        9
      ],
      "mod_code": [
        "do",
        "if ( arr [ x modulo p ] == 0 )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        12,
        7,
        9,
        6
      ],
      "mod_code": [
        "do",
        "if ( arr [ x modulo p ] == 0 )",
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        12,
        7,
        6
      ],
      "mod_code": [
        "do",
        "if ( arr [ x modulo p ] == 0 )",
        "while ( cin >> x )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        9,
        6
      ],
      "mod_code": [
        "do",
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "if ( arr [ x modulo p ] == 0 )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        7,
        9,
        6
      ],
      "mod_code": [
        "if ( arr [ x modulo p ] == 0 )",
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "if ( arr [ x modulo p ] == 0 )",
        "while ( cin >> x )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "do",
        "while ( cin >> x )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}