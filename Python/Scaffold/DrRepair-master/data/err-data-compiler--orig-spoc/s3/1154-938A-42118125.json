{
  "meta": {
    "index": 1154,
    "hitid": "3TCFMTM8HEICE4NA2ANQOLZRNTD211",
    "workerid": "AIWEXPJAU66D9",
    "probid": "938A",
    "subid": "42118125"
  },
  "lines": [
    {
      "line": 0,
      "text": "pd is a boolean function with char argument c",
      "code": "bool pd ( char c )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return true if c = ' a ' | | c = ' e ' | | c = ' i ' | | c = ' o ' | | c = ' u ' | | c = ' y ' and false otherwise",
      "code": "return ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' || c == ' y ' ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create strings str and str1",
      "code": "string str , str1 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare int variables n and i",
      "code": "int n , i ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read line and store it into str1",
      "code": "getline ( cin , str1 ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read line and store it into str",
      "code": "getline ( cin , str ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "change i to 2",
      "code": "i = 2 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "while i < = length of str",
      "code": "while ( i <= str . size ( ) )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if pd ( str [ i - 1 ] ) and pd ( str [ i - 2 ] ) are both true",
      "code": "if ( pd ( str [ i - 1 ] ) && pd ( str [ i - 2 ] ) )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "erase elements from position i - 1 until the end of str",
      "code": "str . erase ( str . begin ( ) + i - 1 ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print str",
      "code": "cout << str << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string str and str1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int n declare i ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "gets ( cin , str1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "i to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::erase(int, std::__cxx11::basic_string<char>::iterator)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        12,
        4
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "str . erase ( i - 1 ) ;",
        "int n declare i ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        12,
        4,
        3
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "str . erase ( i - 1 ) ;",
        "int n declare i ;",
        "string str and str1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        12,
        4,
        16
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "str . erase ( i - 1 ) ;",
        "int n declare i ;",
        "cout << str ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        12,
        3
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "str . erase ( i - 1 ) ;",
        "string str and str1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        12,
        3,
        16
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "str . erase ( i - 1 ) ;",
        "string str and str1 ;",
        "cout << str ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "int n declare i ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "int n declare i ;",
        "string str and str1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        4,
        3,
        16
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "int n declare i ;",
        "string str and str1 ;",
        "cout << str ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        4,
        3,
        12
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "int n declare i ;",
        "string str and str1 ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        4,
        16
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "int n declare i ;",
        "cout << str ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        4,
        16,
        12
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "int n declare i ;",
        "cout << str ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        4,
        12
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "int n declare i ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "string str and str1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        3,
        16
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "string str and str1 ;",
        "cout << str ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        3,
        16,
        12
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "string str and str1 ;",
        "cout << str ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        3,
        12
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "string str and str1 ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        16,
        12
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "cout << str ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::erase(int, std::__cxx11::basic_string<char>::iterator)’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' e ' || c == ' o ' || c == ' o ' || c == ' y ' || c == ' y ' ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::erase(int, std::__cxx11::basic_string<char>::iterator)’"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "str . erase ( i - 1 ) ;",
        "int n declare i ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        12,
        4,
        3
      ],
      "mod_code": [
        "str . erase ( i - 1 ) ;",
        "int n declare i ;",
        "string str and str1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        12,
        4,
        3,
        16
      ],
      "mod_code": [
        "str . erase ( i - 1 ) ;",
        "int n declare i ;",
        "string str and str1 ;",
        "cout << str ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        12,
        4,
        16
      ],
      "mod_code": [
        "str . erase ( i - 1 ) ;",
        "int n declare i ;",
        "cout << str ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "str . erase ( i - 1 ) ;",
        "string str and str1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        12,
        3,
        16
      ],
      "mod_code": [
        "str . erase ( i - 1 ) ;",
        "string str and str1 ;",
        "cout << str ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "int n declare i ;",
        "string str and str1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        3,
        16
      ],
      "mod_code": [
        "int n declare i ;",
        "string str and str1 ;",
        "cout << str ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        3,
        16,
        12
      ],
      "mod_code": [
        "int n declare i ;",
        "string str and str1 ;",
        "cout << str ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        3,
        12
      ],
      "mod_code": [
        "int n declare i ;",
        "string str and str1 ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "int n declare i ;",
        "cout << str ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        4,
        16,
        12
      ],
      "mod_code": [
        "int n declare i ;",
        "cout << str ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "int n declare i ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "string str and str1 ;",
        "cout << str ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        16,
        12
      ],
      "mod_code": [
        "string str and str1 ;",
        "cout << str ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "string str and str1 ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        16,
        12
      ],
      "mod_code": [
        "cout << str ;",
        "str . erase ( i - 1 , str . end ( ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::erase(int, std::__cxx11::basic_string<char>::iterator)’"
    }
  ]
}