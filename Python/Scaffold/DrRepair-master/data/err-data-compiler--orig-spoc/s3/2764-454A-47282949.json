{
  "meta": {
    "index": 2764,
    "hitid": "359AP8GAGGE3N8UEOJT518ZQ26X7CJ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "454A",
    "subid": "47282949"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare character array draw size 202 by 202",
      "code": "char draw [ 202 ] [ 202 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if n % 2 is 0 or n is greater than 201",
      "code": "if ( n % 2 == 0 || n > 201 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print \" n % 2 = = 0 | | n > 201 \"",
      "code": "cout << \" n%2==0||n > 201 \" ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for k = 0 to n exclusive , let draw [ i ] [ k ] be \" * \"",
      "code": "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = ' * ' ; }",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "declare integer Mid = n / 2",
      "code": "int Mid = n / 2 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "declare DiamondCount = 0",
      "code": "int DiamondCount = 0 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if i is less than or equal to Mid",
      "code": "if ( i <= Mid )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "let DiamondCount be 2 * i + 1",
      "code": "DiamondCount = 2 * i + 1 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 17,
      "text": "let DiamondCount be n - 2 * ( i - Mid )",
      "code": "DiamondCount = n - 2 * ( i - Mid ) ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "for k = 0 to DiamondCount / 2 inclusive",
      "code": "for ( int k = 0 ; k <= DiamondCount / 2 ; k ++ )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "let draw [ i ] [ Mid - k ] be ' D '",
      "code": "draw [ i ] [ Mid - k ] = ' D ' ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "let draw [ i ] [ Mid + k ] be ' D '",
      "code": "draw [ i ] [ Mid + k ] = ' D ' ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "print draw [ i ] and newline",
      "code": "cout << draw [ i ] << endl ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char draw [ 202 ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) draw [ i ] [ k ] = \" * \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "draw [ i ] [ j + k ] = ' D ' ;"
      ],
      "err_line": 21,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        9,
        21
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "draw [ i ] [ j + k ] = ' D ' ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        9,
        21,
        12
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "bool DiamondCount = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        9,
        21,
        3
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "cin >> N ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        9,
        21,
        20
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        9,
        12
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "bool DiamondCount = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        9,
        12,
        3
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "bool DiamondCount = 0 ;",
        "cin >> N ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        9,
        12,
        20
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "bool DiamondCount = 0 ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        9,
        3
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "cin >> N ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        9,
        3,
        20
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "cin >> N ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        9,
        20
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "draw [ i ] [ j + k ] = ' D ' ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        21,
        12
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "bool DiamondCount = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        21,
        12,
        3
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "bool DiamondCount = 0 ;",
        "cin >> N ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        21,
        12,
        20
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "bool DiamondCount = 0 ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        21,
        3
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "cin >> N ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        21,
        3,
        20
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "cin >> N ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        21,
        20
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "bool DiamondCount = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        12,
        3
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "bool DiamondCount = 0 ;",
        "cin >> N ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        12,
        3,
        20
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "bool DiamondCount = 0 ;",
        "cin >> N ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        12,
        20
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "bool DiamondCount = 0 ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "cin >> N ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        3,
        20
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "cin >> N ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        20
      ],
      "mod_code": [
        "cout << \" n % 2 == 0 || n > 201 ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        21
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "draw [ i ] [ j + k ] = ' D ' ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        21,
        12
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "bool DiamondCount = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        21,
        12,
        3
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "bool DiamondCount = 0 ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        21,
        12,
        20
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "bool DiamondCount = 0 ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        21,
        3
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        21,
        3,
        20
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "cin >> N ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        21,
        20
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "draw [ i ] [ j + k ] = ' D ' ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "bool DiamondCount = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        12,
        3
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "bool DiamondCount = 0 ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        12,
        3,
        20
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "bool DiamondCount = 0 ;",
        "cin >> N ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        12,
        20
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "bool DiamondCount = 0 ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        3,
        20
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "cin >> N ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        20
      ],
      "mod_code": [
        "for ( int k = 0 ; k < n ; k ++ ) { draw [ i ] [ k ] = \" * \" ; }",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        12
      ],
      "mod_code": [
        "draw [ i ] [ j + k ] = ' D ' ;",
        "bool DiamondCount = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        12,
        3
      ],
      "mod_code": [
        "draw [ i ] [ j + k ] = ' D ' ;",
        "bool DiamondCount = 0 ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        12,
        3,
        20
      ],
      "mod_code": [
        "draw [ i ] [ j + k ] = ' D ' ;",
        "bool DiamondCount = 0 ;",
        "cin >> N ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        12,
        20
      ],
      "mod_code": [
        "draw [ i ] [ j + k ] = ' D ' ;",
        "bool DiamondCount = 0 ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 21,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        3
      ],
      "mod_code": [
        "draw [ i ] [ j + k ] = ' D ' ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        3,
        20
      ],
      "mod_code": [
        "draw [ i ] [ j + k ] = ' D ' ;",
        "cin >> N ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        20
      ],
      "mod_code": [
        "draw [ i ] [ j + k ] = ' D ' ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 21,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "bool DiamondCount = 0 ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3,
        20
      ],
      "mod_code": [
        "bool DiamondCount = 0 ;",
        "cin >> N ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        20
      ],
      "mod_code": [
        "cin >> N ;",
        "draw [ i ] [ Mid - ' k ' ] = ' D ' ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    }
  ]
}