{
  "meta": {
    "index": 1146,
    "hitid": "3S829FDFT2V77F6J6SSEFDUWOCPXDU",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "938A",
    "subid": "48281659"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function st taking a char s and returning a bool",
      "code": "bool st ( char s )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if s is a lowercase vowel including y",
      "code": "if ( s == ' a ' || s == ' e ' || s == ' i ' || s == ' o ' || s == ' u ' || s == ' y ' )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return true",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return false",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for j = 0 to 10000",
      "code": "for ( int j = 0 ; j < 10000 ; j ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to n - 1",
      "code": "for ( int i = 0 ; i < n - 1 ; i ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if st of s [ i ] is true and st of s [ i + 1 ] is true then erase the character at i + 1 in s",
      "code": "if ( st ( s [ i ] ) == true && st ( s [ i + 1 ] ) == true ) { s . erase ( s . begin ( ) + i + 1 ) ; }",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘st’ in ‘st’, which is of non-class type ‘bool(char)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 8,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘st’ in ‘st’, which is of non-class type ‘bool(char)’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘st’ in ‘st’, which is of non-class type ‘bool(char)’"
    },
    {
      "mod_line": [
        1,
        13,
        4
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }",
        "else"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        13,
        4,
        10
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }",
        "else",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        13,
        4,
        16
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }",
        "else",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        13,
        10
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        13,
        10,
        16
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }",
        "s >> s ;",
        "cout << s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        13,
        16
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }",
        "cout << s ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘st’ in ‘st’, which is of non-class type ‘bool(char)’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "else"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        4,
        13
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "else",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        4,
        13,
        10
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "else",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        4,
        13,
        16
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "else",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        4,
        10
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "else",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        4,
        10,
        16
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "else",
        "s >> s ;",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        4,
        16
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "else",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘st’ in ‘st’, which is of non-class type ‘bool(char)’"
    },
    {
      "mod_line": [
        1,
        13,
        10
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        13,
        10,
        16
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;",
        "s >> s ;",
        "cout << s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        13,
        16
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;",
        "cout << s ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘st’ in ‘st’, which is of non-class type ‘bool(char)’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        10,
        16
      ],
      "mod_code": [
        "if ( s >= ' a ' && s <= ' 9 ' )",
        "s >> s ;",
        "cout << s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }",
        "else"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        4,
        10
      ],
      "mod_code": [
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }",
        "else",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        4,
        10,
        16
      ],
      "mod_code": [
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }",
        "else",
        "s >> s ;",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        4,
        16
      ],
      "mod_code": [
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }",
        "else",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        10
      ],
      "mod_code": [
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        10,
        16
      ],
      "mod_code": [
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }",
        "s >> s ;",
        "cout << s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) { s . erase ( s [ i + 1 ] ) ; }",
        "cout << s ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘st’ in ‘st’, which is of non-class type ‘bool(char)’"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "else",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        13,
        10
      ],
      "mod_code": [
        "else",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        13,
        10,
        16
      ],
      "mod_code": [
        "else",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;",
        "s >> s ;",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        13,
        16
      ],
      "mod_code": [
        "else",
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "else",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        10,
        16
      ],
      "mod_code": [
        "else",
        "s >> s ;",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "else",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        10
      ],
      "mod_code": [
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        10,
        16
      ],
      "mod_code": [
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;",
        "s >> s ;",
        "cout << s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "if ( st . st ( s [ i ] ) && ! s [ i + 1 ] ) s . erase ( s [ i + 1 ] ) ;",
        "cout << s ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘st’ in ‘st’, which is of non-class type ‘bool(char)’"
    },
    {
      "mod_line": [
        10,
        16
      ],
      "mod_code": [
        "s >> s ;",
        "cout << s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}