{
  "meta": {
    "index": 1150,
    "hitid": "3Z56AA6EK4UXSUS0IYIRYQ460MJ6MS",
    "workerid": "AY9SI82Y2PX3C",
    "probid": "938A",
    "subid": "48666159"
  },
  "lines": [
    {
      "line": 0,
      "text": "function declaration for isVowel , accepting a char as argument",
      "code": "int isVowel ( char c ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let i , j , n = integers",
      "code": "int i , j , n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "get inputs for n and s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for int i = 1 and i must be less than n",
      "code": "for ( i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if isVowel for s [ i ] and for s [ i - 1 ]",
      "code": "if ( isVowel ( s [ i ] ) && isVowel ( s [ i - 1 ] ) )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for int j = 1 and j is less than n",
      "code": "for ( j = 1 ; j < n ; j ++ )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if isVowel for s [ j - 1 ] and for s [ j ]",
      "code": "if ( isVowel ( s [ j - 1 ] ) && isVowel ( s [ j ] ) )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "erase j , 1 from s",
      "code": "s . erase ( j , 1 ) ;",
      "indent": 5
    },
    {
      "line": 10,
      "text": "break from loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set i to 0",
      "code": "i = 0 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "output s and newline",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 19,
      "text": "isVowel declaration accepting a char",
      "code": "int isVowel ( char c )",
      "indent": 0
    },
    {
      "line": 20,
      "text": "test if is vowel ( a , e , i , o , u )",
      "code": "if ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' || c == ' y ' ) return 1 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char isVowel , accepting ;"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "char isVowel ;"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 20,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char isVowel , accepting = \" \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "s erase erase ( j , 1 ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘erase’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "inline char isVowel ;"
      ],
      "err_line": 19,
      "err_msg": "‘isVowel’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( == vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘==’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )"
      ],
      "err_line": 8,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        6,
        8
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )"
      ],
      "err_line": 19,
      "err_msg": "‘int isVowel(char)’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        0,
        6,
        8,
        19
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "char isVowel ;"
      ],
      "err_line": 19,
      "err_msg": "redefinition of ‘char isVowel’"
    },
    {
      "mod_line": [
        0,
        6,
        8,
        20
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 19,
      "err_msg": "‘int isVowel(char)’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        0,
        6,
        8,
        13
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "int i = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘int isVowel(char)’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        0,
        6,
        19
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "char isVowel ;"
      ],
      "err_line": 8,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        6,
        19,
        20
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "char isVowel ;",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 8,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        6,
        19,
        13
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "char isVowel ;",
        "int i = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        6,
        20
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 8,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        6,
        20,
        13
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "if ( ! vowel ( a , e , i , o , u , u ) )",
        "int i = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        6,
        13
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "int i = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        8,
        19
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "char isVowel ;"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        8,
        19,
        20
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "char isVowel ;",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        8,
        19,
        13
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "char isVowel ;",
        "int i = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        8,
        20
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        8,
        20,
        13
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "if ( ! vowel ( a , e , i , o , u , u ) )",
        "int i = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        8,
        13
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "int i = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "char isVowel ;"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        19,
        20
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "char isVowel ;",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        19,
        20,
        13
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "char isVowel ;",
        "if ( ! vowel ( a , e , i , o , u , u ) )",
        "int i = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        19,
        13
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "char isVowel ;",
        "int i = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        20
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        20,
        13
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "if ( ! vowel ( a , e , i , o , u , u ) )",
        "int i = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "char isVowel , accepting ;",
        "int i = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘isVowel’ cannot be used as a function"
    },
    {
      "mod_line": [
        6,
        8,
        19
      ],
      "mod_code": [
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "char isVowel ;"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        6,
        8,
        19,
        20
      ],
      "mod_code": [
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "char isVowel ;",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        6,
        8,
        19,
        13
      ],
      "mod_code": [
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "char isVowel ;",
        "int i = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        6,
        8,
        20
      ],
      "mod_code": [
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 20,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        20,
        13
      ],
      "mod_code": [
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "if ( ! vowel ( a , e , i , o , u , u ) )",
        "int i = 0 ;"
      ],
      "err_line": 20,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19
      ],
      "mod_code": [
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "char isVowel ;"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        6,
        19,
        20
      ],
      "mod_code": [
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "char isVowel ;",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        6,
        19,
        20,
        13
      ],
      "mod_code": [
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "char isVowel ;",
        "if ( ! vowel ( a , e , i , o , u , u ) )",
        "int i = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        6,
        19,
        13
      ],
      "mod_code": [
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "char isVowel ;",
        "int i = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        6,
        20
      ],
      "mod_code": [
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 20,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        20,
        13
      ],
      "mod_code": [
        "if ( ! ( s [ i ] ) && ! ( s [ i - 1 ] ) )",
        "if ( ! vowel ( a , e , i , o , u , u ) )",
        "int i = 0 ;"
      ],
      "err_line": 20,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        19
      ],
      "mod_code": [
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "char isVowel ;"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        8,
        19,
        20
      ],
      "mod_code": [
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "char isVowel ;",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        8,
        19,
        20,
        13
      ],
      "mod_code": [
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "char isVowel ;",
        "if ( ! vowel ( a , e , i , o , u , u ) )",
        "int i = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        8,
        19,
        13
      ],
      "mod_code": [
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "char isVowel ;",
        "int i = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        8,
        20
      ],
      "mod_code": [
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 20,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        20,
        13
      ],
      "mod_code": [
        "if ( ! s [ j - 1 ] && s [ j - 1 ] )",
        "if ( ! vowel ( a , e , i , o , u , u ) )",
        "int i = 0 ;"
      ],
      "err_line": 20,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        20
      ],
      "mod_code": [
        "char isVowel ;",
        "if ( ! vowel ( a , e , i , o , u , u ) )"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        19,
        20,
        13
      ],
      "mod_code": [
        "char isVowel ;",
        "if ( ! vowel ( a , e , i , o , u , u ) )",
        "int i = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        19,
        13
      ],
      "mod_code": [
        "char isVowel ;",
        "int i = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘char isVowel’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        20,
        13
      ],
      "mod_code": [
        "if ( ! vowel ( a , e , i , o , u , u ) )",
        "int i = 0 ;"
      ],
      "err_line": 20,
      "err_msg": "‘a’ was not declared in this scope"
    }
  ]
}