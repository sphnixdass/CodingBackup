{
  "meta": {
    "index": 2864,
    "hitid": "3ZURAPD288HWFYZMQ52X84TGWXPF15",
    "workerid": "AIWEXPJAU66D9",
    "probid": "454A",
    "subid": "48022158"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long longs k , m , i and v",
      "code": "long long k , m , i , v ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read user input to k",
      "code": "cin >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "assign ( k + 1 ) / 2 to m",
      "code": "m = ( k + 1 ) / 2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "in a for loop , change i from 1 to m inclusive incrementing i",
      "code": "for ( i = 1 ; i <= m ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for v = 1 to k inclusive incrementing v",
      "code": "for ( v = 1 ; v <= k ; v ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if the absolute value of m - v > = i",
      "code": "if ( abs ( m - v ) >= i )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "print \" * \" to the output",
      "code": "cout << \" * \" ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 9,
      "text": "print \" D \"",
      "code": "cout << \" D \" ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "change i from m - 1 to 1 inclusive in a loop , decrementing i",
      "code": "for ( i = ( m - 1 ) ; i >= 1 ; i -- )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "in a for loop , change v from 1 to k inclusive",
      "code": "for ( v = 1 ; v <= k ; v ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if the absolute value of m - v > = i",
      "code": "if ( abs ( m - v ) >= i )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "print \" * \"",
      "code": "cout << \" * \" ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 18,
      "text": "print \" D \" to the output stream",
      "code": "cout << \" D \" ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int m = ( k + 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int m’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16,
        8
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "cout << \" * \"",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16,
        8,
        9
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "cout << \" * \"",
        "do",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16,
        8,
        6
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "cout << \" * \"",
        "do",
        "if ( abs ( m - v ) )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16,
        8,
        17
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "cout << \" * \"",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16,
        9
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "cout << \" * \"",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16,
        9,
        6
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "cout << \" * \"",
        "puts ( \" D \" ) ;",
        "if ( abs ( m - v ) )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16,
        9,
        17
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "cout << \" * \"",
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16,
        6
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "cout << \" * \"",
        "if ( abs ( m - v ) )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16,
        6,
        17
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "cout << \" * \"",
        "if ( abs ( m - v ) )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16,
        17
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "cout << \" * \"",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        8,
        9
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "do",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        8,
        9,
        6
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "do",
        "puts ( \" D \" ) ;",
        "if ( abs ( m - v ) )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        8,
        9,
        17
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "do",
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        8,
        6
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "do",
        "if ( abs ( m - v ) )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        8,
        6,
        17
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "do",
        "if ( abs ( m - v ) )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        8,
        17
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        9,
        6,
        17
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "puts ( \" D \" ) ;",
        "if ( abs ( m - v ) )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        9,
        17
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6,
        17
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "if ( abs ( m - v ) )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "cout << \" * \" << endl ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        8
      ],
      "mod_code": [
        "cout << \" * \"",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        8,
        9
      ],
      "mod_code": [
        "cout << \" * \"",
        "do",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        8,
        9,
        6
      ],
      "mod_code": [
        "cout << \" * \"",
        "do",
        "puts ( \" D \" ) ;",
        "if ( abs ( m - v ) )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        8,
        9,
        17
      ],
      "mod_code": [
        "cout << \" * \"",
        "do",
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        8,
        6
      ],
      "mod_code": [
        "cout << \" * \"",
        "do",
        "if ( abs ( m - v ) )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        8,
        6,
        17
      ],
      "mod_code": [
        "cout << \" * \"",
        "do",
        "if ( abs ( m - v ) )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        8,
        17
      ],
      "mod_code": [
        "cout << \" * \"",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "cout << \" * \"",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        9,
        6
      ],
      "mod_code": [
        "cout << \" * \"",
        "puts ( \" D \" ) ;",
        "if ( abs ( m - v ) )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        9,
        6,
        17
      ],
      "mod_code": [
        "cout << \" * \"",
        "puts ( \" D \" ) ;",
        "if ( abs ( m - v ) )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        9,
        17
      ],
      "mod_code": [
        "cout << \" * \"",
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        6
      ],
      "mod_code": [
        "cout << \" * \"",
        "if ( abs ( m - v ) )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        6,
        17
      ],
      "mod_code": [
        "cout << \" * \"",
        "if ( abs ( m - v ) )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "cout << \" * \"",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "do",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        9,
        6
      ],
      "mod_code": [
        "do",
        "puts ( \" D \" ) ;",
        "if ( abs ( m - v ) )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        9,
        6,
        17
      ],
      "mod_code": [
        "do",
        "puts ( \" D \" ) ;",
        "if ( abs ( m - v ) )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        9,
        17
      ],
      "mod_code": [
        "do",
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "do",
        "if ( abs ( m - v ) )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        6,
        17
      ],
      "mod_code": [
        "do",
        "if ( abs ( m - v ) )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        17
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        6,
        17
      ],
      "mod_code": [
        "puts ( \" D \" ) ;",
        "if ( abs ( m - v ) )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "if ( abs ( m - v ) )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}