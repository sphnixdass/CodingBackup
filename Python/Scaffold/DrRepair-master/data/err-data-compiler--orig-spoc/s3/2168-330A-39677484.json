{
  "meta": {
    "index": 2168,
    "hitid": "3B9J25CZ257P66E6CMRGWZVMOX9SCF",
    "workerid": "AIWEXPJAU66D9",
    "probid": "330A",
    "subid": "39677484"
  },
  "lines": [
    {
      "line": 0,
      "text": "set constant integer N to 10 + 5",
      "code": "const int N = 10 + 5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers m , n and res",
      "code": "int m , n , res ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare array of chars a with size N by N",
      "code": "char a [ N ] [ N ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare boolean arrays row and col with size N and 2d array eaten with size N by N",
      "code": "bool row [ N ] , col [ N ] , eaten [ N ] [ N ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "in the function Input",
      "code": "void Input ( )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "read m and n",
      "code": "cin >> m >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer i = 1 to m inclusive read a [ i ] + 1",
      "code": "for ( int i = 1 ; i <= m ; i ++ ) cin >> ( a [ i ] + 1 ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 1 to m inclusive",
      "code": "for ( int i = 1 ; i <= m ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for integer j = 1 to n inclusive",
      "code": "for ( int j = 1 ; j <= n ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set row [ i ] and col [ j ] to true if a [ i ] [ j ] is ' S '",
      "code": "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = true , col [ j ] = true ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "in the function Solve",
      "code": "void Solve ( )",
      "indent": 0
    },
    {
      "line": 14,
      "text": "for integer i = 1 to m inclusive",
      "code": "for ( int i = 1 ; i <= m ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if row [ i ] is false",
      "code": "if ( row [ i ] == false )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "for j = 1 to n inclusive",
      "code": "for ( int j = 1 ; j <= n ; j ++ )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if eaten [ i ] [ j ] is false , set eaten [ i ] [ j ] = true and increment res",
      "code": "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true , res ++ ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for integer j = 1 to n inclusive",
      "code": "for ( int j = 1 ; j <= n ; j ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if col [ j ] is false",
      "code": "if ( col [ j ] == false )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "for integer i = 1 to m inclusive",
      "code": "for ( int i = 1 ; i <= m ; i ++ )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "if eaten [ i ] [ j ] is false , set eaten [ i ] [ j ] = true and increment res",
      "code": "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true , res ++ ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print res and ' \\ n '",
      "code": "cout << res << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 31,
      "text": "call function Input",
      "code": "Input ( ) ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "call function Solve",
      "code": "Solve ( ) ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char a [ N ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] = { 0 } ;"
      ],
      "err_line": 9,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [15]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "Input ( )"
      ],
      "err_line": 4,
      "err_msg": "ISO C++ forbids declaration of ‘Input’ with no type [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "Solve ( )"
      ],
      "err_line": 13,
      "err_msg": "ISO C++ forbids declaration of ‘Solve’ with no type [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "-- Input ( ) ;"
      ],
      "err_line": 31,
      "err_msg": "no pre-decrement operator for type"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "-- Solve ( )"
      ],
      "err_line": 32,
      "err_msg": "no pre-decrement operator for type"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        9,
        17
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        9,
        17,
        24
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        9,
        17,
        7
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        9,
        17,
        31
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "-- Input ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        9,
        24
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        9,
        24,
        7
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        9,
        24,
        31
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "-- Input ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        9,
        7
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        9,
        7,
        31
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "for ( i = 1 ; i <= m ; i ++ )",
        "-- Input ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        9,
        31
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "-- Input ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        17,
        24
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        17,
        24,
        7
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        17,
        24,
        31
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "-- Input ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        17,
        7
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        17,
        7,
        31
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )",
        "-- Input ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        17,
        31
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "-- Input ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        24
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        24,
        7
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        24,
        7,
        31
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )",
        "-- Input ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        24,
        31
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "-- Input ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        7,
        31
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "for ( i = 1 ; i <= m ; i ++ )",
        "-- Input ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        3,
        31
      ],
      "mod_code": [
        "bool row [ N ] [ N ] , col [ N ] [ N ] , col [ N ] [ N ] ;",
        "-- Input ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘bool col [15][15]’"
    },
    {
      "mod_line": [
        9,
        17,
        24,
        7
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        17,
        24,
        31
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "-- Input ( ) ;"
      ],
      "err_line": 31,
      "err_msg": "no pre-decrement operator for type"
    },
    {
      "mod_line": [
        9,
        17,
        7
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        17,
        7,
        31
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )",
        "-- Input ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        17,
        31
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "-- Input ( ) ;"
      ],
      "err_line": 31,
      "err_msg": "no pre-decrement operator for type"
    },
    {
      "mod_line": [
        9,
        24,
        7
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        24,
        7,
        31
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )",
        "-- Input ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        24,
        31
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "-- Input ( ) ;"
      ],
      "err_line": 31,
      "err_msg": "no pre-decrement operator for type"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        7,
        31
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "for ( i = 1 ; i <= m ; i ++ )",
        "-- Input ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        31
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' ) row [ i ] = a [ i ] [ j ] ;",
        "-- Input ( ) ;"
      ],
      "err_line": 31,
      "err_msg": "no pre-decrement operator for type"
    },
    {
      "mod_line": [
        17,
        24,
        7
      ],
      "mod_code": [
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        24,
        7,
        31
      ],
      "mod_code": [
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )",
        "-- Input ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        24,
        31
      ],
      "mod_code": [
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "-- Input ( ) ;"
      ],
      "err_line": 31,
      "err_msg": "no pre-decrement operator for type"
    },
    {
      "mod_line": [
        17,
        7
      ],
      "mod_code": [
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        7,
        31
      ],
      "mod_code": [
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )",
        "-- Input ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        31
      ],
      "mod_code": [
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "-- Input ( ) ;"
      ],
      "err_line": 31,
      "err_msg": "no pre-decrement operator for type"
    },
    {
      "mod_line": [
        24,
        7
      ],
      "mod_code": [
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        7,
        31
      ],
      "mod_code": [
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "for ( i = 1 ; i <= m ; i ++ )",
        "-- Input ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        31
      ],
      "mod_code": [
        "if ( ! eaten [ i ] [ j ] ) eaten [ i ] [ j ] = true ;",
        "-- Input ( ) ;"
      ],
      "err_line": 31,
      "err_msg": "no pre-decrement operator for type"
    },
    {
      "mod_line": [
        7,
        31
      ],
      "mod_code": [
        "for ( i = 1 ; i <= m ; i ++ )",
        "-- Input ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}