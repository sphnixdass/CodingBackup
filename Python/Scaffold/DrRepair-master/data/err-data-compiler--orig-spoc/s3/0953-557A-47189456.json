{
  "meta": {
    "index": 953,
    "hitid": "3PCPFX4U40KKW2J3BKSC951O49AFQT",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "557A",
    "subid": "47189456"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integers = n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "integers = a1 , a2 , b1 , b2 , c1 , c2",
      "code": "int a1 , a2 , b1 , b2 , c1 , c2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read a1 , a2 , b1 , b2 , c1 , c2",
      "code": "cin >> a1 >> a2 >> b1 >> b2 >> c1 >> c2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if n is greater than a1 + b1 + c1 then do the following",
      "code": "if ( n > a1 + b1 + c1 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "subtract a1 + b1 + c1 from n",
      "code": "n -= a1 + b1 + c1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if n is greater than a2 - a1 then do the following",
      "code": "if ( n > a2 - a1 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "subtract a2 - a1 from n",
      "code": "n -= a2 - a1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if n is greater than b2 - b1 then do the following",
      "code": "if ( n > b2 - b1 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "subtract b2 - b1 from n",
      "code": "n -= b2 - b1 ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "if n is greater than c2 - c1 then do the following",
      "code": "if ( n > c2 - c1 )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "output a2 and b2 and c2",
      "code": "cout << a2 << \" \" << b2 << \" \" << c2 << endl ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 15,
      "text": "output a2 and b2 and n + c1",
      "code": "cout << a2 << \" \" << b2 << \" \" << n + c1 << endl ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "output a2 and n + b1 and c1",
      "code": "cout << a2 << \" \" << n + b1 << \" \" << c1 << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "output n + a1 and b1 and c1",
      "code": "cout << n + a1 << \" \" << b1 << \" \" << c1 << endl ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if n is greater than a1 then do the following",
      "code": "if ( n > a1 )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "subtract a1 from n",
      "code": "n -= a1 ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "if n is greater than b1 then do the following",
      "code": "if ( n > b1 )",
      "indent": 3
    },
    {
      "line": 27,
      "text": "subtract b1 from n",
      "code": "n -= b1 ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "output a1 and b1 and n",
      "code": "cout << a1 << \" \" << b1 << \" \" << n << endl ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 31,
      "text": "output a1 and n",
      "code": "cout << a1 << \" \" << n << \" \"",
      "indent": 3
    },
    {
      "line": 32,
      "text": "output 0",
      "code": "<< \" 0 \" << endl ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "output n",
      "code": "cout << n << \" \"",
      "indent": 2
    },
    {
      "line": 36,
      "text": "print 0",
      "code": "<< \" 0 \"",
      "indent": 3
    },
    {
      "line": 37,
      "text": "print space",
      "code": "<< \" \"",
      "indent": 3
    },
    {
      "line": 38,
      "text": "print 0 and a new line",
      "code": "<< \" 0 \" << endl ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "cout << n << endl ;"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "cout << 0 << endl ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 37,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "cout << 0 << endl ;"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 41,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "cout << \" a1 \" << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "cout << n << \" \\n \" ;"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "cout << \" space \" << endl ;"
      ],
      "err_line": 37,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        31
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        32
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        32,
        35
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << n << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        32,
        36
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        32,
        37
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        32,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        35
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << n << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        35,
        36
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        35,
        37
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << n << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        35,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        36
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        36,
        37
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        36,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        37
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        37,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        31,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        32
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        32,
        35
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;",
        "cout << n << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        32,
        35,
        36
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        32,
        35,
        37
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;",
        "cout << n << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        32,
        35,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        32,
        36
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        32,
        36,
        37
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        32,
        36,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        32,
        37
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        32,
        37,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        32,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        35
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << n << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        35,
        36
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        35,
        36,
        37
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << n << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        35,
        36,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << n << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        35,
        37
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << n << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        35,
        37,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << n << endl ;",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        35,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        36
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        36,
        37
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        36,
        37,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        36,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        37
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        37,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        38
      ],
      "mod_code": [
        "while ( n > a1 + b1 + c1 )",
        "cout << 0 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        31,
        32,
        35
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << n << endl ;"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        32,
        35,
        36
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 37,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        32,
        35,
        37
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << n << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        32,
        35,
        38
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        32,
        36
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        31,
        32,
        36,
        37
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        31,
        32,
        36,
        38
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        31,
        32,
        37
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 37,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        31,
        32,
        37,
        38
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 37,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        31,
        32,
        38
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        31,
        35
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << n << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        35,
        36
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        35,
        36,
        37
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        35,
        36,
        38
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        35,
        37
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << n << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        35,
        37,
        38
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << n << endl ;",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        35,
        38
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        36
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        36,
        37
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        36,
        37,
        38
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        36,
        38
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        37
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        37,
        38
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        31,
        38
      ],
      "mod_code": [
        "cout << a1 << \" \" << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        32,
        35
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << n << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        32,
        35,
        36
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        32,
        35,
        36,
        37
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        32,
        35,
        36,
        38
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        32,
        35,
        37
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << n << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        32,
        35,
        37,
        38
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << n << endl ;",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        32,
        35,
        38
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        32,
        36
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        32,
        36,
        37
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        32,
        36,
        37,
        38
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        32,
        36,
        38
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        32,
        37
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        32,
        37,
        38
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        32,
        38
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        35,
        36
      ],
      "mod_code": [
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 37,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        35,
        36,
        37
      ],
      "mod_code": [
        "cout << n << endl ;",
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        35,
        36,
        38
      ],
      "mod_code": [
        "cout << n << endl ;",
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 37,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        35,
        37
      ],
      "mod_code": [
        "cout << n << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        35,
        37,
        38
      ],
      "mod_code": [
        "cout << n << endl ;",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        35,
        38
      ],
      "mod_code": [
        "cout << n << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        36,
        37
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        36,
        37,
        38
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        36,
        38
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        37,
        38
      ],
      "mod_code": [
        "cout << \" \" << \" \\n \" ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 37,
      "err_msg": "expected ‘;’ before ‘cout’"
    }
  ]
}