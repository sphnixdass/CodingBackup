{
  "meta": {
    "index": 1513,
    "hitid": "39AYGO6AFFE3ACD0UZXRB5T66ZL6NV",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1097A",
    "subid": "48852918"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers i , j , k and l with k = 0",
      "code": "int i , j , k = 0 , l ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare vector of strings called vec",
      "code": "vector < string > vec ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i from 0 to 5 exclusive",
      "code": "for ( i = 0 ; i < 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create string s1",
      "code": "string s1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "read input to s1",
      "code": "cin >> s1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s1 [ 0 ] = s [ 0 ] or s1 [ 1 ] = s [ 1 ] , increment k by one",
      "code": "if ( s1 [ 0 ] == s [ 0 ] || s1 [ 1 ] == s [ 1 ] ) k ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if k is greater than 0",
      "code": "if ( k > 0 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool s ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s1 >> s1 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        12,
        7
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "do",
        "s1 >> s1 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        12,
        7,
        10
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "do",
        "s1 >> s1 ;",
        "if ( k >= 0 )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        12,
        7,
        6
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "do",
        "s1 >> s1 ;",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        7,
        4
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "do",
        "s1 >> s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        12,
        10
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "do",
        "if ( k >= 0 )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        12,
        10,
        6
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "do",
        "if ( k >= 0 )",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        10,
        4
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "do",
        "if ( k >= 0 )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        12,
        6
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "do",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        6,
        4
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "do",
        "bool s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        12,
        4
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "s1 >> s1 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        7,
        10
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "s1 >> s1 ;",
        "if ( k >= 0 )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        6
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "s1 >> s1 ;",
        "if ( k >= 0 )",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        4
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "s1 >> s1 ;",
        "if ( k >= 0 )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        7,
        6
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "s1 >> s1 ;",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        7,
        6,
        4
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "s1 >> s1 ;",
        "bool s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        7,
        4
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "s1 >> s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        10,
        6
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "if ( k >= 0 )",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        6,
        4
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "if ( k >= 0 )",
        "bool s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        10,
        4
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "if ( k >= 0 )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        4
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "bool s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int i , j , k , l = 0 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "do",
        "s1 >> s1 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        7,
        10
      ],
      "mod_code": [
        "do",
        "s1 >> s1 ;",
        "if ( k >= 0 )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        7,
        10,
        6
      ],
      "mod_code": [
        "do",
        "s1 >> s1 ;",
        "if ( k >= 0 )",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        7,
        10,
        4
      ],
      "mod_code": [
        "do",
        "s1 >> s1 ;",
        "if ( k >= 0 )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        7,
        6
      ],
      "mod_code": [
        "do",
        "s1 >> s1 ;",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        7,
        6,
        4
      ],
      "mod_code": [
        "do",
        "s1 >> s1 ;",
        "bool s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        7,
        4
      ],
      "mod_code": [
        "do",
        "s1 >> s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "do",
        "if ( k >= 0 )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        12,
        10,
        6
      ],
      "mod_code": [
        "do",
        "if ( k >= 0 )",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        10,
        6,
        4
      ],
      "mod_code": [
        "do",
        "if ( k >= 0 )",
        "bool s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        10,
        4
      ],
      "mod_code": [
        "do",
        "if ( k >= 0 )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "do",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        6,
        4
      ],
      "mod_code": [
        "do",
        "bool s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "do",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "s1 >> s1 ;",
        "if ( k >= 0 )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        10,
        6
      ],
      "mod_code": [
        "s1 >> s1 ;",
        "if ( k >= 0 )",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        10,
        6,
        4
      ],
      "mod_code": [
        "s1 >> s1 ;",
        "if ( k >= 0 )",
        "bool s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        10,
        4
      ],
      "mod_code": [
        "s1 >> s1 ;",
        "if ( k >= 0 )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "s1 >> s1 ;",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        6,
        4
      ],
      "mod_code": [
        "s1 >> s1 ;",
        "bool s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "s1 >> s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "if ( k >= 0 )",
        "bool s1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        6,
        4
      ],
      "mod_code": [
        "if ( k >= 0 )",
        "bool s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "if ( k >= 0 )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "bool s1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}