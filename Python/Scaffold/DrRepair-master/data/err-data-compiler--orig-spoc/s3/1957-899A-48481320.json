{
  "meta": {
    "index": 1957,
    "hitid": "3JMNNNO3B1Y5F53DZYCBHBPLIJUW2R",
    "workerid": "A1AYVATMT88U1W",
    "probid": "899A",
    "subid": "48481320"
  },
  "lines": [
    {
      "line": 0,
      "text": "br = array of integers of length 3",
      "code": "int br [ 3 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let n , k , cnt be integers with cnt is equal to 0",
      "code": "int n , k , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read k",
      "code": "cin >> k ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increase the value of br [ k ] by 1",
      "code": "br [ k ] ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if ( 1st element of array br is greater than 2nd element of array br )",
      "code": "if ( br [ 1 ] > br [ 2 ] )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "the value of cnt is equal to cnt + 2nd element of array br",
      "code": "cnt += br [ 2 ] ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "the value of 1st element of array br is equal to ( the value of 1st element of array br ) - ( the value of 2nd element of array br )",
      "code": "br [ 1 ] -= br [ 2 ] ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if ( the value of 1st element of array br is greater than 2 ) , the value of cnt is equal to ( cnt + the value of 1st element of array br / 3 )",
      "code": "if ( br [ 1 ] > 2 ) { cnt += br [ 1 ] / 3 ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "the value of cnt is equal to minimum of ( 1st element of array br , 2nd element of array br )",
      "code": "cnt = min ( br [ 1 ] , br [ 2 ] ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print cnt and newline",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘begin’ in ‘br’, which is of non-class type ‘int [3]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( br [ j ] > br [ 0 ] )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cnt += br [ br ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int [3][int [3]]’ for array subscript"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "br [ 1 ] = ( br . front ( ) , br . 2nd ( ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cnt = min ( br [ 0 ] , br [ br ] ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int [3][int [3]]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        9,
        10
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "cnt += br [ 0 ] ;",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        8,
        9,
        10,
        11
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "cnt += br [ 0 ] ;",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        8,
        9,
        10,
        13
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "cnt += br [ 0 ] ;",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        8,
        9,
        10,
        11
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "cnt += br [ 0 ] ;",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        8,
        9,
        11
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "cnt += br [ 0 ] ;",
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9,
        11,
        13
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "cnt += br [ 0 ] ;",
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9,
        13
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "cnt += br [ 0 ] ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘begin’ in ‘br’, which is of non-class type ‘int [3]’"
    },
    {
      "mod_line": [
        8,
        9,
        13,
        11
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "cnt += br [ 0 ] ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        11
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "cnt += br [ 0 ] ;",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        8,
        10,
        11
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        8,
        10,
        11,
        13
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        8,
        10,
        13
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        8,
        10,
        13,
        11
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        8,
        10,
        11
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        11,
        13
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘begin’ in ‘br’, which is of non-class type ‘int [3]’"
    },
    {
      "mod_line": [
        8,
        13,
        11
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "if ( br [ 0 ] > br [ 0 ] )",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "cnt += br [ 0 ] ;",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        9,
        10,
        11
      ],
      "mod_code": [
        "cnt += br [ 0 ] ;",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        9,
        10,
        11,
        13
      ],
      "mod_code": [
        "cnt += br [ 0 ] ;",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        9,
        10,
        13
      ],
      "mod_code": [
        "cnt += br [ 0 ] ;",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        9,
        10,
        13,
        11
      ],
      "mod_code": [
        "cnt += br [ 0 ] ;",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        9,
        10,
        11
      ],
      "mod_code": [
        "cnt += br [ 0 ] ;",
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "cnt += br [ 0 ] ;",
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        13
      ],
      "mod_code": [
        "cnt += br [ 0 ] ;",
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "cnt += br [ 0 ] ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘begin’ in ‘br’, which is of non-class type ‘int [3]’"
    },
    {
      "mod_line": [
        9,
        13,
        11
      ],
      "mod_code": [
        "cnt += br [ 0 ] ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "cnt += br [ 0 ] ;",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        10,
        11,
        13
      ],
      "mod_code": [
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        10,
        13,
        11
      ],
      "mod_code": [
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "br [ 1 ] = ( br . element ( ) , br . 2nd ( ) ) ;",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid suffix \"nd\" on integer constant"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "if ( br [ j ] > 2 ) cnt = ( cnt + br ) ;",
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        11
      ],
      "mod_code": [
        "cnt = min ( br . begin ( ) , br . minimum ( ) ) ;",
        "if ( br [ i ] > 2 ) cnt = ( cnt + br ) ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}