{
  "meta": {
    "index": 453,
    "hitid": "37SQU136V7I5PJ5EJ6NCJ2PMU0711G",
    "workerid": "A1APYLD4DUK33J",
    "probid": "734A",
    "subid": "48566590"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare cmp with integers a , b as arguments , returning boolean",
      "code": "bool cmp ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return a is less than b",
      "code": "return a < b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create character array s with size 100003",
      "code": "char s [ 100003 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while read n is true",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "create integer sum_A with sum_A = 0",
      "code": "int sum_A = 0 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "create integer sum_D with sum_D = 0",
      "code": "int sum_D = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if s [ i ] is ' A '",
      "code": "if ( s [ i ] == ' A ' )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increment sum_A",
      "code": "sum_A ++ ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increment sum_D",
      "code": "sum_D ++ ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if sum_A is greater than sum_D",
      "code": "if ( sum_A > sum_D )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print \" Anton \" print newline",
      "code": "cout << \" Anton \" << endl ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else if sum_A is less than sum_D",
      "code": "else if ( sum_A < sum_D )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print \" Danik \" print newline",
      "code": "cout << \" Danik \" << endl ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print \" Friendship \" print newline",
      "code": "cout << \" Friendship \" << endl ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char s [ 100003 ] [ 100003 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [100003][100003]’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        11,
        18,
        7
      ],
      "mod_code": [
        "while ( n ++ )",
        "if ( ! s [ i ] )",
        "else if ( sum_A <= sum_D )",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        11,
        18,
        20
      ],
      "mod_code": [
        "while ( n ++ )",
        "if ( ! s [ i ] )",
        "else if ( sum_A <= sum_D )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        11,
        7
      ],
      "mod_code": [
        "while ( n ++ )",
        "if ( ! s [ i ] )",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        11,
        7,
        20
      ],
      "mod_code": [
        "while ( n ++ )",
        "if ( ! s [ i ] )",
        "s >> s ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        11,
        7,
        16
      ],
      "mod_code": [
        "while ( n ++ )",
        "if ( ! s [ i ] )",
        "s >> s ;",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        11,
        20
      ],
      "mod_code": [
        "while ( n ++ )",
        "if ( ! s [ i ] )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        11,
        20,
        16
      ],
      "mod_code": [
        "while ( n ++ )",
        "if ( ! s [ i ] )",
        "do",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        18,
        7
      ],
      "mod_code": [
        "while ( n ++ )",
        "else if ( sum_A <= sum_D )",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        18,
        7,
        20
      ],
      "mod_code": [
        "while ( n ++ )",
        "else if ( sum_A <= sum_D )",
        "s >> s ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        18,
        7,
        16
      ],
      "mod_code": [
        "while ( n ++ )",
        "else if ( sum_A <= sum_D )",
        "s >> s ;",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        18,
        20
      ],
      "mod_code": [
        "while ( n ++ )",
        "else if ( sum_A <= sum_D )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        18,
        20,
        16
      ],
      "mod_code": [
        "while ( n ++ )",
        "else if ( sum_A <= sum_D )",
        "do",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "while ( n ++ )",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        7,
        20
      ],
      "mod_code": [
        "while ( n ++ )",
        "s >> s ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        7,
        20,
        16
      ],
      "mod_code": [
        "while ( n ++ )",
        "s >> s ;",
        "do",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        7,
        16
      ],
      "mod_code": [
        "while ( n ++ )",
        "s >> s ;",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        20
      ],
      "mod_code": [
        "while ( n ++ )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        20,
        16
      ],
      "mod_code": [
        "while ( n ++ )",
        "do",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        18,
        7
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "else if ( sum_A <= sum_D )",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        18,
        7,
        20
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "else if ( sum_A <= sum_D )",
        "s >> s ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        18,
        7,
        16
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "else if ( sum_A <= sum_D )",
        "s >> s ;",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        18,
        20
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "else if ( sum_A <= sum_D )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        18,
        20,
        16
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "else if ( sum_A <= sum_D )",
        "do",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        7,
        20
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "s >> s ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        7,
        20,
        16
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "s >> s ;",
        "do",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        7,
        16
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "s >> s ;",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        20
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        20,
        16
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "do",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        7
      ],
      "mod_code": [
        "else if ( sum_A <= sum_D )",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        7,
        20
      ],
      "mod_code": [
        "else if ( sum_A <= sum_D )",
        "s >> s ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        7,
        20,
        16
      ],
      "mod_code": [
        "else if ( sum_A <= sum_D )",
        "s >> s ;",
        "do",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        7,
        16
      ],
      "mod_code": [
        "else if ( sum_A <= sum_D )",
        "s >> s ;",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        20
      ],
      "mod_code": [
        "else if ( sum_A <= sum_D )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        20,
        16
      ],
      "mod_code": [
        "else if ( sum_A <= sum_D )",
        "do",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        20
      ],
      "mod_code": [
        "s >> s ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        20,
        16
      ],
      "mod_code": [
        "s >> s ;",
        "do",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "s >> s ;",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘char [100003]’ and ‘char [100003]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        20,
        16
      ],
      "mod_code": [
        "do",
        "if ( sum_A >= sum_D )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}