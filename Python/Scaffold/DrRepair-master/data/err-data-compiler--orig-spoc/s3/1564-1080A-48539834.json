{
  "meta": {
    "index": 1564,
    "hitid": "341H3G5YF082DQ54VYS4XRQO3ABZ08",
    "workerid": "A1AYVATMT88U1W",
    "probid": "1080A",
    "subid": "48539834"
  },
  "lines": [
    {
      "line": 0,
      "text": "let n , k be long integers",
      "code": "long long n , k ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read n , k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let ans be a long integer with ans = 0LL",
      "code": "long long ans = 0LL ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "ans is equal to ( n * 2LL ) / k + ( n * 2LL modulo k is not equal to 0 )",
      "code": "ans = ( n * 2LL ) / k + ( n * 2LL % k != 0 ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "increment ans by ( n * 5LL ) / k + ( n * 5LL modulo k is not equal to 0 )",
      "code": "ans += ( n * 5LL ) / k + ( n * 5LL % k != 0 ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "increment ans by ( n * 8LL ) / k + ( n * 8LL modulo k is not equal to 0 )",
      "code": "ans += ( n * 8LL ) / k + ( n * 8LL % k != 0 ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print ans and newline",
      "code": "cout << ans << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "ans = ( n * 2LL ) / k + ( n * 2LL % k is k ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "ans = ( n * 2LL ) / k + ( n * 2LL % k is k ) ;",
        "ans += ( n * 8LL ) / k + ( n * 8LL % k ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        4,
        6,
        2
      ],
      "mod_code": [
        "ans = ( n * 2LL ) / k + ( n * 2LL % k is k ) ;",
        "ans += ( n * 8LL ) / k + ( n * 8LL % k ) ;",
        "cin >> n , k ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        4,
        6,
        2,
        5
      ],
      "mod_code": [
        "ans = ( n * 2LL ) / k + ( n * 2LL % k is k ) ;",
        "ans += ( n * 8LL ) / k + ( n * 8LL % k ) ;",
        "cin >> n , k ;",
        "ans += ( n * 5LL ) / k + ( n * 5LL % k ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        4,
        6,
        5
      ],
      "mod_code": [
        "ans = ( n * 2LL ) / k + ( n * 2LL % k is k ) ;",
        "ans += ( n * 8LL ) / k + ( n * 8LL % k ) ;",
        "ans += ( n * 5LL ) / k + ( n * 5LL % k ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "ans = ( n * 2LL ) / k + ( n * 2LL % k is k ) ;",
        "cin >> n , k ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        4,
        2,
        5
      ],
      "mod_code": [
        "ans = ( n * 2LL ) / k + ( n * 2LL % k is k ) ;",
        "cin >> n , k ;",
        "ans += ( n * 5LL ) / k + ( n * 5LL % k ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "ans = ( n * 2LL ) / k + ( n * 2LL % k is k ) ;",
        "ans += ( n * 5LL ) / k + ( n * 5LL % k ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    }
  ]
}