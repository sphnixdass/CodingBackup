{
  "meta": {
    "index": 2560,
    "hitid": "37G6BXQPLQFSQOJ7G986RNGOS82EQH",
    "workerid": "A1AYVATMT88U1W",
    "probid": "747A",
    "subid": "46665151"
  },
  "lines": [
    {
      "line": 0,
      "text": "let isPerfectSquare be a function that accepts long double x and returns a boolean value",
      "code": "bool isPerfectSquare ( long double x )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let long double value of sr = square root of x",
      "code": "long double sr = sqrt ( x ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return the value of ( ( sr - floor ( sr ) ) is equal to 0 )",
      "code": "return ( ( sr - floor ( sr ) ) == 0 ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let floorSqrt be a function that accepts integer x and returns a integer value",
      "code": "int floorSqrt ( int x )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "if x is equal to 0 or x is equal to 1 , return the value of x",
      "code": "if ( x == 0 || x == 1 ) return x ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let i , result be integers with i = 1 , result = 1",
      "code": "int i = 1 , result = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while result < = x",
      "code": "while ( result <= x )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "increment i by 1",
      "code": "i ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "result is equal to i * i",
      "code": "result = i * i ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return the value of i - 1",
      "code": "return i - 1 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 14,
      "text": "let n be a long integer",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if n is equal to 1",
      "code": "if ( n == 1 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print 1 1 and newline",
      "code": "cout << \" 1 1 \" << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if isPerfectSquare ( n ) is true",
      "code": "if ( isPerfectSquare ( n ) )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "let long integer value of foo = floorSqrt ( n )",
      "code": "long long foo = floorSqrt ( n ) ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print foo and ' ' and foo and newline",
      "code": "cout << foo << ' ' << foo << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "let long integer value of start = floorSqrt ( n )",
      "code": "long long start = floorSqrt ( n ) ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "while start * ( n / start ) is not equal to n , decrement start by 1",
      "code": "while ( start * ( n / start ) != n ) { -- start ; }",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print start and ' ' and n / start and newline",
      "code": "cout << start << ' ' << n / start << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int floorSqrt ( returns )"
      ],
      "err_line": 4,
      "err_msg": "‘returns’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int i , result = 1 , result ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int result’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 15,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        22
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cout << foo << \" \" << foo << \" \\n ' ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        22,
        6
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "int i , result = 1 , result ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        22,
        6,
        15
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "int i , result = 1 , result ;",
        "cin >> N ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        22,
        6,
        2
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "int i , result = 1 , result ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        22,
        6,
        4
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "int i , result = 1 , result ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        22,
        15
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "cin >> N ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        22,
        15,
        2
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "cin >> N ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        22,
        15,
        4
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "cin >> N ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        22,
        2
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        22,
        2,
        4
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        22,
        4
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "int i , result = 1 , result ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int result’"
    },
    {
      "mod_line": [
        7,
        6,
        15
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "int i , result = 1 , result ;",
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int result’"
    },
    {
      "mod_line": [
        7,
        6,
        15,
        2
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "int i , result = 1 , result ;",
        "cin >> N ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        6,
        15,
        4
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "int i , result = 1 , result ;",
        "cin >> N ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 4,
      "err_msg": "‘returns’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6,
        2
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "int i , result = 1 , result ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        6,
        2,
        4
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "int i , result = 1 , result ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        6,
        4
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "int i , result = 1 , result ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 4,
      "err_msg": "‘returns’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cin >> N ;"
      ],
      "err_line": 15,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        15,
        2
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cin >> N ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        15,
        2,
        4
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cin >> N ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        15,
        4
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "cin >> N ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 4,
      "err_msg": "‘returns’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        2,
        4
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "while ( result <= x ) ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 4,
      "err_msg": "‘returns’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        6
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "int i , result = 1 , result ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        6,
        15
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "int i , result = 1 , result ;",
        "cin >> N ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        6,
        15,
        2
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "int i , result = 1 , result ;",
        "cin >> N ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        6,
        15,
        4
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "int i , result = 1 , result ;",
        "cin >> N ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        6,
        2
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "int i , result = 1 , result ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        6,
        2,
        4
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "int i , result = 1 , result ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        6,
        4
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "int i , result = 1 , result ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        15
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "cin >> N ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        15,
        2
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "cin >> N ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        15,
        2,
        4
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "cin >> N ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        15,
        4
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "cin >> N ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        2
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        2,
        4
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        4
      ],
      "mod_code": [
        "cout << foo << \" \" << foo << \" \\n ' ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "int i , result = 1 , result ;",
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int result’"
    },
    {
      "mod_line": [
        6,
        15,
        2
      ],
      "mod_code": [
        "int i , result = 1 , result ;",
        "cin >> N ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        15,
        2,
        4
      ],
      "mod_code": [
        "int i , result = 1 , result ;",
        "cin >> N ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        15,
        4
      ],
      "mod_code": [
        "int i , result = 1 , result ;",
        "cin >> N ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 4,
      "err_msg": "‘returns’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "int i , result = 1 , result ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        2,
        4
      ],
      "mod_code": [
        "int i , result = 1 , result ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "int i , result = 1 , result ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 4,
      "err_msg": "‘returns’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "cin >> N ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        15,
        2,
        4
      ],
      "mod_code": [
        "cin >> N ;",
        "return ( sr - floor ( sr ) ) == 0 ) ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "cin >> N ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 4,
      "err_msg": "‘returns’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "return ( sr - floor ( sr ) ) == 0 ) ;",
        "int floorSqrt ( returns )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}