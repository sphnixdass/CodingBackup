{
  "meta": {
    "index": 1523,
    "hitid": "3D17ECOUOEP1ZMJT6A1V7V4JT7E13C",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1097A",
    "subid": "48919601"
  },
  "lines": [
    {
      "line": 0,
      "text": "function gcd with int arguments a and b that returns integer",
      "code": "int gcd ( int a , int b ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare string variable n",
      "code": "string n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare strings a , b , c , d and e",
      "code": "string a , b , c , d , e ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n , a and b",
      "code": "cin >> n >> a >> b ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read c , d and e",
      "code": "cin >> c >> d >> e ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if n [ 0 ] = a [ 0 ] or n [ 1 ] = a [ 1 ]",
      "code": "if ( n [ 0 ] == a [ 0 ] || n [ 1 ] == a [ 1 ] )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if n [ 0 ] = b [ 0 ] or n [ 1 ] = b [ 1 ]",
      "code": "if ( n [ 0 ] == b [ 0 ] || n [ 1 ] == b [ 1 ] )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if n [ 0 ] = c [ 0 ] or n [ 1 ] = c [ 1 ]",
      "code": "if ( n [ 0 ] == c [ 0 ] || n [ 1 ] == c [ 1 ] )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if n [ 0 ] = d [ 0 ] or n [ 1 ] = d [ 1 ]",
      "code": "if ( n [ 0 ] == d [ 0 ] || n [ 1 ] == d [ 1 ] )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if n [ 0 ] = e [ 0 ] or n [ 1 ] = e [ 1 ]",
      "code": "if ( n [ 0 ] == e [ 0 ] || n [ 1 ] == e [ 1 ] )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 29,
      "text": "function gcd with int arguments a and b that returns integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 30,
      "text": "if b is equal to 0",
      "code": "if ( b == 0 )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "return a",
      "code": "return a ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 33,
      "text": "return gcd ( b , a % b )",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int a , const int b )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "float a , b , c , d , e ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘float[int]’ for array subscript"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 35,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        32
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        32,
        22
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "do",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        32,
        22,
        33
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "do",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        32,
        22,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "do",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "float a , b , c , d , e ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        32,
        33
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "do",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        32,
        33,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "do",
        "return gcd ( b , a % b ) ) ;",
        "float a , b , c , d , e ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        32,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "do",
        "float a , b , c , d , e ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        22,
        33
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        22,
        33,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "return gcd ( b , a % b ) ) ;",
        "float a , b , c , d , e ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        22,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "float a , b , c , d , e ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        33
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        33,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "return gcd ( b , a % b ) ) ;",
        "float a , b , c , d , e ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b )",
        "float a , b , c , d , e ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        32,
        22
      ],
      "mod_code": [
        "do",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        32,
        22,
        33
      ],
      "mod_code": [
        "do",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        32,
        22,
        33,
        3
      ],
      "mod_code": [
        "do",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "return gcd ( b , a % b ) ) ;",
        "float a , b , c , d , e ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        32,
        22,
        33,
        0
      ],
      "mod_code": [
        "do",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "return gcd ( b , a % b ) ) ;",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        32,
        22,
        3
      ],
      "mod_code": [
        "do",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "float a , b , c , d , e ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        32,
        22,
        3,
        0
      ],
      "mod_code": [
        "do",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "float a , b , c , d , e ;",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        32,
        22,
        0
      ],
      "mod_code": [
        "do",
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        32,
        33
      ],
      "mod_code": [
        "do",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        33,
        3
      ],
      "mod_code": [
        "do",
        "return gcd ( b , a % b ) ) ;",
        "float a , b , c , d , e ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘float[int]’ for array subscript"
    },
    {
      "mod_line": [
        32,
        33,
        3,
        0
      ],
      "mod_code": [
        "do",
        "return gcd ( b , a % b ) ) ;",
        "float a , b , c , d , e ;",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        32,
        33,
        0
      ],
      "mod_code": [
        "do",
        "return gcd ( b , a % b ) ) ;",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        32,
        3
      ],
      "mod_code": [
        "do",
        "float a , b , c , d , e ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘float[int]’ for array subscript"
    },
    {
      "mod_line": [
        32,
        3,
        0
      ],
      "mod_code": [
        "do",
        "float a , b , c , d , e ;",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        32,
        0
      ],
      "mod_code": [
        "do",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        22,
        33
      ],
      "mod_code": [
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        33,
        3
      ],
      "mod_code": [
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "return gcd ( b , a % b ) ) ;",
        "float a , b , c , d , e ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        33,
        3,
        0
      ],
      "mod_code": [
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "return gcd ( b , a % b ) ) ;",
        "float a , b , c , d , e ;",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        33,
        0
      ],
      "mod_code": [
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "return gcd ( b , a % b ) ) ;",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        3
      ],
      "mod_code": [
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "float a , b , c , d , e ;"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        3,
        0
      ],
      "mod_code": [
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "float a , b , c , d , e ;",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22,
        0
      ],
      "mod_code": [
        "if ( n [ 0 ] == \" [ 0 ] || n [ 1 ] == e [ 1 ] )",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 22,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        33,
        3
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "float a , b , c , d , e ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘float[int]’ for array subscript"
    },
    {
      "mod_line": [
        33,
        3,
        0
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "float a , b , c , d , e ;",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        33,
        0
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "float a , b , c , d , e ;",
        "int gcd ( int a , const int b )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    }
  ]
}