{
  "meta": {
    "index": 2661,
    "hitid": "372AGES0I4Z18PPOOTNYK2B040HRX6",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "785A",
    "subid": "49053044"
  },
  "lines": [
    {
      "line": 0,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "sum = integer with 0",
      "code": "int sum = 0 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "Read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "Read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if s is equal to Tetrahedron",
      "code": "if ( s == \" Tetrahedron \" )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set sum to sum + 4",
      "code": "sum += 4 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if s is equal to Cube",
      "code": "else if ( s == \" Cube \" )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set sum to sum + 6",
      "code": "sum += 6 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if s is equal to Octahedron",
      "code": "else if ( s == \" Octahedron \" )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set sum to sum + 8",
      "code": "sum += 8 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if s is equal to Dodecahedron",
      "code": "else if ( s == \" Dodecahedron \" )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set sum to sum + 12",
      "code": "sum += 12 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if s is equal to Icosahedron",
      "code": "else if ( s == \" Icosahedron \" )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set sum to sum + 20",
      "code": "sum += 20 ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print sum and a new line",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( s == Tetrahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( s == Cube )"
      ],
      "err_line": 9,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( s == Octahedron )"
      ],
      "err_line": 11,
      "err_msg": "‘Octahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( s == Dodecahedron )"
      ],
      "err_line": 13,
      "err_msg": "‘Dodecahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( s == Icosahedron )"
      ],
      "err_line": 15,
      "err_msg": "‘Icosahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( s == ' Tetrahedron ' )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( s == ' Cube ' )"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( s == ' Octahedron ' )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( s == ' Dodecahedron ' )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( s == ' Icosahedron ' )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Cube )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        11
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Cube )",
        "if ( s == Octahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        13
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Cube )",
        "if ( s == Octahedron )",
        "if ( s == Dodecahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Cube )",
        "if ( s == Octahedron )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        3
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Cube )",
        "if ( s == Octahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        13
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Cube )",
        "if ( s == Dodecahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        13,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Cube )",
        "if ( s == Dodecahedron )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        13,
        3
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Cube )",
        "if ( s == Dodecahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Cube )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        15,
        3
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Cube )",
        "if ( s == Icosahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        3
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Cube )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Octahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11,
        13
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Octahedron )",
        "if ( s == Dodecahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11,
        13,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Octahedron )",
        "if ( s == Dodecahedron )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11,
        13,
        3
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Octahedron )",
        "if ( s == Dodecahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Octahedron )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11,
        15,
        3
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Octahedron )",
        "if ( s == Icosahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11,
        3
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Octahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Dodecahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        13,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Dodecahedron )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        13,
        15,
        3
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Dodecahedron )",
        "if ( s == Icosahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        13,
        3
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Dodecahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 7,
      "err_msg": "‘Tetrahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        15,
        3
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "if ( s == Icosahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "if ( s == Tetrahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "if ( s == Cube )",
        "if ( s == Octahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        13
      ],
      "mod_code": [
        "if ( s == Cube )",
        "if ( s == Octahedron )",
        "if ( s == Dodecahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        13,
        15
      ],
      "mod_code": [
        "if ( s == Cube )",
        "if ( s == Octahedron )",
        "if ( s == Dodecahedron )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        13,
        3
      ],
      "mod_code": [
        "if ( s == Cube )",
        "if ( s == Octahedron )",
        "if ( s == Dodecahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11,
        15
      ],
      "mod_code": [
        "if ( s == Cube )",
        "if ( s == Octahedron )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        15,
        3
      ],
      "mod_code": [
        "if ( s == Cube )",
        "if ( s == Octahedron )",
        "if ( s == Icosahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11,
        3
      ],
      "mod_code": [
        "if ( s == Cube )",
        "if ( s == Octahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "if ( s == Cube )",
        "if ( s == Dodecahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        15
      ],
      "mod_code": [
        "if ( s == Cube )",
        "if ( s == Dodecahedron )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        15,
        3
      ],
      "mod_code": [
        "if ( s == Cube )",
        "if ( s == Dodecahedron )",
        "if ( s == Icosahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        3
      ],
      "mod_code": [
        "if ( s == Cube )",
        "if ( s == Dodecahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "if ( s == Cube )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 9,
      "err_msg": "‘Cube’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        3
      ],
      "mod_code": [
        "if ( s == Cube )",
        "if ( s == Icosahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "if ( s == Cube )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "if ( s == Octahedron )",
        "if ( s == Dodecahedron )"
      ],
      "err_line": 11,
      "err_msg": "‘Octahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        15
      ],
      "mod_code": [
        "if ( s == Octahedron )",
        "if ( s == Dodecahedron )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 11,
      "err_msg": "‘Octahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        15,
        3
      ],
      "mod_code": [
        "if ( s == Octahedron )",
        "if ( s == Dodecahedron )",
        "if ( s == Icosahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        13,
        3
      ],
      "mod_code": [
        "if ( s == Octahedron )",
        "if ( s == Dodecahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "if ( s == Octahedron )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 11,
      "err_msg": "‘Octahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        15,
        3
      ],
      "mod_code": [
        "if ( s == Octahedron )",
        "if ( s == Icosahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "if ( s == Octahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "if ( s == Dodecahedron )",
        "if ( s == Icosahedron )"
      ],
      "err_line": 13,
      "err_msg": "‘Dodecahedron’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        3
      ],
      "mod_code": [
        "if ( s == Dodecahedron )",
        "if ( s == Icosahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "if ( s == Dodecahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        3
      ],
      "mod_code": [
        "if ( s == Icosahedron )",
        "gets ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    }
  ]
}