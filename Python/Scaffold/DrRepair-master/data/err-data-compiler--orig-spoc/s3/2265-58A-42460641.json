{
  "meta": {
    "index": 2265,
    "hitid": "341H3G5YF082DQ54VYS4XRQO3AFZ0C",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "58A",
    "subid": "42460641"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s , t = string",
      "code": "string s , t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "i , j , k , banyak = int",
      "code": "int i , j , k , banyak ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "t = \" hello \"",
      "code": "t = \" hello \" ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "i = 0",
      "code": "i = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "k = 0",
      "code": "k = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while k < length of t and i < length of s",
      "code": "while ( ( k < t . length ( ) ) && ( i < s . length ( ) ) )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s [ i ] is t [ k ]",
      "code": "if ( s [ i ] == t [ k ] )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "j = i",
      "code": "j = i ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if s [ i ] is ' 1 ' and k is 2 banyak = 0",
      "code": "if ( ( s [ i ] == ' l ' ) && ( k == 2 ) ) { banyak = 0 ; }",
      "indent": 3
    },
    {
      "line": 11,
      "text": "while s [ j ] is s [ i ]",
      "code": "while ( s [ j ] == s [ i ] )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "if s [ i ] is ' 1 ' and k is 2 increment banyak",
      "code": "if ( ( s [ i ] == ' l ' ) && ( k == 2 ) ) { banyak ++ ; }",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if s [ i ] is ' 1 ' and k is 2 and banyak > = 2",
      "code": "if ( ( s [ i ] == ' l ' ) && ( k == 2 ) && ( ( banyak >= 2 ) ) )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "add 2 to k",
      "code": "k += 2 ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 18,
      "text": "increment k",
      "code": "k ++ ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "i = j",
      "code": "i = j ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 22,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if k is length of t",
      "code": "if ( k == t . length ( ) )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print YES",
      "code": "cout << \" YES \" ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print NO",
      "code": "cout << \" NO \" ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s , t ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int t = \" hello \" ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int i = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int k = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘i’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 30,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        13,
        15,
        26,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 ) banyak ++ ;",
        "if ( s [ i ] == ' 1 ' && k == 2 && banyak >= 2 )",
        "cout << \" YES \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        15,
        28,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 ) banyak ++ ;",
        "if ( s [ i ] == ' 1 ' && k == 2 && banyak >= 2 )",
        "cout << \" NO \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        15,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 ) banyak ++ ;",
        "if ( s [ i ] == ' 1 ' && k == 2 && banyak >= 2 )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        26,
        28,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 ) banyak ++ ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        26,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 ) banyak ++ ;",
        "cout << \" YES \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        28,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 ) banyak ++ ;",
        "cout << \" NO \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 ) banyak ++ ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        26,
        28,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 && banyak >= 2 )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        26,
        13,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 && banyak >= 2 )",
        "cout << \" YES \" << endl ;",
        "if ( s [ i ] == ' 1 ' && k == 2 ) { banyak ++ ; }",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        26,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 && banyak >= 2 )",
        "cout << \" YES \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        28,
        13,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 && banyak >= 2 )",
        "cout << \" NO \" << endl ;",
        "if ( s [ i ] == ' 1 ' && k == 2 ) { banyak ++ ; }",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        28,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 && banyak >= 2 )",
        "cout << \" NO \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        13,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 && banyak >= 2 )",
        "if ( s [ i ] == ' 1 ' && k == 2 ) { banyak ++ ; }",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 && banyak >= 2 )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        28,
        13,
        4
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "if ( s [ i ] == ' 1 ' && k == 2 ) { banyak ++ ; }",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        28,
        4
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        13,
        4
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "if ( s [ i ] == ' 1 ' && k == 2 ) { banyak ++ ; }",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        4
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        13,
        4
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "if ( s [ i ] == ' 1 ' && k == 2 ) { banyak ++ ; }",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        4
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' && k == 2 ) { banyak ++ ; }",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}