{
  "meta": {
    "index": 1855,
    "hitid": "3B286OTISEB8EOYI5EMBY3EBSBEJAR",
    "workerid": "AIWEXPJAU66D9",
    "probid": "447A",
    "subid": "41333225"
  },
  "lines": [
    {
      "line": 0,
      "text": "create boolean array a with 305 elements",
      "code": "bool a [ 305 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers x and n",
      "code": "int x , n ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read x and n",
      "code": "cin >> x >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare integer variable p",
      "code": "int p ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read p",
      "code": "cin >> p ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "p = p modulo x",
      "code": "p %= x ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if a [ p ] = true",
      "code": "if ( a [ p ] == true )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print i",
      "code": "cout << i << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "assign value of true to a [ p ]",
      "code": "a [ p ] = true ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" - 1 \"",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int p = s . size ( ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( p ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "cout << i ;",
        "int p = s . size ( ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        6
      ],
      "mod_code": [
        "cout << i ;",
        "int p = s . size ( ) ;",
        "gets ( p ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        6,
        11
      ],
      "mod_code": [
        "cout << i ;",
        "int p = s . size ( ) ;",
        "gets ( p ) ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        6,
        0
      ],
      "mod_code": [
        "cout << i ;",
        "int p = s . size ( ) ;",
        "gets ( p ) ;",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        9,
        5,
        6,
        14
      ],
      "mod_code": [
        "cout << i ;",
        "int p = s . size ( ) ;",
        "gets ( p ) ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        11
      ],
      "mod_code": [
        "cout << i ;",
        "int p = s . size ( ) ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        11,
        0
      ],
      "mod_code": [
        "cout << i ;",
        "int p = s . size ( ) ;",
        "do",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        9,
        5,
        11,
        14
      ],
      "mod_code": [
        "cout << i ;",
        "int p = s . size ( ) ;",
        "do",
        "cout << \" -1 \" ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        0
      ],
      "mod_code": [
        "cout << i ;",
        "int p = s . size ( ) ;",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        9,
        5,
        0,
        14
      ],
      "mod_code": [
        "cout << i ;",
        "int p = s . size ( ) ;",
        "boolean [ 305 ] = { 0 } ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        9,
        5,
        14
      ],
      "mod_code": [
        "cout << i ;",
        "int p = s . size ( ) ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "cout << i ;",
        "gets ( p ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        11
      ],
      "mod_code": [
        "cout << i ;",
        "gets ( p ) ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        11,
        0
      ],
      "mod_code": [
        "cout << i ;",
        "gets ( p ) ;",
        "do",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        9,
        6,
        11,
        14
      ],
      "mod_code": [
        "cout << i ;",
        "gets ( p ) ;",
        "do",
        "cout << \" -1 \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        0
      ],
      "mod_code": [
        "cout << i ;",
        "gets ( p ) ;",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        9,
        6,
        0,
        14
      ],
      "mod_code": [
        "cout << i ;",
        "gets ( p ) ;",
        "boolean [ 305 ] = { 0 } ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        9,
        6,
        14
      ],
      "mod_code": [
        "cout << i ;",
        "gets ( p ) ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "cout << i ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        11,
        0
      ],
      "mod_code": [
        "cout << i ;",
        "do",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        9,
        11,
        0,
        14
      ],
      "mod_code": [
        "cout << i ;",
        "do",
        "boolean [ 305 ] = { 0 } ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        9,
        11,
        14
      ],
      "mod_code": [
        "cout << i ;",
        "do",
        "cout << \" -1 \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "cout << i ;",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        9,
        0,
        14
      ],
      "mod_code": [
        "cout << i ;",
        "boolean [ 305 ] = { 0 } ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "gets ( p ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        11
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "gets ( p ) ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        0
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "gets ( p ) ;",
        "do",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        14
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "gets ( p ) ;",
        "do",
        "cout << \" -1 \" ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        0
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "gets ( p ) ;",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        5,
        6,
        0,
        14
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "gets ( p ) ;",
        "boolean [ 305 ] = { 0 } ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        5,
        6,
        14
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "gets ( p ) ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        11,
        0
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "do",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        5,
        11,
        0,
        14
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "do",
        "boolean [ 305 ] = { 0 } ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        5,
        11,
        14
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "do",
        "cout << \" -1 \" ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        5,
        0,
        14
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "boolean [ 305 ] = { 0 } ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "int p = s . size ( ) ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "gets ( p ) ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11,
        0
      ],
      "mod_code": [
        "gets ( p ) ;",
        "do",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        6,
        11,
        0,
        14
      ],
      "mod_code": [
        "gets ( p ) ;",
        "do",
        "boolean [ 305 ] = { 0 } ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        6,
        11,
        14
      ],
      "mod_code": [
        "gets ( p ) ;",
        "do",
        "cout << \" -1 \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "gets ( p ) ;",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        6,
        0,
        14
      ],
      "mod_code": [
        "gets ( p ) ;",
        "boolean [ 305 ] = { 0 } ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "gets ( p ) ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "do",
        "boolean [ 305 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        11,
        0,
        14
      ],
      "mod_code": [
        "do",
        "boolean [ 305 ] = { 0 } ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "do",
        "cout << \" -1 \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "boolean [ 305 ] = { 0 } ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘boolean’ does not name a type"
    }
  ]
}