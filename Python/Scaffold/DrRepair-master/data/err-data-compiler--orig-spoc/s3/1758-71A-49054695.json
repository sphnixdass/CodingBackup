{
  "meta": {
    "index": 1758,
    "hitid": "3UUIU9GZC5Z5MLI6MC9YSYLYZM25TL",
    "workerid": "A277IUJ2DY3GZQ",
    "probid": "71A",
    "subid": "49054695"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let t an int",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while postdecrement t",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let s a string",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if size of s at most 10",
      "code": "if ( s . size ( ) <= 10 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print s",
      "code": "cout << s << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "continue",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "otherwise",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print s [ 0 ] , followed by size of s less 2 , followed by s [ size of s less 1 ]",
      "code": "cout << s [ 0 ] << s . size ( ) - 2 << s [ s . size ( ) - 1 ] << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 2,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << s [ 0 ] << \" \" << s . size ( ) << \" \" << s [ s . size ( ) ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        9
      ],
      "mod_code": [
        "while ( cin >> t )",
        "if ( s . size ( ) == 10 )",
        "cout << s [ 0 ] << \" \" << s . size ( ) << endl ;",
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        6,
        10
      ],
      "mod_code": [
        "while ( cin >> t )",
        "if ( s . size ( ) == 10 )",
        "cout << s [ 0 ] << \" \" << s . size ( ) << \" \" << s [ s . size ( ) ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        9
      ],
      "mod_code": [
        "while ( cin >> t )",
        "if ( s . size ( ) == 10 )",
        "cout << s [ 0 ] << \" \" << s . size ( ) << \" \" << s [ s . size ( ) ) << endl ;",
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        6,
        9
      ],
      "mod_code": [
        "while ( cin >> t )",
        "if ( s . size ( ) == 10 )",
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        10,
        9
      ],
      "mod_code": [
        "while ( cin >> t )",
        "cout << s [ 0 ] << \" \" << s . size ( ) << endl ;",
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        10,
        9,
        6
      ],
      "mod_code": [
        "while ( cin >> t )",
        "cout << s [ 0 ] << \" \" << s . size ( ) << endl ;",
        "return else ;",
        "if ( ( s . size ( ) ) == 10 )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "while ( cin >> t )",
        "cout << s [ 0 ] << \" \" << s . size ( ) << \" \" << s [ s . size ( ) ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        10,
        9
      ],
      "mod_code": [
        "while ( cin >> t )",
        "cout << s [ 0 ] << \" \" << s . size ( ) << \" \" << s [ s . size ( ) ) << endl ;",
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        10,
        9,
        6
      ],
      "mod_code": [
        "while ( cin >> t )",
        "cout << s [ 0 ] << \" \" << s . size ( ) << \" \" << s [ s . size ( ) ) << endl ;",
        "return else ;",
        "if ( ( s . size ( ) ) == 10 )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        10,
        6
      ],
      "mod_code": [
        "while ( cin >> t )",
        "cout << s [ 0 ] << \" \" << s . size ( ) << \" \" << s [ s . size ( ) ) << endl ;",
        "if ( ( s . size ( ) ) == 10 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "while ( cin >> t )",
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        9,
        6
      ],
      "mod_code": [
        "while ( cin >> t )",
        "return else ;",
        "if ( ( s . size ( ) ) == 10 )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        10,
        9
      ],
      "mod_code": [
        "if ( s . size ( ) == 10 )",
        "cout << s [ 0 ] << \" \" << s . size ( ) << endl ;",
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "if ( s . size ( ) == 10 )",
        "cout << s [ 0 ] << \" \" << s . size ( ) << \" \" << s [ s . size ( ) ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        10,
        9
      ],
      "mod_code": [
        "if ( s . size ( ) == 10 )",
        "cout << s [ 0 ] << \" \" << s . size ( ) << \" \" << s [ s . size ( ) ) << endl ;",
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "if ( s . size ( ) == 10 )",
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "cout << s [ 0 ] << \" \" << s . size ( ) << endl ;",
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        9,
        6
      ],
      "mod_code": [
        "cout << s [ 0 ] << \" \" << s . size ( ) << endl ;",
        "return else ;",
        "if ( ( s . size ( ) ) == 10 )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "cout << s [ 0 ] << \" \" << s . size ( ) << \" \" << s [ s . size ( ) ) << endl ;",
        "return else ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        9,
        6
      ],
      "mod_code": [
        "cout << s [ 0 ] << \" \" << s . size ( ) << \" \" << s [ s . size ( ) ) << endl ;",
        "return else ;",
        "if ( ( s . size ( ) ) == 10 )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "cout << s [ 0 ] << \" \" << s . size ( ) << \" \" << s [ s . size ( ) ) << endl ;",
        "if ( ( s . size ( ) ) == 10 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "return else ;",
        "if ( ( s . size ( ) ) == 10 )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}