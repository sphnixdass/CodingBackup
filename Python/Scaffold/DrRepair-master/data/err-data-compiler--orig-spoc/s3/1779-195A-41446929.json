{
  "meta": {
    "index": 1779,
    "hitid": "3EQVJH0T40FH2E21NEA7HVOO4VQHTB",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "195A",
    "subid": "41446929"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integers a , b , and c",
      "code": "int a , b , c ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare ok taking in int x and returning bool",
      "code": "bool ok ( int x )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if a * c is less than or equal to x * b + c * b",
      "code": "if ( a * c <= x * b + c * b )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return true",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "otherwise",
      "code": "else",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return false",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare binary",
      "code": "int binary ( )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "make ints lo = 0 , hi = 1e6 , and med",
      "code": "int lo = 0 , hi = 1e6 , med ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "while lo is less than hi",
      "code": "while ( lo < hi )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set med to ( hi + lo ) > > 1",
      "code": "med = ( hi + lo ) >> 1 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if ok ( med ) is truthy",
      "code": "if ( ok ( med ) )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set hi to med",
      "code": "hi = med ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set lo to med + 1",
      "code": "lo = med + 1 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "return lo",
      "code": "return lo ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 19,
      "text": "read a , b , and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print the return value of binary ( )",
      "code": "cout << binary ( ) << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        ";"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "return else ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "x :"
      ],
      "err_line": 7,
      "err_msg": "‘x’ does not name a type"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘temp’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        ";",
        "if ( a * b <= x * b + c * b )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        2,
        4
      ],
      "mod_code": [
        ";",
        "if ( a * b <= x * b + c * b )",
        "return else ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        2,
        4,
        16
      ],
      "mod_code": [
        ";",
        "if ( a * b <= x * b + c * b )",
        "return else ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        2,
        4,
        1
      ],
      "mod_code": [
        ";",
        "if ( a * b <= x * b + c * b )",
        "return else ;",
        "bool ok ( bool x )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        2,
        4,
        20
      ],
      "mod_code": [
        ";",
        "if ( a * b <= x * b + c * b )",
        "return else ;",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        2,
        16
      ],
      "mod_code": [
        ";",
        "if ( a * b <= x * b + c * b )",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        2,
        16,
        1
      ],
      "mod_code": [
        ";",
        "if ( a * b <= x * b + c * b )",
        "do",
        "bool ok ( bool x )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        2,
        16,
        20
      ],
      "mod_code": [
        ";",
        "if ( a * b <= x * b + c * b )",
        "do",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        2,
        1
      ],
      "mod_code": [
        ";",
        "if ( a * b <= x * b + c * b )",
        "bool ok ( bool x )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        2,
        1,
        20
      ],
      "mod_code": [
        ";",
        "if ( a * b <= x * b + c * b )",
        "bool ok ( bool x )",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        2,
        20
      ],
      "mod_code": [
        ";",
        "if ( a * b <= x * b + c * b )",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        ";",
        "return else ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        4,
        16
      ],
      "mod_code": [
        ";",
        "return else ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        4,
        16,
        1
      ],
      "mod_code": [
        ";",
        "return else ;",
        "do",
        "bool ok ( bool x )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        4,
        16,
        20
      ],
      "mod_code": [
        ";",
        "return else ;",
        "do",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        4,
        1
      ],
      "mod_code": [
        ";",
        "return else ;",
        "bool ok ( bool x )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        4,
        1,
        20
      ],
      "mod_code": [
        ";",
        "return else ;",
        "bool ok ( bool x )",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        4,
        20
      ],
      "mod_code": [
        ";",
        "return else ;",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        ";",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        16,
        1
      ],
      "mod_code": [
        ";",
        "do",
        "bool ok ( bool x )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        16,
        1,
        20
      ],
      "mod_code": [
        ";",
        "do",
        "bool ok ( bool x )",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        16,
        20
      ],
      "mod_code": [
        ";",
        "do",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        ";",
        "bool ok ( bool x )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        1,
        20
      ],
      "mod_code": [
        ";",
        "bool ok ( bool x )",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        20
      ],
      "mod_code": [
        ";",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "if ( a * b <= x * b + c * b )",
        "return else ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        4,
        16
      ],
      "mod_code": [
        "if ( a * b <= x * b + c * b )",
        "return else ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        4,
        16,
        1
      ],
      "mod_code": [
        "if ( a * b <= x * b + c * b )",
        "return else ;",
        "do",
        "bool ok ( bool x )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        4,
        16,
        20
      ],
      "mod_code": [
        "if ( a * b <= x * b + c * b )",
        "return else ;",
        "do",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        4,
        1
      ],
      "mod_code": [
        "if ( a * b <= x * b + c * b )",
        "return else ;",
        "bool ok ( bool x )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        4,
        1,
        20
      ],
      "mod_code": [
        "if ( a * b <= x * b + c * b )",
        "return else ;",
        "bool ok ( bool x )",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        4,
        20
      ],
      "mod_code": [
        "if ( a * b <= x * b + c * b )",
        "return else ;",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "if ( a * b <= x * b + c * b )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        16,
        1
      ],
      "mod_code": [
        "if ( a * b <= x * b + c * b )",
        "do",
        "bool ok ( bool x )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        16,
        1,
        20
      ],
      "mod_code": [
        "if ( a * b <= x * b + c * b )",
        "do",
        "bool ok ( bool x )",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        16,
        20
      ],
      "mod_code": [
        "if ( a * b <= x * b + c * b )",
        "do",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        1,
        20
      ],
      "mod_code": [
        "if ( a * b <= x * b + c * b )",
        "bool ok ( bool x )",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘temp’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        20
      ],
      "mod_code": [
        "if ( a * b <= x * b + c * b )",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘temp’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "return else ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        16,
        1
      ],
      "mod_code": [
        "return else ;",
        "do",
        "bool ok ( bool x )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        16,
        1,
        20
      ],
      "mod_code": [
        "return else ;",
        "do",
        "bool ok ( bool x )",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        16,
        20
      ],
      "mod_code": [
        "return else ;",
        "do",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "return else ;",
        "bool ok ( bool x )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        1,
        20
      ],
      "mod_code": [
        "return else ;",
        "bool ok ( bool x )",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        20
      ],
      "mod_code": [
        "return else ;",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        1
      ],
      "mod_code": [
        "do",
        "bool ok ( bool x )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        1,
        20
      ],
      "mod_code": [
        "do",
        "bool ok ( bool x )",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        20
      ],
      "mod_code": [
        "do",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "bool ok ( bool x )",
        "cout << binary ( temp ) << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘temp’ was not declared in this scope"
    }
  ]
}