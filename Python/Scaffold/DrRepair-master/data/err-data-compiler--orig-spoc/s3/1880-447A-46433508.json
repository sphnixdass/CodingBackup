{
  "meta": {
    "index": 1880,
    "hitid": "3D7VY91L65R3Y69VEPZZ96QYFALMBV",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "447A",
    "subid": "46433508"
  },
  "lines": [
    {
      "line": 0,
      "text": "set const integer maxn to 3e2 + 10",
      "code": "const int maxn = 3e2 + 10 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create boolean vis array of maxn size",
      "code": "bool vis [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "integers = p , n",
      "code": "int p , n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read p , n",
      "code": "cin >> p >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create memset of vis",
      "code": "memset ( vis , false , sizeof vis ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set integer flag to 0 , ans",
      "code": "int flag = 0 , ans = - 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 1 to less than or equal to n do the following",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "integers = x",
      "code": "int x ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if flag is true",
      "code": "if ( flag ) continue ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if vis [ x modulo p ] is true",
      "code": "if ( vis [ x % p ] )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set flag to 1 , ans",
      "code": "flag = 1 , ans = i ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set vis [ x modulo p ] to true",
      "code": "vis [ x % p ] = true ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if flag is false do the following",
      "code": "if ( ! flag )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "output ans",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "memset ( vis ) ;"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "while ( ! flag )"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int maxn += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool vis [ size ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘size’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "memset ( vis , c ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int flag = 0 , ans = 0 , ans = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "vis [ x modulo p ] = true ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘]’ before ‘modulo’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "while ( flag == false )"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "if ( flag )"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        10,
        12
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "if ( flag )",
        "flag = 1 , ans = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        10,
        12,
        16
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "if ( flag )",
        "flag = 1 , ans = 1 ;",
        "while ( ! flag )"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        10,
        12,
        18
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "if ( flag )",
        "flag = 1 , ans = 1 ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        10,
        12,
        13
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "if ( flag )",
        "flag = 1 , ans = 1 ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        10,
        16
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "if ( flag )",
        "while ( ! flag )"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        10,
        16,
        18
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "if ( flag )",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        10,
        16,
        13
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "if ( flag )",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        10,
        18
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "if ( flag )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        10,
        18,
        13
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "if ( flag )",
        "do",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        10,
        13
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "if ( flag )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "flag = 1 , ans = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        12,
        16
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "flag = 1 , ans = 1 ;",
        "while ( ! flag )"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        12,
        16,
        18
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "flag = 1 , ans = 1 ;",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        12,
        16,
        13
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "flag = 1 , ans = 1 ;",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        12,
        18
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "flag = 1 , ans = 1 ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        12,
        18,
        13
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "flag = 1 , ans = 1 ;",
        "do",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        12,
        13
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "flag = 1 , ans = 1 ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        16
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "while ( ! flag )"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        16,
        18
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        16,
        18,
        13
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "while ( ! flag )",
        "do",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        16,
        13
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        18
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        18,
        13
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "do",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "memset ( vis ) ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        12,
        16
      ],
      "mod_code": [
        "if ( flag )",
        "flag = 1 , ans = 1 ;",
        "while ( ! flag )"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        12,
        16,
        18
      ],
      "mod_code": [
        "if ( flag )",
        "flag = 1 , ans = 1 ;",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        12,
        16,
        13
      ],
      "mod_code": [
        "if ( flag )",
        "flag = 1 , ans = 1 ;",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        12,
        18
      ],
      "mod_code": [
        "if ( flag )",
        "flag = 1 , ans = 1 ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        12,
        18,
        13
      ],
      "mod_code": [
        "if ( flag )",
        "flag = 1 , ans = 1 ;",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        12,
        13
      ],
      "mod_code": [
        "if ( flag )",
        "flag = 1 , ans = 1 ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        16
      ],
      "mod_code": [
        "if ( flag )",
        "while ( ! flag )"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        16,
        18
      ],
      "mod_code": [
        "if ( flag )",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        16,
        18,
        13
      ],
      "mod_code": [
        "if ( flag )",
        "while ( ! flag )",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        16,
        13
      ],
      "mod_code": [
        "if ( flag )",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "if ( flag )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        18,
        13
      ],
      "mod_code": [
        "if ( flag )",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "if ( flag )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "flag = 1 , ans = 1 ;",
        "while ( ! flag )"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        16,
        18
      ],
      "mod_code": [
        "flag = 1 , ans = 1 ;",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        12,
        16,
        18,
        13
      ],
      "mod_code": [
        "flag = 1 , ans = 1 ;",
        "while ( ! flag )",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        16,
        13
      ],
      "mod_code": [
        "flag = 1 , ans = 1 ;",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "flag = 1 , ans = 1 ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        12,
        18,
        13
      ],
      "mod_code": [
        "flag = 1 , ans = 1 ;",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "flag = 1 , ans = 1 ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "while ( ! flag )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        16,
        18,
        13
      ],
      "mod_code": [
        "while ( ! flag )",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        13
      ],
      "mod_code": [
        "while ( ! flag )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        13
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}