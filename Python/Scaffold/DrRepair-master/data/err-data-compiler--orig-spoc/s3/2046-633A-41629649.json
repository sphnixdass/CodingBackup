{
  "meta": {
    "index": 2046,
    "hitid": "3FULMHZ7OURJD7OMZAPC1SKS4VD4M5",
    "workerid": "AIWEXPJAU66D9",
    "probid": "633A",
    "subid": "41629649"
  },
  "lines": [
    {
      "line": 0,
      "text": "gcd is a integer function with integer arguments a and b",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a is less than b",
      "code": "if ( a < b )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return gcd of b and a",
      "code": "return gcd ( b , a ) ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return a if b = 0 , or gcd ( b , a modulo b )",
      "code": "return b == 0 ? a : gcd ( b , a % b ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare integer variables a , b , c and mcd",
      "code": "int a , b , c , mcd ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read a , b and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set value of mcd to gcd ( a , b )",
      "code": "mcd = gcd ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if c % mcd = 0",
      "code": "if ( c % mcd == 0 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "create integer k = 0",
      "code": "int k = 0 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "while a * k < = c",
      "code": "while ( a * k <= c )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if ( c - a * k ) modulo b = 0",
      "code": "if ( ( c - a * k ) % b == 0 )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "print \" Yes \"",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "increment k",
      "code": "k ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" No \"",
      "code": "cout << \" No \" << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "a , b , c , mcd ;"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "* mcd = gcd ( a , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "k = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ! c % mcd )"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        10,
        9
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ! c % mcd )",
        "* mcd = gcd ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        10,
        9,
        13
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ! c % mcd )",
        "* mcd = gcd ( a , b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        10,
        9,
        11
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ! c % mcd )",
        "* mcd = gcd ( a , b ) ;",
        "k = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        10,
        9,
        14
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ! c % mcd )",
        "* mcd = gcd ( a , b ) ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        10,
        13
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ! c % mcd )",
        "if ( ( c - ( a * k ) % b ) == 0 )"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        11
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ! c % mcd )",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "k = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        14
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ! c % mcd )",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        10,
        11
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ! c % mcd )",
        "k = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        10,
        11,
        14
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ! c % mcd )",
        "k = 0 ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        10,
        14
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ! c % mcd )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "* mcd = gcd ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        9,
        13
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "* mcd = gcd ( a , b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        9,
        13,
        11
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "* mcd = gcd ( a , b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "k = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        9,
        13,
        14
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "* mcd = gcd ( a , b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        9,
        11
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "* mcd = gcd ( a , b ) ;",
        "k = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        9,
        11,
        14
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "* mcd = gcd ( a , b ) ;",
        "k = 0 ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        9,
        14
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "* mcd = gcd ( a , b ) ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        13,
        11
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "k = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        13,
        11,
        14
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "k = 0 ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        13,
        14
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "k = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        11,
        14
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "k = 0 ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "return b == 0 ? a : gcd ( b , a , b % b ) ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "if ( ! c % mcd )",
        "* mcd = gcd ( a , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        9,
        13
      ],
      "mod_code": [
        "if ( ! c % mcd )",
        "* mcd = gcd ( a , b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        9,
        13,
        11
      ],
      "mod_code": [
        "if ( ! c % mcd )",
        "* mcd = gcd ( a , b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "k = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        9,
        13,
        14
      ],
      "mod_code": [
        "if ( ! c % mcd )",
        "* mcd = gcd ( a , b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        9,
        11
      ],
      "mod_code": [
        "if ( ! c % mcd )",
        "* mcd = gcd ( a , b ) ;",
        "k = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        9,
        11,
        14
      ],
      "mod_code": [
        "if ( ! c % mcd )",
        "* mcd = gcd ( a , b ) ;",
        "k = 0 ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        9,
        14
      ],
      "mod_code": [
        "if ( ! c % mcd )",
        "* mcd = gcd ( a , b ) ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        11
      ],
      "mod_code": [
        "if ( ! c % mcd )",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "k = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13,
        11,
        14
      ],
      "mod_code": [
        "if ( ! c % mcd )",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "k = 0 ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "if ( ! c % mcd )",
        "k = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        11,
        14
      ],
      "mod_code": [
        "if ( ! c % mcd )",
        "k = 0 ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "* mcd = gcd ( a , b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        9,
        13,
        11
      ],
      "mod_code": [
        "* mcd = gcd ( a , b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "k = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        9,
        13,
        11,
        14
      ],
      "mod_code": [
        "* mcd = gcd ( a , b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "k = 0 ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        9,
        13,
        14
      ],
      "mod_code": [
        "* mcd = gcd ( a , b ) ;",
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "* mcd = gcd ( a , b ) ;",
        "k = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        9,
        11,
        14
      ],
      "mod_code": [
        "* mcd = gcd ( a , b ) ;",
        "k = 0 ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "* mcd = gcd ( a , b ) ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        13,
        11
      ],
      "mod_code": [
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "k = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        11,
        14
      ],
      "mod_code": [
        "if ( ( c - ( a * k ) % b ) == 0 )",
        "k = 0 ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "k = 0 ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    }
  ]
}