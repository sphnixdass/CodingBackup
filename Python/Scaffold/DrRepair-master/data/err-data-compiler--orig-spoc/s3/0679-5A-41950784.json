{
  "meta": {
    "index": 679,
    "hitid": "31JUPBOORNY0QQT3B1EAIRL86X0L8E",
    "workerid": "AIWEXPJAU66D9",
    "probid": "5A",
    "subid": "41950784"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let p and ans be integers with p = 0 and ans = 0",
      "code": "int p = 0 , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while can read input line into s",
      "code": "while ( getline ( cin , s ) )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if s [ 0 ] is equal to ' + '",
      "code": "if ( s [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "increment p",
      "code": "p ++ ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if s [ 0 ] is equal to ' - '",
      "code": "if ( s [ 0 ] == ' - ' )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "decrement p",
      "code": "p -- ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increase ans by p * ( length of s - index of \" : \" in s - 1 )",
      "code": "ans += p * ( s . length ( ) - s . find ( ' : ' ) - 1 ) ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print ans and a new line",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘min(const char*)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "ans += p * ( s . length ( ) - min ( \" : \" - 1 ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘min(const char*)’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "while ( cin >> s )",
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘min(const char*)’"
    },
    {
      "mod_line": [
        3,
        10,
        1
      ],
      "mod_code": [
        "while ( cin >> s )",
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        10,
        1,
        4
      ],
      "mod_code": [
        "while ( cin >> s )",
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "char s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        10,
        1,
        9
      ],
      "mod_code": [
        "while ( cin >> s )",
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "char s ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        10,
        1,
        2
      ],
      "mod_code": [
        "while ( cin >> s )",
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "char s ;",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        10,
        4
      ],
      "mod_code": [
        "while ( cin >> s )",
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        10,
        4,
        9
      ],
      "mod_code": [
        "while ( cin >> s )",
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        10,
        4,
        2
      ],
      "mod_code": [
        "while ( cin >> s )",
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        10,
        9
      ],
      "mod_code": [
        "while ( cin >> s )",
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘min(const char*)’"
    },
    {
      "mod_line": [
        3,
        10,
        9,
        2
      ],
      "mod_code": [
        "while ( cin >> s )",
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "do",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        10,
        2
      ],
      "mod_code": [
        "while ( cin >> s )",
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "while ( cin >> s )",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        1,
        4
      ],
      "mod_code": [
        "while ( cin >> s )",
        "char s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        1,
        4,
        9
      ],
      "mod_code": [
        "while ( cin >> s )",
        "char s ;",
        "if ( s [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        1,
        4,
        2
      ],
      "mod_code": [
        "while ( cin >> s )",
        "char s ;",
        "if ( s [ 0 ] == \" + ' )",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        1,
        9
      ],
      "mod_code": [
        "while ( cin >> s )",
        "char s ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        1,
        9,
        2
      ],
      "mod_code": [
        "while ( cin >> s )",
        "char s ;",
        "do",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        1,
        2
      ],
      "mod_code": [
        "while ( cin >> s )",
        "char s ;",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        9
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        9,
        2
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "do",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        2
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        9,
        2
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "while ( cin >> s )",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        10,
        1,
        4
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "char s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        1,
        4,
        9
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "char s ;",
        "if ( s [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        1,
        4,
        2
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "char s ;",
        "if ( s [ 0 ] == \" + ' )",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        1,
        9
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "char s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        10,
        1,
        9,
        2
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "char s ;",
        "do",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        10,
        1,
        2
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "char s ;",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4,
        9
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4,
        9,
        2
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "do",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4,
        2
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘min(const char*)’"
    },
    {
      "mod_line": [
        10,
        9,
        2
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "do",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "ans += p * ( s . size ( ) - min ( \" : \" - 1 ) ) ;",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "char s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        4,
        9
      ],
      "mod_code": [
        "char s ;",
        "if ( s [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        4,
        9,
        2
      ],
      "mod_code": [
        "char s ;",
        "if ( s [ 0 ] == \" + ' )",
        "do",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        4,
        2
      ],
      "mod_code": [
        "char s ;",
        "if ( s [ 0 ] == \" + ' )",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "char s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        1,
        9,
        2
      ],
      "mod_code": [
        "char s ;",
        "do",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char s ;",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        9,
        2
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "do",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "do",
        "int p = 0 = 0 , ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    }
  ]
}