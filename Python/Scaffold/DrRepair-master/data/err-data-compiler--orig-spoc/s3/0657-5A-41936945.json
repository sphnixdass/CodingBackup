{
  "meta": {
    "index": 657,
    "hitid": "3DQYSJDTYL5CZLKJ2N3YLVCHO98XEB",
    "workerid": "AIWEXPJAU66D9",
    "probid": "5A",
    "subid": "41936945"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let users and traffic be integers = 0",
      "code": "int users = 0 , traffic = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "cmd = string",
      "code": "string cmd ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while can read line into cmd",
      "code": "while ( getline ( cin , cmd ) )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if cmd [ 0 ] is equal to ' + '",
      "code": "if ( cmd [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "increase users",
      "code": "users ++ ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else if cmd [ 0 ] is equal to ' - '",
      "code": "else if ( cmd [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "decrease users by one",
      "code": "users -- ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increase traffic by users * ( length of cmd - index of ' : ' in cmd - 1 )",
      "code": "traffic += users * ( cmd . length ( ) - cmd . find ( ' : ' ) - 1 ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print traffic and a new line",
      "code": "cout << traffic << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘min(char)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char cmd ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( cmd [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘min(char)’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘min(char)’"
    },
    {
      "mod_line": [
        3,
        9,
        4
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        9,
        4,
        2
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )",
        "char cmd ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        9,
        4,
        8
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        9,
        2
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;",
        "char cmd ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        2,
        8
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;",
        "char cmd ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        8
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘min(char)’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘min(char)’"
    },
    {
      "mod_line": [
        3,
        9,
        4
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        9,
        4,
        2
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )",
        "char cmd ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        9,
        4,
        8
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        9,
        2
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;",
        "char cmd ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        2,
        8
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;",
        "char cmd ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        8
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘min(char)’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "if ( cmd [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        2
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "if ( cmd [ 0 ] == \" + ' )",
        "char cmd ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        2,
        8
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "if ( cmd [ 0 ] == \" + ' )",
        "char cmd ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        8
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "if ( cmd [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "char cmd ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        2,
        8
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "char cmd ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "while ( cin >> cmd )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        4,
        2
      ],
      "mod_code": [
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )",
        "char cmd ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        4,
        2,
        8
      ],
      "mod_code": [
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )",
        "char cmd ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        4,
        8
      ],
      "mod_code": [
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;",
        "char cmd ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        9,
        2,
        8
      ],
      "mod_code": [
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;",
        "char cmd ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "traffic += users * ( cmd . length ( ) - min ( ' : ' ) - 1 ) ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘min(char)’"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        4,
        2
      ],
      "mod_code": [
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )",
        "char cmd ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        4,
        2,
        8
      ],
      "mod_code": [
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )",
        "char cmd ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        4,
        8
      ],
      "mod_code": [
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;",
        "if ( cmd [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;",
        "char cmd ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        9,
        2,
        8
      ],
      "mod_code": [
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;",
        "char cmd ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "traffic += users * ( cmd . size ( ) - min ( ' : ' ) - 1 ) ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘min(char)’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "if ( cmd [ 0 ] == \" + ' )",
        "char cmd ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        2,
        8
      ],
      "mod_code": [
        "if ( cmd [ 0 ] == \" + ' )",
        "char cmd ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "if ( cmd [ 0 ] == \" + ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "char cmd ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    }
  ]
}