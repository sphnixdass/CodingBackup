{
  "meta": {
    "index": 826,
    "hitid": "3B0MCRZMBROBN37IPA9SLUPI1JGPPK",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "987A",
    "subid": "48606481"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "m = char , int map",
      "code": "map < char , int > m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "set m [ ' p ' ] to 0",
      "code": "m [ ' p ' ] = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set m [ ' g ' ] to 0",
      "code": "m [ ' g ' ] = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set m [ ' b ' ] to 0",
      "code": "m [ ' b ' ] = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set m [ ' o ' ] to 0",
      "code": "m [ ' o ' ] = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set m [ ' r ' ] to 0",
      "code": "m [ ' r ' ] = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set m [ ' y ' ] to 0",
      "code": "m [ ' y ' ] = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to n",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set m [ s [ 0 ] ] to 1",
      "code": "m [ s [ 0 ] ] = 1 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print 6 - n",
      "code": "cout << 6 - n << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if m [ ' p ' ] is 0 print \" Power \"",
      "code": "if ( m [ ' p ' ] == 0 ) { cout << \" Power \" << endl ; }",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if m [ ' g ' ] is 0 print \" Time \"",
      "code": "if ( m [ ' g ' ] == 0 ) { cout << \" Time \" << endl ; }",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if m [ ' b ' ] is 0 print \" Space \"",
      "code": "if ( m [ ' b ' ] == 0 ) { cout << \" Space \" << endl ; }",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if m [ ' o ' ] is 0 print \" Soul \"",
      "code": "if ( m [ ' o ' ] == 0 ) { cout << \" Soul \" << endl ; }",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if m [ ' r ' ] is 0 print \" Reality \"",
      "code": "if ( m [ ' r ' ] == 0 ) { cout << \" Reality \" << endl ; }",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if m [ ' y ' ] is 0 print \" Mind \"",
      "code": "if ( m [ ' y ' ] == 0 ) { cout << \" Mind \" << endl ; }",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        18,
        19,
        12
      ],
      "mod_code": [
        "if ( m [ ' p ' ] == 0 ) cout << \" Power \" ;",
        "if ( m [ ' b ' ] == 0 ) cout << \" Space \" ;",
        "if ( m [ ' o ' ] == 0 ) cout << \" Soul \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        18,
        20,
        12
      ],
      "mod_code": [
        "if ( m [ ' p ' ] == 0 ) cout << \" Power \" ;",
        "if ( m [ ' b ' ] == 0 ) cout << \" Space \" ;",
        "if ( m [ ' r ' ] == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        18,
        21,
        12
      ],
      "mod_code": [
        "if ( m [ ' p ' ] == 0 ) cout << \" Power \" ;",
        "if ( m [ ' b ' ] == 0 ) cout << \" Space \" ;",
        "if ( m [ ' y ' ] == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        18,
        12
      ],
      "mod_code": [
        "if ( m [ ' p ' ] == 0 ) cout << \" Power \" ;",
        "if ( m [ ' b ' ] == 0 ) cout << \" Space \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        19,
        20,
        12
      ],
      "mod_code": [
        "if ( m [ ' p ' ] == 0 ) cout << \" Power \" ;",
        "if ( m [ ' o ' ] == 0 ) cout << \" Soul \" ;",
        "if ( m [ ' r ' ] == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        19,
        21,
        12
      ],
      "mod_code": [
        "if ( m [ ' p ' ] == 0 ) cout << \" Power \" ;",
        "if ( m [ ' o ' ] == 0 ) cout << \" Soul \" ;",
        "if ( m [ ' y ' ] == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        19,
        12
      ],
      "mod_code": [
        "if ( m [ ' p ' ] == 0 ) cout << \" Power \" ;",
        "if ( m [ ' o ' ] == 0 ) cout << \" Soul \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        20,
        21,
        12
      ],
      "mod_code": [
        "if ( m [ ' p ' ] == 0 ) cout << \" Power \" ;",
        "if ( m [ ' r ' ] == 0 ) cout << \" Reality \" ;",
        "if ( m [ ' y ' ] == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        20,
        12
      ],
      "mod_code": [
        "if ( m [ ' p ' ] == 0 ) cout << \" Power \" ;",
        "if ( m [ ' r ' ] == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        21,
        12
      ],
      "mod_code": [
        "if ( m [ ' p ' ] == 0 ) cout << \" Power \" ;",
        "if ( m [ ' y ' ] == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        12
      ],
      "mod_code": [
        "if ( m [ ' p ' ] == 0 ) cout << \" Power \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        19,
        20,
        12
      ],
      "mod_code": [
        "if ( m [ ' b ' ] == 0 ) cout << \" Space \" ;",
        "if ( m [ ' o ' ] == 0 ) cout << \" Soul \" ;",
        "if ( m [ ' r ' ] == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        19,
        21,
        12
      ],
      "mod_code": [
        "if ( m [ ' b ' ] == 0 ) cout << \" Space \" ;",
        "if ( m [ ' o ' ] == 0 ) cout << \" Soul \" ;",
        "if ( m [ ' y ' ] == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        19,
        12
      ],
      "mod_code": [
        "if ( m [ ' b ' ] == 0 ) cout << \" Space \" ;",
        "if ( m [ ' o ' ] == 0 ) cout << \" Soul \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        20,
        21,
        12
      ],
      "mod_code": [
        "if ( m [ ' b ' ] == 0 ) cout << \" Space \" ;",
        "if ( m [ ' r ' ] == 0 ) cout << \" Reality \" ;",
        "if ( m [ ' y ' ] == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        20,
        12
      ],
      "mod_code": [
        "if ( m [ ' b ' ] == 0 ) cout << \" Space \" ;",
        "if ( m [ ' r ' ] == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        21,
        12
      ],
      "mod_code": [
        "if ( m [ ' b ' ] == 0 ) cout << \" Space \" ;",
        "if ( m [ ' y ' ] == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        12
      ],
      "mod_code": [
        "if ( m [ ' b ' ] == 0 ) cout << \" Space \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        20,
        21,
        12
      ],
      "mod_code": [
        "if ( m [ ' o ' ] == 0 ) cout << \" Soul \" ;",
        "if ( m [ ' r ' ] == 0 ) cout << \" Reality \" ;",
        "if ( m [ ' y ' ] == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        20,
        12
      ],
      "mod_code": [
        "if ( m [ ' o ' ] == 0 ) cout << \" Soul \" ;",
        "if ( m [ ' r ' ] == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        21,
        12
      ],
      "mod_code": [
        "if ( m [ ' o ' ] == 0 ) cout << \" Soul \" ;",
        "if ( m [ ' y ' ] == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        12
      ],
      "mod_code": [
        "if ( m [ ' o ' ] == 0 ) cout << \" Soul \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        21,
        12
      ],
      "mod_code": [
        "if ( m [ ' r ' ] == 0 ) cout << \" Reality \" ;",
        "if ( m [ ' y ' ] == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        12
      ],
      "mod_code": [
        "if ( m [ ' r ' ] == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        12
      ],
      "mod_code": [
        "if ( m [ ' y ' ] == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}