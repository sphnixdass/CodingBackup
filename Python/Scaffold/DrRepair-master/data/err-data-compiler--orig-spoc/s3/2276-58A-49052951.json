{
  "meta": {
    "index": 2276,
    "hitid": "3FCO4VKOZ47IK6ESKAZ0RWZTNICE7L",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "58A",
    "subid": "49052951"
  },
  "lines": [
    {
      "line": 0,
      "text": "assign h , e , l , l , o to ch [ ]",
      "code": "char ch [ ] = { ' h ' , ' e ' , ' l ' , ' l ' , ' o ' } ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string str",
      "code": "string str ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "i = 0",
      "code": "int i = 0 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to length of str",
      "code": "for ( int j = 0 ; j < str . length ( ) ; j ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if str [ j ] = ch [ i ] , increment i",
      "code": "if ( str [ j ] == ch [ i ] ) i ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if i = 5 , break",
      "code": "if ( i == 5 ) break ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if i = 5",
      "code": "if ( i == 5 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "i = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long int ch = h , e , l , l , o ;"
      ],
      "err_line": 0,
      "err_msg": "‘h’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int str ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "i = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        11
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "i = 0 ;",
        "do"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        11,
        4
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "i = 0 ;",
        "do",
        "gets ( str ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        11,
        1
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "i = 0 ;",
        "do",
        "int str ;"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        11,
        9
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "i = 0 ;",
        "do",
        "if ( ! i )"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        4
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "i = 0 ;",
        "gets ( str ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        4,
        1
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "i = 0 ;",
        "gets ( str ) ;",
        "int str ;"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        4,
        9
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "i = 0 ;",
        "gets ( str ) ;",
        "if ( ! i )"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        1
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "i = 0 ;",
        "int str ;"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        1,
        9
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "i = 0 ;",
        "int str ;",
        "if ( ! i )"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        9
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "i = 0 ;",
        "if ( ! i )"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "do"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        4
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "do",
        "gets ( str ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        4,
        1
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "do",
        "gets ( str ) ;",
        "int str ;"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        4,
        9
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "do",
        "gets ( str ) ;",
        "if ( ! i )"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        1
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "do",
        "int str ;"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        1,
        9
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "do",
        "int str ;",
        "if ( ! i )"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        9
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "do",
        "if ( ! i )"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "gets ( str ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        4,
        1
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "gets ( str ) ;",
        "int str ;"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        4,
        1,
        9
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "gets ( str ) ;",
        "int str ;",
        "if ( ! i )"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        4,
        9
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "gets ( str ) ;",
        "if ( ! i )"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "int str ;"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        9
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "int str ;",
        "if ( ! i )"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int h [ ] = { h , e , l , o } ;",
        "if ( ! i )"
      ],
      "err_line": 0,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "i = 0 ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        2,
        11,
        4
      ],
      "mod_code": [
        "i = 0 ;",
        "do",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        2,
        11,
        4,
        1
      ],
      "mod_code": [
        "i = 0 ;",
        "do",
        "gets ( str ) ;",
        "int str ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        2,
        11,
        4,
        9
      ],
      "mod_code": [
        "i = 0 ;",
        "do",
        "gets ( str ) ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        2,
        11,
        1
      ],
      "mod_code": [
        "i = 0 ;",
        "do",
        "int str ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        2,
        11,
        1,
        9
      ],
      "mod_code": [
        "i = 0 ;",
        "do",
        "int str ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        2,
        11,
        9
      ],
      "mod_code": [
        "i = 0 ;",
        "do",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "i = 0 ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        2,
        4,
        1
      ],
      "mod_code": [
        "i = 0 ;",
        "gets ( str ) ;",
        "int str ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        2,
        4,
        1,
        9
      ],
      "mod_code": [
        "i = 0 ;",
        "gets ( str ) ;",
        "int str ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        2,
        4,
        9
      ],
      "mod_code": [
        "i = 0 ;",
        "gets ( str ) ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "i = 0 ;",
        "int str ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1,
        9
      ],
      "mod_code": [
        "i = 0 ;",
        "int str ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "i = 0 ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "do",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        4,
        1
      ],
      "mod_code": [
        "do",
        "gets ( str ) ;",
        "int str ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        4,
        1,
        9
      ],
      "mod_code": [
        "do",
        "gets ( str ) ;",
        "int str ;",
        "if ( ! i )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        4,
        9
      ],
      "mod_code": [
        "do",
        "gets ( str ) ;",
        "if ( ! i )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "do",
        "int str ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        1,
        9
      ],
      "mod_code": [
        "do",
        "int str ;",
        "if ( ! i )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "do",
        "if ( ! i )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int str ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        1,
        9
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int str ;",
        "if ( ! i )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "gets ( str ) ;",
        "if ( ! i )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int str ;",
        "if ( ! i )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘int’"
    }
  ]
}