{
  "meta": {
    "index": 1538,
    "hitid": "3TZDZ3Y0JS0NEO89NJ25Y875TZO19T",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "1097A",
    "subid": "48921988"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s and a",
      "code": "string s , a ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set flag to 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 5 exclusive",
      "code": "for ( int i = 0 ; i < 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if s [ 0 ] = a [ 0 ] or s [ 1 ] = a [ 1 ]",
      "code": "if ( s [ 0 ] == a [ 0 ] || s [ 1 ] == a [ 1 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set falg to 1",
      "code": "flag = 1 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if flag = 1",
      "code": "if ( flag == 1 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print NO and a newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "falg = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘falg’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s and a ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 5,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "flag = 0 ;",
        "falg = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        6
      ],
      "mod_code": [
        "flag = 0 ;",
        "falg = 1 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        6,
        1
      ],
      "mod_code": [
        "flag = 0 ;",
        "falg = 1 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "string s and a ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        7,
        6,
        13
      ],
      "mod_code": [
        "flag = 0 ;",
        "falg = 1 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        6,
        2
      ],
      "mod_code": [
        "flag = 0 ;",
        "falg = 1 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        7,
        1
      ],
      "mod_code": [
        "flag = 0 ;",
        "falg = 1 ;",
        "string s and a ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        7,
        1,
        13
      ],
      "mod_code": [
        "flag = 0 ;",
        "falg = 1 ;",
        "string s and a ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        7,
        1,
        2
      ],
      "mod_code": [
        "flag = 0 ;",
        "falg = 1 ;",
        "string s and a ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        7,
        13
      ],
      "mod_code": [
        "flag = 0 ;",
        "falg = 1 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        13,
        2
      ],
      "mod_code": [
        "flag = 0 ;",
        "falg = 1 ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        7,
        2
      ],
      "mod_code": [
        "flag = 0 ;",
        "falg = 1 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "flag = 0 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        1
      ],
      "mod_code": [
        "flag = 0 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "string s and a ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        6,
        1,
        13
      ],
      "mod_code": [
        "flag = 0 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "string s and a ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        6,
        1,
        2
      ],
      "mod_code": [
        "flag = 0 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "string s and a ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        6,
        13
      ],
      "mod_code": [
        "flag = 0 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        13,
        2
      ],
      "mod_code": [
        "flag = 0 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "flag = 0 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "flag = 0 ;",
        "string s and a ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        13
      ],
      "mod_code": [
        "flag = 0 ;",
        "string s and a ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        13,
        2
      ],
      "mod_code": [
        "flag = 0 ;",
        "string s and a ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        2
      ],
      "mod_code": [
        "flag = 0 ;",
        "string s and a ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "flag = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        2
      ],
      "mod_code": [
        "flag = 0 ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "flag = 0 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "falg = 1 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "‘falg’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6,
        1
      ],
      "mod_code": [
        "falg = 1 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "string s and a ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        6,
        1,
        13
      ],
      "mod_code": [
        "falg = 1 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "string s and a ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        6,
        1,
        2
      ],
      "mod_code": [
        "falg = 1 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "string s and a ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        6,
        13
      ],
      "mod_code": [
        "falg = 1 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "do"
      ],
      "err_line": 7,
      "err_msg": "‘falg’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6,
        13,
        2
      ],
      "mod_code": [
        "falg = 1 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        6,
        2
      ],
      "mod_code": [
        "falg = 1 ;",
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "falg = 1 ;",
        "string s and a ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        1,
        13
      ],
      "mod_code": [
        "falg = 1 ;",
        "string s and a ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        1,
        13,
        2
      ],
      "mod_code": [
        "falg = 1 ;",
        "string s and a ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        1,
        2
      ],
      "mod_code": [
        "falg = 1 ;",
        "string s and a ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "falg = 1 ;",
        "do"
      ],
      "err_line": 7,
      "err_msg": "‘falg’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        13,
        2
      ],
      "mod_code": [
        "falg = 1 ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "falg = 1 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "string s and a ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        1,
        13
      ],
      "mod_code": [
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "string s and a ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        1,
        13,
        2
      ],
      "mod_code": [
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "string s and a ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "string s and a ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        13,
        2
      ],
      "mod_code": [
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( ! s [ 0 ] || s [ 1 ] == a [ 1 ] )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "string s and a ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        13,
        2
      ],
      "mod_code": [
        "string s and a ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "string s and a ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}