{
  "meta": {
    "index": 2193,
    "hitid": "3W0XM68YZPP7VKR0RGTUOHLL365K10",
    "workerid": "AIWEXPJAU66D9",
    "probid": "330A",
    "subid": "48962579"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let m , n , i , j , count , r and c be integers where count , r and c = 0",
      "code": "int m , n , i , j , count = 0 , r = 0 , c = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare string variable s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read m and n",
      "code": "cin >> m >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let row be integer array with size m + 10 filled with 0 and col is an array with size n + 10 filled with 0",
      "code": "int row [ m + 10 ] = { 0 } , col [ n + 10 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to m exclusive",
      "code": "for ( i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for j = 0 to n exclusive",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s [ j ] = ' S '",
      "code": "if ( s [ j ] == ' S ' )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "row [ i ] = 1",
      "code": "row [ i ] = 1 ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "col [ j ] = 1",
      "code": "col [ j ] = 1 ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 0 to m exclusive",
      "code": "for ( i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "increment r if row [ i ] = 0",
      "code": "if ( row [ i ] == 0 ) r ++ ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "increment c if col [ i ] = 0",
      "code": "if ( col [ i ] == 0 ) c ++ ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) )",
      "code": "count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print count",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( cin >> m >> n )"
      ],
      "err_line": 9,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int row [ m + 10 ] is 10 , col [ n + 10 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘is’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int count’"
    },
    {
      "mod_line": [
        20,
        6
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        6,
        1
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "s >> s ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        20,
        6,
        1,
        2
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "s >> s ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "int s ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        20,
        6,
        1,
        21
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "s >> s ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        20,
        6,
        1,
        18
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "s >> s ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        20,
        6,
        2
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "s >> s ;",
        "int s ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        6,
        2,
        21
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "s >> s ;",
        "int s ;",
        "cout << count ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        6,
        2,
        18
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "s >> s ;",
        "int s ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        6,
        21
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "s >> s ;",
        "cout << count ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        6,
        21,
        18
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "s >> s ;",
        "cout << count ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        6,
        18
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "s >> s ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        1
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        20,
        1,
        2
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "int s ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        20,
        1,
        2,
        21
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "int s ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        20,
        1,
        2,
        18
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "int s ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        20,
        1,
        21
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        20,
        1,
        21,
        18
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "cout << count ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        20,
        1,
        18
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        20,
        2
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "int s ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        2,
        21
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "int s ;",
        "cout << count ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        2,
        21,
        18
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "int s ;",
        "cout << count ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        2,
        18
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "int s ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        21
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "cout << count ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int count’"
    },
    {
      "mod_line": [
        20,
        21,
        18
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "cout << count ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int count’"
    },
    {
      "mod_line": [
        20,
        18
      ],
      "mod_code": [
        "int count = ( r * n ) + ( m * c ) - ( max ( r , c ) * min ( r , c ) ) ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int count’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "int s ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        6,
        1,
        2,
        21
      ],
      "mod_code": [
        "s >> s ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "int s ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        6,
        1,
        2,
        18
      ],
      "mod_code": [
        "s >> s ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "int s ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        6,
        1,
        21
      ],
      "mod_code": [
        "s >> s ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        6,
        1,
        21,
        18
      ],
      "mod_code": [
        "s >> s ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "cout << count ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        6,
        1,
        18
      ],
      "mod_code": [
        "s >> s ;",
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "int s ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        2,
        21
      ],
      "mod_code": [
        "s >> s ;",
        "int s ;",
        "cout << count ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        2,
        21,
        18
      ],
      "mod_code": [
        "s >> s ;",
        "int s ;",
        "cout << count ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        2,
        18
      ],
      "mod_code": [
        "s >> s ;",
        "int s ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        21
      ],
      "mod_code": [
        "s >> s ;",
        "cout << count ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        21,
        18
      ],
      "mod_code": [
        "s >> s ;",
        "cout << count ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "s >> s ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "int s ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        1,
        2,
        21
      ],
      "mod_code": [
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "int s ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        1,
        2,
        21,
        18
      ],
      "mod_code": [
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "int s ;",
        "cout << count ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        1,
        2,
        18
      ],
      "mod_code": [
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "int s ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        1,
        21,
        18
      ],
      "mod_code": [
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "cout << count ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int m , n , i , j , count = 0 , r = 0 , r = 0 ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        2,
        21
      ],
      "mod_code": [
        "int s ;",
        "cout << count ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        21,
        18
      ],
      "mod_code": [
        "int s ;",
        "cout << count ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "int s ;",
        "if ( col [ i ] == ' 0 ' ) c ++ ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}