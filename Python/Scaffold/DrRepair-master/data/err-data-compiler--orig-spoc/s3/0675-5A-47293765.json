{
  "meta": {
    "index": 675,
    "hitid": "3B6F54KMR265J348WP2WF3CVKL2S1F",
    "workerid": "A1APYLD4DUK33J",
    "probid": "5A",
    "subid": "47293765"
  },
  "lines": [
    {
      "line": 0,
      "text": "create map mp from string to boolean",
      "code": "map < string , bool > mp ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integers cnt , res , with cnt = 0 res = 0",
      "code": "int cnt = 0 , res = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create strings txt , name",
      "code": "string txt , name ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while read line from cin to txt is true",
      "code": "while ( getline ( cin , txt ) )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if size of txt is 0 , break loop",
      "code": "if ( txt . size ( ) == 0 ) break ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if txt [ 0 ] is ' + '",
      "code": "if ( txt [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set name to \" \"",
      "code": "name = \" \" ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "for i = 1 to size of txt exclusive , increment name by txt [ i ]",
      "code": "for ( int i = 1 ; i < txt . size ( ) ; i ++ ) name += txt [ i ] ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set mp [ name ] to 1",
      "code": "mp [ name ] = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if txt [ 0 ] is ' - '",
      "code": "else if ( txt [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "decrement cnt",
      "code": "cnt -- ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set name to \" \"",
      "code": "name = \" \" ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "for i = 1 to size of txt exclusive , set name to txt [ i ]",
      "code": "for ( int i = 1 ; i < txt . size ( ) ; i ++ ) name += txt [ i ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set mp [ name ] to 0",
      "code": "mp [ name ] = 0 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 17,
      "text": "create integer ind",
      "code": "int ind ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "for i = 0 to size of txt exclusive",
      "code": "for ( int i = 0 ; i < txt . size ( ) ; i ++ )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "set txt [ i ] to ' : '",
      "code": "if ( txt [ i ] == ' : ' )",
      "indent": 4
    },
    {
      "line": 20,
      "text": "set ind to i",
      "code": "ind = i ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "break loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 23,
      "text": "set name to \" \"",
      "code": "name = \" \" ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "for i = ind + 1 to size of txt , increment name by txt [ i ]",
      "code": "for ( int i = ind + 1 ; i < txt . size ( ) ; i ++ ) name += txt [ i ] ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "increment res by cnt * integer casted size of name",
      "code": "res += ( cnt * ( int ) name . size ( ) ) ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print res print newline",
      "code": "cout << res << endl ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "map < string , bool mp ;"
      ],
      "err_line": 0,
      "err_msg": "template argument 2 is invalid"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int cnt , res = 0 , res ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string txt ;"
      ],
      "err_line": 7,
      "err_msg": "‘name’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "mp [ ' name ' ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, bool>’ and ‘int’)"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "C [ i ] = ' : ' ;"
      ],
      "err_line": 19,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "for ( i = ind + 1 ; i < txt . size ( ) ; i ++ ) { name += txt [ i ] ; }"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "txt [ i ] = ' : ' ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        19,
        23
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "txt [ i ] = ' : ' ;",
        "name = \" \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        19,
        23,
        16
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "txt [ i ] = ' : ' ;",
        "name = \" \" ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        19,
        23,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "txt [ i ] = ' : ' ;",
        "name = \" \" ;",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        19,
        16
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "txt [ i ] = ' : ' ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        19,
        16,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "txt [ i ] = ' : ' ;",
        "do",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        19,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "txt [ i ] = ' : ' ;",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        23
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "name = \" \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        23,
        16
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "name = \" \" ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        23,
        16,
        19
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "name = \" \" ;",
        "do",
        "C [ i ] = ' : ' ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        23,
        16,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "name = \" \" ;",
        "do",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        23,
        19
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "name = \" \" ;",
        "C [ i ] = ' : ' ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        23,
        19,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "name = \" \" ;",
        "C [ i ] = ' : ' ;",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        23,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "name = \" \" ;",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        16,
        19
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "do",
        "C [ i ] = ' : ' ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        16,
        19,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "do",
        "C [ i ] = ' : ' ;",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        16,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "do",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "C [ i ] = ' : ' ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        19,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "C [ i ] = ' : ' ;",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> txt )",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        19,
        23,
        16
      ],
      "mod_code": [
        "txt [ i ] = ' : ' ;",
        "name = \" \" ;",
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        23,
        16,
        11
      ],
      "mod_code": [
        "txt [ i ] = ' : ' ;",
        "name = \" \" ;",
        "do",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        16
      ],
      "mod_code": [
        "txt [ i ] = ' : ' ;",
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        16,
        11
      ],
      "mod_code": [
        "txt [ i ] = ' : ' ;",
        "do",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        16
      ],
      "mod_code": [
        "name = \" \" ;",
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        16,
        19
      ],
      "mod_code": [
        "name = \" \" ;",
        "do",
        "C [ i ] = ' : ' ;"
      ],
      "err_line": 19,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        16,
        19,
        11
      ],
      "mod_code": [
        "name = \" \" ;",
        "do",
        "C [ i ] = ' : ' ;",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 19,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        16,
        11
      ],
      "mod_code": [
        "name = \" \" ;",
        "do",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        19
      ],
      "mod_code": [
        "name = \" \" ;",
        "C [ i ] = ' : ' ;"
      ],
      "err_line": 19,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        19,
        11
      ],
      "mod_code": [
        "name = \" \" ;",
        "C [ i ] = ' : ' ;",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 19,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "do",
        "C [ i ] = ' : ' ;"
      ],
      "err_line": 19,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        19,
        11
      ],
      "mod_code": [
        "do",
        "C [ i ] = ' : ' ;",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 19,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        11
      ],
      "mod_code": [
        "do",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        11
      ],
      "mod_code": [
        "C [ i ] = ' : ' ;",
        "else if ( ! txt [ 0 ] )"
      ],
      "err_line": 19,
      "err_msg": "‘C’ was not declared in this scope"
    }
  ]
}