{
  "meta": {
    "index": 1178,
    "hitid": "3UQVX1UPFSBC7F2S6RJQAGGHHZY02I",
    "workerid": "AIWEXPJAU66D9",
    "probid": "44A",
    "subid": "36341322"
  },
  "lines": [
    {
      "line": 0,
      "text": "set1 = set of strings",
      "code": "set < string > set1 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set2 = set of strings",
      "code": "set < string > set2 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "map1 = map of string to int",
      "code": "map < string , int > map1 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "map2 = map of string to int",
      "code": "map < string , int > map2 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let cp be 2d array of integers of size 101 by 101",
      "code": "int cp [ 101 ] [ 101 ] ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create integer mc1",
      "code": "int mc1 ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "create integer mc2",
      "code": "int mc2 ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "in the function malloc_1 with argument a of type string",
      "code": "int malloc_1 ( string a )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "if set1 . count ( a ) is not equal to 0",
      "code": "if ( set1 . count ( a ) != 0 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return map1 [ a ]",
      "code": "return map1 [ a ] ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "insert a into set1",
      "code": "set1 . insert ( a ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set map1 [ a ] to mc1 and increase mc1 by one",
      "code": "map1 [ a ] = mc1 ++ ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "return map1 [ a ]",
      "code": "return map1 [ a ] ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 16,
      "text": "declare function malloc_2 that returns integer and accepts argument a of type string",
      "code": "int malloc_2 ( string a )",
      "indent": 0
    },
    {
      "line": 17,
      "text": "if count of value a in set2 ! = 0",
      "code": "if ( set2 . count ( a ) != 0 )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "return map2 [ a ]",
      "code": "return map2 [ a ] ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 20,
      "text": "insert a into set2",
      "code": "set2 . insert ( a ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "set map2 [ a ] = mc2 and increment mc2",
      "code": "map2 [ a ] = mc2 ++ ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "return map2 [ a ]",
      "code": "return map2 [ a ] ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 26,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "create integer cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "while input is not empty set n to input value",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "cnt = 0",
      "code": "cnt = 0 ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "clear set1",
      "code": "set1 . clear ( ) ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "clear set2",
      "code": "set2 . clear ( ) ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "set mc1 to mc2 to 0",
      "code": "mc1 = mc2 = 0 ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "clear map1",
      "code": "map1 . clear ( ) ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "invoke function memset with arguments cp , 0 , and size of cp",
      "code": "memset ( cp , 0 , sizeof ( cp ) ) ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "clear map2",
      "code": "map2 . clear ( ) ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "create strings a , b",
      "code": "string a , b ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "create integers c , d",
      "code": "int c , d ;",
      "indent": 2
    },
    {
      "line": 38,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 2
    },
    {
      "line": 39,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "c = malloc_1 ( a )",
      "code": "c = malloc_1 ( a ) ;",
      "indent": 3
    },
    {
      "line": 41,
      "text": "d = malloc_2 ( b )",
      "code": "d = malloc_2 ( b ) ;",
      "indent": 3
    },
    {
      "line": 42,
      "text": "if cp [ c ] [ d ] is equal to 0",
      "code": "if ( cp [ c ] [ d ] == 0 )",
      "indent": 3
    },
    {
      "line": 43,
      "text": "increase cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 44,
      "text": "set cp [ c ] [ d ] to 1",
      "code": "cp [ c ] [ d ] = 1 ;",
      "indent": 4
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 47,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 2
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "void malloc_1 ( string a )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "map1 [ ' a ' ] = mc1 ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "string malloc_2 ( string a )"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘map2.std::map<_Key, _Tp, _Compare, _Alloc>::operator[]<std::__cxx11::basic_string<char>, int, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >(a)’ from ‘std::map<std::__cxx11::basic_string<char>, int>::mapped_type {aka int}’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 21,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "priority_queue < string > set1 ;"
      ],
      "err_line": 8,
      "err_msg": "‘class std::priority_queue<std::__cxx11::basic_string<char> >’ has no member named ‘count’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "priority_queue < string > set2 ;"
      ],
      "err_line": 17,
      "err_msg": "‘class std::priority_queue<std::__cxx11::basic_string<char> >’ has no member named ‘count’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "map < string > map1 ;"
      ],
      "err_line": 2,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "string malloc_1 ( string a )"
      ],
      "err_line": 9,
      "err_msg": "could not convert ‘map1.std::map<_Key, _Tp, _Compare, _Alloc>::operator[]<std::__cxx11::basic_string<char>, int, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >(a)’ from ‘std::map<std::__cxx11::basic_string<char>, int>::mapped_type {aka int}’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "set1 . push_back ( a ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘push_back’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "map1 [ a ++ ] = mc1 ;"
      ],
      "err_line": 12,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( set2 . compare ( a ) != 0 )"
      ],
      "err_line": 17,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘compare’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "set2 . push_back ( a ) ;"
      ],
      "err_line": 20,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘push_back’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "map2 [ a ++ ] += mc2 ;"
      ],
      "err_line": 21,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "for ( cin >> n ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "set1 . pop_back ( ) ;"
      ],
      "err_line": 30,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘pop_back’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "set2 . pop_back ( ) ;"
      ],
      "err_line": 31,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘pop_back’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "map1 clear clear ( ) ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘clear’"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "memset ( cp , 0 , cp ( cp ) ) ;"
      ],
      "err_line": 34,
      "err_msg": "‘cp’ cannot be used as a function"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "map2 . pop_back ( ) ;"
      ],
      "err_line": 35,
      "err_msg": "‘class std::map<std::__cxx11::basic_string<char>, int>’ has no member named ‘pop_back’"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "a , b ;"
      ],
      "err_line": 36,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "cp [ c ] [ j ] = 1 ;"
      ],
      "err_line": 44,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "if ( ! set1 . count ( a ) )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        12
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "if ( ! set1 . count ( a ) )",
        "map1 [ ' a ' ] = mc1 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        12,
        16
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "if ( ! set1 . count ( a ) )",
        "map1 [ ' a ' ] = mc1 ;",
        "string malloc_2 ( string a )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        12,
        17
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "if ( ! set1 . count ( a ) )",
        "map1 [ ' a ' ] = mc1 ;",
        "if ( ! set2 . count ( a ) )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        12,
        21
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "if ( ! set1 . count ( a ) )",
        "map1 [ ' a ' ] = mc1 ;",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        16
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "if ( ! set1 . count ( a ) )",
        "string malloc_2 ( string a )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        16,
        17
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "if ( ! set1 . count ( a ) )",
        "string malloc_2 ( string a )",
        "if ( ! set2 . count ( a ) )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        16,
        21
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "if ( ! set1 . count ( a ) )",
        "string malloc_2 ( string a )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        17
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "if ( ! set1 . count ( a ) )",
        "if ( ! set2 . count ( a ) )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        17,
        21
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "if ( ! set1 . count ( a ) )",
        "if ( ! set2 . count ( a ) )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        21
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "if ( ! set1 . count ( a ) )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "map1 [ ' a ' ] = mc1 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12,
        16
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "map1 [ ' a ' ] = mc1 ;",
        "string malloc_2 ( string a )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12,
        16,
        17
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "map1 [ ' a ' ] = mc1 ;",
        "string malloc_2 ( string a )",
        "if ( ! set2 . count ( a ) )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12,
        16,
        21
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "map1 [ ' a ' ] = mc1 ;",
        "string malloc_2 ( string a )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12,
        17
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "map1 [ ' a ' ] = mc1 ;",
        "if ( ! set2 . count ( a ) )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12,
        17,
        21
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "map1 [ ' a ' ] = mc1 ;",
        "if ( ! set2 . count ( a ) )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12,
        21
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "map1 [ ' a ' ] = mc1 ;",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "string malloc_2 ( string a )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        16,
        17
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "string malloc_2 ( string a )",
        "if ( ! set2 . count ( a ) )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        16,
        17,
        21
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "string malloc_2 ( string a )",
        "if ( ! set2 . count ( a ) )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        16,
        21
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "string malloc_2 ( string a )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "if ( ! set2 . count ( a ) )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        17,
        21
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "if ( ! set2 . count ( a ) )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        21
      ],
      "mod_code": [
        "void malloc_1 ( string a )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "if ( ! set1 . count ( a ) )",
        "map1 [ ' a ' ] = mc1 ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        12,
        16
      ],
      "mod_code": [
        "if ( ! set1 . count ( a ) )",
        "map1 [ ' a ' ] = mc1 ;",
        "string malloc_2 ( string a )"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        12,
        16,
        17
      ],
      "mod_code": [
        "if ( ! set1 . count ( a ) )",
        "map1 [ ' a ' ] = mc1 ;",
        "string malloc_2 ( string a )",
        "if ( ! set2 . count ( a ) )"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        12,
        16,
        21
      ],
      "mod_code": [
        "if ( ! set1 . count ( a ) )",
        "map1 [ ' a ' ] = mc1 ;",
        "string malloc_2 ( string a )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        12,
        17
      ],
      "mod_code": [
        "if ( ! set1 . count ( a ) )",
        "map1 [ ' a ' ] = mc1 ;",
        "if ( ! set2 . count ( a ) )"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        12,
        17,
        21
      ],
      "mod_code": [
        "if ( ! set1 . count ( a ) )",
        "map1 [ ' a ' ] = mc1 ;",
        "if ( ! set2 . count ( a ) )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        12,
        21
      ],
      "mod_code": [
        "if ( ! set1 . count ( a ) )",
        "map1 [ ' a ' ] = mc1 ;",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        16
      ],
      "mod_code": [
        "if ( ! set1 . count ( a ) )",
        "string malloc_2 ( string a )"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘map2.std::map<_Key, _Tp, _Compare, _Alloc>::operator[]<std::__cxx11::basic_string<char>, int, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >(a)’ from ‘std::map<std::__cxx11::basic_string<char>, int>::mapped_type {aka int}’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        8,
        16,
        17
      ],
      "mod_code": [
        "if ( ! set1 . count ( a ) )",
        "string malloc_2 ( string a )",
        "if ( ! set2 . count ( a ) )"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘map2.std::map<_Key, _Tp, _Compare, _Alloc>::operator[]<std::__cxx11::basic_string<char>, int, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >(a)’ from ‘std::map<std::__cxx11::basic_string<char>, int>::mapped_type {aka int}’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        8,
        16,
        17,
        21
      ],
      "mod_code": [
        "if ( ! set1 . count ( a ) )",
        "string malloc_2 ( string a )",
        "if ( ! set2 . count ( a ) )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘map2.std::map<_Key, _Tp, _Compare, _Alloc>::operator[]<std::__cxx11::basic_string<char>, int, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >(a)’ from ‘std::map<std::__cxx11::basic_string<char>, int>::mapped_type {aka int}’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        8,
        16,
        21
      ],
      "mod_code": [
        "if ( ! set1 . count ( a ) )",
        "string malloc_2 ( string a )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘map2.std::map<_Key, _Tp, _Compare, _Alloc>::operator[]<std::__cxx11::basic_string<char>, int, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >(a)’ from ‘std::map<std::__cxx11::basic_string<char>, int>::mapped_type {aka int}’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        8,
        17,
        21
      ],
      "mod_code": [
        "if ( ! set1 . count ( a ) )",
        "if ( ! set2 . count ( a ) )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 21,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        21
      ],
      "mod_code": [
        "if ( ! set1 . count ( a ) )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 21,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "map1 [ ' a ' ] = mc1 ;",
        "string malloc_2 ( string a )"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        12,
        16,
        17
      ],
      "mod_code": [
        "map1 [ ' a ' ] = mc1 ;",
        "string malloc_2 ( string a )",
        "if ( ! set2 . count ( a ) )"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        12,
        16,
        17,
        21
      ],
      "mod_code": [
        "map1 [ ' a ' ] = mc1 ;",
        "string malloc_2 ( string a )",
        "if ( ! set2 . count ( a ) )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        12,
        16,
        21
      ],
      "mod_code": [
        "map1 [ ' a ' ] = mc1 ;",
        "string malloc_2 ( string a )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "map1 [ ' a ' ] = mc1 ;",
        "if ( ! set2 . count ( a ) )"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        12,
        17,
        21
      ],
      "mod_code": [
        "map1 [ ' a ' ] = mc1 ;",
        "if ( ! set2 . count ( a ) )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        12,
        21
      ],
      "mod_code": [
        "map1 [ ' a ' ] = mc1 ;",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "string malloc_2 ( string a )",
        "if ( ! set2 . count ( a ) )"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘map2.std::map<_Key, _Tp, _Compare, _Alloc>::operator[]<std::__cxx11::basic_string<char>, int, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >(a)’ from ‘std::map<std::__cxx11::basic_string<char>, int>::mapped_type {aka int}’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        16,
        17,
        21
      ],
      "mod_code": [
        "string malloc_2 ( string a )",
        "if ( ! set2 . count ( a ) )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘map2.std::map<_Key, _Tp, _Compare, _Alloc>::operator[]<std::__cxx11::basic_string<char>, int, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >(a)’ from ‘std::map<std::__cxx11::basic_string<char>, int>::mapped_type {aka int}’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        16,
        21
      ],
      "mod_code": [
        "string malloc_2 ( string a )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘map2.std::map<_Key, _Tp, _Compare, _Alloc>::operator[]<std::__cxx11::basic_string<char>, int, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >(a)’ from ‘std::map<std::__cxx11::basic_string<char>, int>::mapped_type {aka int}’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        17,
        21
      ],
      "mod_code": [
        "if ( ! set2 . count ( a ) )",
        "map2 [ a ++ ] = mc2 ;"
      ],
      "err_line": 21,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    }
  ]
}