{
  "meta": {
    "index": 2667,
    "hitid": "3EHIMLB7F7TY4UADKGZCQZS1QIAH8R",
    "workerid": "AIWEXPJAU66D9",
    "probid": "785A",
    "subid": "48324636"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read user input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create a map from strings to integers called mp",
      "code": "map < string , int > mp ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "start for loop from i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create string s",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read s from the user input",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment mp [ s ]",
      "code": "mp [ s ] ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create long long variable sum with value 0",
      "code": "long long sum = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create map iterator it for a map of string to int",
      "code": "map < string , int > :: iterator it ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "move it through mp in a loop",
      "code": "for ( it = mp . begin ( ) ; it != mp . end ( ) ; it ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if value of the first element at it = \" Tetrahedron \"",
      "code": "if ( it -> first == \" Tetrahedron \" )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "change sum to sum + ( 4 * second element at it )",
      "code": "sum += ( 4 * it -> second ) ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if value of the first element at iterator it = \" Cube \"",
      "code": "else if ( it -> first == \" Cube \" )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increase sum by the second element at it * 6",
      "code": "sum += ( it -> second * 6 ) ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else if value of the first element , pointed by it = \" Octahedron \"",
      "code": "else if ( it -> first == \" Octahedron \" )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "change sum to sum + ( second value at it * 8 )",
      "code": "sum += ( it -> second * 8 ) ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else if value of the first element at it is \" Dodecahedron \"",
      "code": "else if ( it -> first == \" Dodecahedron \" )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increase sum by ( second element at it * 12 )",
      "code": "sum += ( it -> second * 12 ) ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else if first element of the pair , pointed by it , is \" Icosahedron \"",
      "code": "else if ( it -> first == \" Icosahedron \" )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "increase sum by ( second value at it * 20 )",
      "code": "sum += ( it -> second * 20 ) ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print sum",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 18,
      "err_msg": "‘element’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 20,
      "err_msg": "missing template arguments before ‘->’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "map < map < string > mp ;"
      ],
      "err_line": 3,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘int’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; it < mp . end ( ) ; it ++ )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator<’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( * it [ it ] == \" Tetrahedron \" )"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "sum += ( 4 * second . second ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else if ( * max_element ( it , it ) )"
      ],
      "err_line": 14,
      "err_msg": "could not convert ‘std::max_element<std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> > >(it, it).std::_Rb_tree_iterator<_Tp>::operator*<std::pair<const std::__cxx11::basic_string<char>, int> >()’ from ‘std::pair<const std::__cxx11::basic_string<char>, int>’ to ‘bool’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "sum += it [ it ] ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "else if ( * max_element ( it , it ) )"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘std::max_element<std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> > >(it, it).std::_Rb_tree_iterator<_Tp>::operator*<std::pair<const std::__cxx11::basic_string<char>, int> >()’ from ‘std::pair<const std::__cxx11::basic_string<char>, int>’ to ‘bool’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "sum += ( second [ it * 8 ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )"
      ],
      "err_line": 18,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "sum += ( it [ it ] * 12 ) ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "else if ( pair -> first * it == \" Icosahedron \" )"
      ],
      "err_line": 20,
      "err_msg": "missing template arguments before ‘->’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "sum += ( second * it * 20 ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        15
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        15,
        16
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        15,
        17
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        15,
        18
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        15,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        15,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        16
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        16,
        17
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        16,
        18
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        16,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        16,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        17
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        17,
        18
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        17,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        17,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        18
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        18,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        18,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        20,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        16
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        16,
        17
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        16,
        18
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        16,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        16,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        17
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        17,
        18
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        17,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        17,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        18
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        18,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        18,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        20,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        17
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        17,
        18
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        17,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        17,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        18
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        18,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        18,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        20,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17,
        18
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17,
        18,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17,
        18,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17,
        20,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += ( second [ it ] * 8 ) ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18,
        20,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21
      ],
      "mod_code": [
        "sum += ( 4 * second [ it ] ) ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        16
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        16,
        17
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        16,
        18
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        16,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        16,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        17
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        17,
        18
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        17,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        17,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        18
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        18,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        18,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        20,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        15,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        16,
        17
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        16,
        17,
        18
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        16,
        17,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        16,
        17,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        16,
        18
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        16,
        18,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        16,
        18,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        16,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        16,
        20,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        16,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        17
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        17,
        18
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        17,
        18,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        17,
        18,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        17,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        17,
        20,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        17,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        18,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        18,
        20,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        18,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        20,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        14,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        16,
        17
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        16,
        17,
        18
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        16,
        17,
        20
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        16,
        17,
        21
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        16,
        18
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        16,
        18,
        20
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        16,
        18,
        21
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        16,
        20
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        16,
        20,
        21
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        16,
        21
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        17
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        17,
        18
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        17,
        18,
        20
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        17,
        18,
        21
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        17,
        20
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        17,
        20,
        21
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        17,
        21
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 8 ) ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        18
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        18,
        20
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        18,
        20,
        21
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        18,
        21
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        20
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        20,
        21
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        15,
        21
      ],
      "mod_code": [
        "sum += it [ it ] * 6 ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’)"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        16,
        17,
        18
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        16,
        17,
        18,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        16,
        17,
        18,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        16,
        17,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        16,
        17,
        20,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        16,
        17,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 8 ) ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        16,
        18,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        16,
        18,
        20,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        16,
        18,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        16,
        20
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        16,
        20,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        16,
        21
      ],
      "mod_code": [
        "else if ( abs ( it , it ) )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘abs(std::map<std::__cxx11::basic_string<char>, int>::iterator&, std::map<std::__cxx11::basic_string<char>, int>::iterator&)’"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )"
      ],
      "err_line": 17,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        20
      ],
      "mod_code": [
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 17,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        20,
        21
      ],
      "mod_code": [
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        21
      ],
      "mod_code": [
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        20
      ],
      "mod_code": [
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 17,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        20,
        21
      ],
      "mod_code": [
        "sum += ( second [ it ] * 8 ) ;",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        21
      ],
      "mod_code": [
        "sum += ( second [ it ] * 8 ) ;",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        20
      ],
      "mod_code": [
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )"
      ],
      "err_line": 18,
      "err_msg": "‘element’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        20,
        21
      ],
      "mod_code": [
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 18,
      "err_msg": "‘element’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        21
      ],
      "mod_code": [
        "else if ( element [ it ] == \" Dodecahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 18,
      "err_msg": "‘element’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21
      ],
      "mod_code": [
        "else if ( pair -> first == \" Icosahedron \" )",
        "sum += ( second [ it ] * 20 ) ;"
      ],
      "err_line": 20,
      "err_msg": "missing template arguments before ‘->’ token"
    }
  ]
}