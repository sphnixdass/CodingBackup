{
  "meta": {
    "index": 946,
    "hitid": "3HA5ODM5KAML5FK633MLMRJBARJSVJ",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "557A",
    "subid": "44562462"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "mn1 , mx1 , mn2 , mx2 , mn3 , mx3 = int",
      "code": "int mn1 , mx1 , mn2 , mx2 , mn3 , mx3 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read mn1 then mx1 then mn2 then mx2 then mn3 then mx3",
      "code": "cin >> mn1 >> mx1 >> mn2 >> mx2 >> mn3 >> mx3 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "x1 , x2 , x3 = int with x1 = mn1 and x2 = mn2 and x3 = mn3",
      "code": "int x1 = mn1 , x2 = mn2 , x3 = mn3 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "loop while x1 + x2 + x3 is less than n",
      "code": "while ( x1 + x2 + x3 < n )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if x1 is less than mx1",
      "code": "if ( x1 < mx1 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment x1",
      "code": "x1 ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else if x2 is less than mx2",
      "code": "else if ( x2 < mx2 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increment x2",
      "code": "x2 ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if x3 is less than mx3",
      "code": "else if ( x3 < mx3 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increment x3",
      "code": "x3 ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print x1 and x2 and x3",
      "code": "cout << x1 << \" \" << x2 << \" \" << x3 << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        2
      ],
      "mod_code": [
        "int x1 = mn1 , x2 = mn2 , x3 = mn2 ;",
        "char n ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        5,
        1,
        2,
        4
      ],
      "mod_code": [
        "int x1 = mn1 , x2 = mn2 , x3 = mn2 ;",
        "char n ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cin >> mn1 >> mx1 >> mx2 >> mx2 >> mn3 >> mx3 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        5,
        1,
        2,
        14
      ],
      "mod_code": [
        "int x1 = mn1 , x2 = mn2 , x3 = mn2 ;",
        "char n ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cout << x1 << \" \" << x2 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        5,
        1,
        2,
        7
      ],
      "mod_code": [
        "int x1 = mn1 , x2 = mn2 , x3 = mn2 ;",
        "char n ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "if ( x1 <= mx1 )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "int x1 = mn1 , x2 = mn2 , x3 = mn2 ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        5,
        2,
        4
      ],
      "mod_code": [
        "int x1 = mn1 , x2 = mn2 , x3 = mn2 ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cin >> mn1 >> mx1 >> mx2 >> mx2 >> mn3 >> mx3 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        5,
        2,
        4,
        14
      ],
      "mod_code": [
        "int x1 = mn1 , x2 = mn2 , x3 = mn2 ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cin >> mn1 >> mx1 >> mx2 >> mx2 >> mn3 >> mx3 ;",
        "cout << x1 << \" \" << x2 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        5,
        2,
        4,
        7
      ],
      "mod_code": [
        "int x1 = mn1 , x2 = mn2 , x3 = mn2 ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cin >> mn1 >> mx1 >> mx2 >> mx2 >> mn3 >> mx3 ;",
        "if ( x1 <= mx1 )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        5,
        2,
        14
      ],
      "mod_code": [
        "int x1 = mn1 , x2 = mn2 , x3 = mn2 ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cout << x1 << \" \" << x2 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        5,
        2,
        14,
        7
      ],
      "mod_code": [
        "int x1 = mn1 , x2 = mn2 , x3 = mn2 ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cout << x1 << \" \" << x2 << endl ;",
        "if ( x1 <= mx1 )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        5,
        2,
        7
      ],
      "mod_code": [
        "int x1 = mn1 , x2 = mn2 , x3 = mn2 ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "if ( x1 <= mx1 )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char n ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "char n ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cin >> mn1 >> mx1 >> mx2 >> mx2 >> mn3 >> mx3 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        14
      ],
      "mod_code": [
        "char n ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cin >> mn1 >> mx1 >> mx2 >> mx2 >> mn3 >> mx3 ;",
        "cout << x1 << \" \" << x2 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        7
      ],
      "mod_code": [
        "char n ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cin >> mn1 >> mx1 >> mx2 >> mx2 >> mn3 >> mx3 ;",
        "if ( x1 <= mx1 )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        1,
        2,
        14
      ],
      "mod_code": [
        "char n ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cout << x1 << \" \" << x2 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        7
      ],
      "mod_code": [
        "char n ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cout << x1 << \" \" << x2 << endl ;",
        "if ( x1 <= mx1 )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "char n ;",
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "if ( x1 <= mx1 )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cin >> mn1 >> mx1 >> mx2 >> mx2 >> mn3 >> mx3 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        2,
        4,
        14
      ],
      "mod_code": [
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cin >> mn1 >> mx1 >> mx2 >> mx2 >> mn3 >> mx3 ;",
        "cout << x1 << \" \" << x2 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        2,
        4,
        14,
        7
      ],
      "mod_code": [
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cin >> mn1 >> mx1 >> mx2 >> mx2 >> mn3 >> mx3 ;",
        "cout << x1 << \" \" << x2 << endl ;",
        "if ( x1 <= mx1 )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        2,
        4,
        7
      ],
      "mod_code": [
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cin >> mn1 >> mx1 >> mx2 >> mx2 >> mn3 >> mx3 ;",
        "if ( x1 <= mx1 )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cout << x1 << \" \" << x2 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        2,
        14,
        7
      ],
      "mod_code": [
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "cout << x1 << \" \" << x2 << endl ;",
        "if ( x1 <= mx1 )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int mn1 , mx1 , mx2 , mx2 , mn3 , mx3 ;",
        "if ( x1 <= mx1 )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int mx2’"
    }
  ]
}