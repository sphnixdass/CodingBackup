{
  "meta": {
    "index": 849,
    "hitid": "3VADEH0UHCR80VNAHRDMGZUTO3NPS0",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "987A",
    "subid": "48365867"
  },
  "lines": [
    {
      "line": 0,
      "text": "create int n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make bool array has of size 8",
      "code": "bool has [ 8 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let char array sir of size 10",
      "code": "char sir [ 10 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "make char array colors of size 10 with array of size 10 containing { \" purple \" , \" green \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" }",
      "code": "char colors [ 10 ] [ 10 ] = { \" purple \" , \" green \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let char array stones of size 10 and with array of size 10 containing { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" }",
      "code": "char stones [ 10 ] [ 10 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "let ints i and j",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 1 to n",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read sir",
      "code": "cin >> sir ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if strcmp ( sir , colors [ 0 ] returns 0",
      "code": "if ( strcmp ( sir , colors [ 0 ] ) == 0 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set has [ 0 ] to true",
      "code": "has [ 0 ] = true ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "continue to next loop iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if strcmp ( sir , colors [ 1 ] ) returns 0",
      "code": "if ( strcmp ( sir , colors [ 1 ] ) == 0 )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set has [ 1 ] to true",
      "code": "has [ 1 ] = true ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "continue loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if strcmp ( sir , colors [ 2 ] ) returns 0",
      "code": "if ( strcmp ( sir , colors [ 2 ] ) == 0 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "set has [ 2 ] to true",
      "code": "has [ 2 ] = true ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "continue to next iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if strcmp ( sir , colors [ 3 ] ) is 0",
      "code": "if ( strcmp ( sir , colors [ 3 ] ) == 0 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "set has [ 3 ] to true",
      "code": "has [ 3 ] = true ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "next loop iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if strcmp ( sir , colors [ 4 ] ) returns 0",
      "code": "if ( strcmp ( sir , colors [ 4 ] ) == 0 )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "set has [ 4 ] to true",
      "code": "has [ 4 ] = true ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "continue loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "if strcmp ( sir , colors [ 5 ] ) returns 0",
      "code": "if ( strcmp ( sir , colors [ 5 ] ) == 0 )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "set has [ 5 ] to true",
      "code": "has [ 5 ] = true ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "continue to next loop iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "print 6 - n",
      "code": "cout << 6 - n << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "for i = 0 to 6 exclusive",
      "code": "for ( i = 0 ; i < 6 ; i ++ )",
      "indent": 1
    },
    {
      "line": 37,
      "text": "if has [ i ] is falsy , print stones [ i ]",
      "code": "if ( ! has [ i ] ) { cout << stones [ i ] << \" \\n \" ; }",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int t ;"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool s [ 8 ] ;"
      ],
      "err_line": 11,
      "err_msg": "‘has’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char sir [ 10 ] [ 10 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [10][10]’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Reality \" , \" Mind \" } ;"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "next ;"
      ],
      "err_line": 24,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        3,
        4,
        37
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        3,
        4,
        37,
        16
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        3,
        4,
        37,
        9
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        3,
        4,
        37,
        32
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        3,
        4,
        16
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        3,
        4,
        16,
        9
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "do",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        3,
        4,
        16,
        32
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        3,
        4,
        9
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        3,
        4,
        9,
        32
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "cin . get ( ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        3,
        4,
        32
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        3,
        37,
        16
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        37,
        16,
        9
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do",
        "cin . get ( ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        37,
        16,
        32
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        37,
        9,
        32
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "cin . get ( ) ;",
        "do"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        37,
        32
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        16,
        9
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "do",
        "cin . get ( ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        16,
        9,
        32
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "do",
        "cin . get ( ) ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        16,
        32
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "do",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        9,
        32
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "cin . get ( ) ;",
        "do"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        32
      ],
      "mod_code": [
        "char colors [ 10 ] [ 10 ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "do"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        37
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        4,
        37,
        16
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        4,
        37,
        16,
        9
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        4,
        37,
        16,
        32
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        4,
        37,
        9
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        4,
        37,
        9,
        32
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "cin . get ( ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        4,
        37,
        32
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        4,
        16,
        9
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "do",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        4,
        16,
        9,
        32
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "do",
        "cin . get ( ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        4,
        16,
        32
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        4,
        9,
        32
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "cin . get ( ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        4,
        32
      ],
      "mod_code": [
        "char stones [ 10 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘char [10]’"
    },
    {
      "mod_line": [
        37,
        16
      ],
      "mod_code": [
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        16,
        9
      ],
      "mod_code": [
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do",
        "cin . get ( ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        16,
        9,
        32
      ],
      "mod_code": [
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do",
        "cin . get ( ) ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        16,
        32
      ],
      "mod_code": [
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        9,
        32
      ],
      "mod_code": [
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "cin . get ( ) ;",
        "do"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        32
      ],
      "mod_code": [
        "if ( ! has [ i ] ) cout << stones [ i ] ;",
        "do"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "do",
        "cin . get ( ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        9,
        32
      ],
      "mod_code": [
        "do",
        "cin . get ( ) ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        32
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        32
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "do"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}