{
  "meta": {
    "index": 2398,
    "hitid": "3P458N04Q1BK4583938XJU3SRLY2XO",
    "workerid": "A1APYLD4DUK33J",
    "probid": "472A",
    "subid": "41733775"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer maxn with maxn = 1000000 + 5",
      "code": "const int maxn = 1000000 + 5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create boolean array isp with size maxn",
      "code": "bool isp [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare gp with no arguments , returning void",
      "code": "void gp ( )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "set bytes from isp to size of isp to value 0",
      "code": "memset ( isp , 0 , sizeof ( isp ) ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set isp [ 0 ] to 1",
      "code": "isp [ 0 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set isp [ 1 ] to 1",
      "code": "isp [ 1 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 2 to maxn - 2 exclusive",
      "code": "for ( int i = 2 ; i < maxn - 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if isp [ i ] is false",
      "code": "if ( ! isp [ i ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for j = i * 2 to maxn - 2 exclusive , increment j by i , set isp [ j ] to 1",
      "code": "for ( int j = i * 2 ; j < maxn - 2 ; j += i ) { isp [ j ] = 1 ; }",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "create integer array a with size maxn",
      "code": "int a [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 14,
      "text": "run gp",
      "code": "gp ( ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "while read n is true",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 2 to n exclusive",
      "code": "for ( int i = 2 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if isp [ n - 1 ] and isp [ i ]",
      "code": "if ( isp [ n - i ] && isp [ i ] )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "print i print \" \" print n - i print newline",
      "code": "cout << i << \" \" << n - i << endl ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "void gp ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "gp ( )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        2
      ],
      "mod_code": [
        "if ( isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        14
      ],
      "mod_code": [
        "if ( isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;",
        "gp ( )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        14,
        12
      ],
      "mod_code": [
        "if ( isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;",
        "gp ( )",
        "int a [ maxn ] [ maxn ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        14,
        20
      ],
      "mod_code": [
        "if ( isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;",
        "gp ( )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        12
      ],
      "mod_code": [
        "if ( isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;",
        "int a [ maxn ] [ maxn ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        12,
        20
      ],
      "mod_code": [
        "if ( isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;",
        "int a [ maxn ] [ maxn ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        20
      ],
      "mod_code": [
        "if ( isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        14
      ],
      "mod_code": [
        "if ( isp [ n - 1 ] && isp [ i ] )",
        "gp ( )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        18,
        14,
        12
      ],
      "mod_code": [
        "if ( isp [ n - 1 ] && isp [ i ] )",
        "gp ( )",
        "int a [ maxn ] [ maxn ] ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        18,
        14,
        12,
        20
      ],
      "mod_code": [
        "if ( isp [ n - 1 ] && isp [ i ] )",
        "gp ( )",
        "int a [ maxn ] [ maxn ] ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        18,
        14,
        20
      ],
      "mod_code": [
        "if ( isp [ n - 1 ] && isp [ i ] )",
        "gp ( )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        18,
        12,
        20
      ],
      "mod_code": [
        "if ( isp [ n - 1 ] && isp [ i ] )",
        "int a [ maxn ] [ maxn ] ;",
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        20
      ],
      "mod_code": [
        "if ( isp [ n - 1 ] && isp [ i ] )",
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        2
      ],
      "mod_code": [
        "if ( ! isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        14
      ],
      "mod_code": [
        "if ( ! isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;",
        "gp ( )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        14,
        12
      ],
      "mod_code": [
        "if ( ! isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;",
        "gp ( )",
        "int a [ maxn ] [ maxn ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        14,
        20
      ],
      "mod_code": [
        "if ( ! isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;",
        "gp ( )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        12
      ],
      "mod_code": [
        "if ( ! isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;",
        "int a [ maxn ] [ maxn ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        12,
        20
      ],
      "mod_code": [
        "if ( ! isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;",
        "int a [ maxn ] [ maxn ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        20
      ],
      "mod_code": [
        "if ( ! isp [ n - 1 ] && isp [ i ] )",
        "void gp ( ) ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        14
      ],
      "mod_code": [
        "if ( ! isp [ n - 1 ] && isp [ i ] )",
        "gp ( )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        18,
        14,
        12
      ],
      "mod_code": [
        "if ( ! isp [ n - 1 ] && isp [ i ] )",
        "gp ( )",
        "int a [ maxn ] [ maxn ] ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        18,
        14,
        12,
        20
      ],
      "mod_code": [
        "if ( ! isp [ n - 1 ] && isp [ i ] )",
        "gp ( )",
        "int a [ maxn ] [ maxn ] ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        18,
        14,
        20
      ],
      "mod_code": [
        "if ( ! isp [ n - 1 ] && isp [ i ] )",
        "gp ( )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        18,
        12,
        20
      ],
      "mod_code": [
        "if ( ! isp [ n - 1 ] && isp [ i ] )",
        "int a [ maxn ] [ maxn ] ;",
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        20
      ],
      "mod_code": [
        "if ( ! isp [ n - 1 ] && isp [ i ] )",
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "void gp ( ) ;",
        "gp ( )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14,
        12
      ],
      "mod_code": [
        "void gp ( ) ;",
        "gp ( )",
        "int a [ maxn ] [ maxn ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14,
        12,
        20
      ],
      "mod_code": [
        "void gp ( ) ;",
        "gp ( )",
        "int a [ maxn ] [ maxn ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14,
        20
      ],
      "mod_code": [
        "void gp ( ) ;",
        "gp ( )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "void gp ( ) ;",
        "int a [ maxn ] [ maxn ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        12,
        20
      ],
      "mod_code": [
        "void gp ( ) ;",
        "int a [ maxn ] [ maxn ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        20
      ],
      "mod_code": [
        "void gp ( ) ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "gp ( )",
        "int a [ maxn ] [ maxn ] ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        14,
        12,
        20
      ],
      "mod_code": [
        "gp ( )",
        "int a [ maxn ] [ maxn ] ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        14,
        20
      ],
      "mod_code": [
        "gp ( )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        12,
        20
      ],
      "mod_code": [
        "int a [ maxn ] [ maxn ] ;",
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}