{
  "meta": {
    "index": 1687,
    "hitid": "3PA41K45VNYMHX3ITOFBL8YX1PC7PX",
    "workerid": "AIWEXPJAU66D9",
    "probid": "92A",
    "subid": "47184605"
  },
  "lines": [
    {
      "line": 0,
      "text": "new constant long long called mod = 1e9 + 1",
      "code": "const long long mod = 1e9 + 1 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define constant integer N with value 1e6 + 5",
      "code": "const int N = 1e6 + 5 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "long long function gcd with long long arguments a and b",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "return gcd ( b , a % b ) if b is not 0 , or a otherwise",
      "code": "return b ? gcd ( b , a % b ) : a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "empty long long function pwr with long long arguments x and y",
      "code": "long long pwr ( long long x , long long y ) ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "empty bool function isprime with long long argument x",
      "code": "bool isprime ( long long x ) ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "define integers n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read n and m from the user input",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "declare new integer called sum with value n * ( n + 1 ) / 2",
      "code": "int sum = n * ( n + 1 ) / 2 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "assign the new value = m % sum to m",
      "code": "m = m % sum ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "increment i from 1 to n + 1 exclusive in a loop",
      "code": "for ( int i = 1 ; i < n + 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if m > = i",
      "code": "if ( m >= i )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "subtract i from m",
      "code": "m -= i ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print m",
      "code": "cout << m << endl ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 23,
      "text": "pwr is a long long function with long long arguments x and y",
      "code": "long long pwr ( long long x , long long y )",
      "indent": 0
    },
    {
      "line": 24,
      "text": "ans is a new long long = 1",
      "code": "long long ans = 1 ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "change x to x % mod",
      "code": "x = x % mod ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "while y > 0",
      "code": "while ( y > 0 )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if y & 1 is 1 , change the value of ans to ( x * ans ) % mod",
      "code": "if ( y & 1 ) ans = ( x * ans ) % mod ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "change the value of x to x squared % mod",
      "code": "x = ( x * x ) % mod ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "assign the new value = y / 2 to y",
      "code": "y = y / 2 ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "return ans",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 33,
      "text": "boolean function isprime with long long argument x",
      "code": "bool isprime ( long long x )",
      "indent": 0
    },
    {
      "line": 34,
      "text": "return false if x is less than 2",
      "code": "if ( x < 2 ) return false ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "return true if x is less than 4",
      "code": "if ( x < 4 ) return true ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "if x is even or x % 3 is equal to 0 return false",
      "code": "if ( x % 2 == 0 || x % 3 == 0 ) return false ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "in a for loop , while i * i < = x , increase i by 6 on each step , starting from 5",
      "code": "for ( long long i = 5 ; i * i <= x ; i += 6 )",
      "indent": 1
    },
    {
      "line": 38,
      "text": "if x % i = 0 or x % ( i + 2 ) = 0 , return false",
      "code": "if ( x % i == 0 || x % ( i + 2 ) == 0 ) return false ;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 40,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "bool isprime ( long long x )"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long long gcd ( long long a and long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cin >> n >> b ;"
      ],
      "err_line": 9,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else if ( m >= i )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "long long pwr ( long long x and long long y )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "bool isprime ( long long x argument )"
      ],
      "err_line": 33,
      "err_msg": "expected ‘,’ or ‘...’ before ‘argument’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "for ( ; i * i <= x ; i += 6 )"
      ],
      "err_line": 37,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "bool isprime ( long long x )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        5,
        6,
        37
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "bool isprime ( long long x )",
        "for ( ; i * i <= x ; i += 6 )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        5,
        6,
        37,
        2
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "bool isprime ( long long x )",
        "for ( ; i * i <= x ; i += 6 )",
        "long long gcd ( long long a and long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        6,
        37,
        13
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "bool isprime ( long long x )",
        "for ( ; i * i <= x ; i += 6 )",
        "else if ( m >= i )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        5,
        6,
        37,
        3
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "bool isprime ( long long x )",
        "for ( ; i * i <= x ; i += 6 )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        6,
        2
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "bool isprime ( long long x )",
        "long long gcd ( long long a and long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        6,
        2,
        13
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "bool isprime ( long long x )",
        "long long gcd ( long long a and long long b )",
        "else if ( m >= i )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        6,
        2,
        3
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "bool isprime ( long long x )",
        "long long gcd ( long long a and long long b )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        6,
        13
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "bool isprime ( long long x )",
        "else if ( m >= i )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        3
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "bool isprime ( long long x )",
        "else if ( m >= i )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        6,
        3
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "bool isprime ( long long x )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        37
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "for ( ; i * i <= x ; i += 6 )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        5,
        37,
        2
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "for ( ; i * i <= x ; i += 6 )",
        "long long gcd ( long long a and long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        37,
        2,
        13
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "for ( ; i * i <= x ; i += 6 )",
        "long long gcd ( long long a and long long b )",
        "else if ( m >= i )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        37,
        2,
        3
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "for ( ; i * i <= x ; i += 6 )",
        "long long gcd ( long long a and long long b )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        37,
        13
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "for ( ; i * i <= x ; i += 6 )",
        "else if ( m >= i )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        5,
        37,
        13,
        3
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "for ( ; i * i <= x ; i += 6 )",
        "else if ( m >= i )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        37,
        3
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "for ( ; i * i <= x ; i += 6 )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "long long gcd ( long long a and long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        2,
        13
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "long long gcd ( long long a and long long b )",
        "else if ( m >= i )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        2,
        13,
        3
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "long long gcd ( long long a and long long b )",
        "else if ( m >= i )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        2,
        3
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "long long gcd ( long long a and long long b )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "else if ( m >= i )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        5,
        13,
        3
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "else if ( m >= i )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "long long pwr ( long long x , long long y )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        37
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "for ( ; i * i <= x ; i += 6 )"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        37,
        2
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "for ( ; i * i <= x ; i += 6 )",
        "long long gcd ( long long a and long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        37,
        2,
        13
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "for ( ; i * i <= x ; i += 6 )",
        "long long gcd ( long long a and long long b )",
        "else if ( m >= i )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        37,
        2,
        3
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "for ( ; i * i <= x ; i += 6 )",
        "long long gcd ( long long a and long long b )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        37,
        13
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "for ( ; i * i <= x ; i += 6 )",
        "else if ( m >= i )"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        37,
        13,
        3
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "for ( ; i * i <= x ; i += 6 )",
        "else if ( m >= i )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        37,
        3
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "for ( ; i * i <= x ; i += 6 )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "long long gcd ( long long a and long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        2,
        13
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "long long gcd ( long long a and long long b )",
        "else if ( m >= i )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        2,
        13,
        3
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "long long gcd ( long long a and long long b )",
        "else if ( m >= i )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        2,
        3
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "long long gcd ( long long a and long long b )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "else if ( m >= i )"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        13,
        3
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "else if ( m >= i )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "bool isprime ( long long x )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        37,
        2
      ],
      "mod_code": [
        "for ( ; i * i <= x ; i += 6 )",
        "long long gcd ( long long a and long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        37,
        2,
        13
      ],
      "mod_code": [
        "for ( ; i * i <= x ; i += 6 )",
        "long long gcd ( long long a and long long b )",
        "else if ( m >= i )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        37,
        2,
        13,
        3
      ],
      "mod_code": [
        "for ( ; i * i <= x ; i += 6 )",
        "long long gcd ( long long a and long long b )",
        "else if ( m >= i )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        37,
        2,
        3
      ],
      "mod_code": [
        "for ( ; i * i <= x ; i += 6 )",
        "long long gcd ( long long a and long long b )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        37,
        13
      ],
      "mod_code": [
        "for ( ; i * i <= x ; i += 6 )",
        "else if ( m >= i )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        37,
        13,
        3
      ],
      "mod_code": [
        "for ( ; i * i <= x ; i += 6 )",
        "else if ( m >= i )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        37,
        3
      ],
      "mod_code": [
        "for ( ; i * i <= x ; i += 6 )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "long long gcd ( long long a and long long b )",
        "else if ( m >= i )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        13,
        3
      ],
      "mod_code": [
        "long long gcd ( long long a and long long b )",
        "else if ( m >= i )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "long long gcd ( long long a and long long b )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "else if ( m >= i )",
        "return b % b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    }
  ]
}