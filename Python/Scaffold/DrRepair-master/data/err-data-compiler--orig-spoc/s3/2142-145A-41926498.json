{
  "meta": {
    "index": 2142,
    "hitid": "3CIS7GGG65DKIHQOXISB1ODDVT0EUE",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "145A",
    "subid": "41926498"
  },
  "lines": [
    {
      "line": 0,
      "text": "s1 , s2 = integers",
      "code": "string s1 , s2 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "x , y = integers",
      "code": "int x , y ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "Read s1",
      "code": "cin >> s1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "Read s2",
      "code": "cin >> s2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to size of s1 exclusive",
      "code": "for ( int i = 0 ; i < s1 . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s1 [ i ] is not equal to s2 [ i ] and s2 [ i ] is 4 , then increment x",
      "code": "if ( s1 [ i ] != s2 [ i ] && s2 [ i ] == ' 4 ' ) x ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if s1 [ i ] is not equal to s2 [ i ] and s2 [ i ] is 7 , then increment y",
      "code": "if ( s1 [ i ] != s2 [ i ] && s2 [ i ] == ' 7 ' ) y ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print maximum value of x and y and a new line",
      "code": "cout << max ( x , y ) << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int s1 , s2 ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘s1’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( s1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int s1 , s2 ;",
        "getline ( cin , s2 ) ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        0,
        4,
        3
      ],
      "mod_code": [
        "int s1 , s2 ;",
        "getline ( cin , s2 ) ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int s1 , s2 ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "getline ( cin , s2 ) ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}