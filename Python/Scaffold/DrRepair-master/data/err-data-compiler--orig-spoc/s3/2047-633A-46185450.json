{
  "meta": {
    "index": 2047,
    "hitid": "3T2HW4QDUV171RI73GRPF4QWW9NC9R",
    "workerid": "AIWEXPJAU66D9",
    "probid": "633A",
    "subid": "46185450"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers a , b , c , i and j",
      "code": "int a , b , c , i , j ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a , b and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to c inclusive",
      "code": "for ( i = 0 ; i <= c ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j = 0 to c inclusive",
      "code": "for ( j = 0 ; j <= c ; j ++ )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if ( a * i + b * j ) = c",
      "code": "if ( ( a * i + b * j ) == c )",
      "indent": 3
    },
    {
      "line": 6,
      "text": "print \" Yes \"",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 4
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "else if ( a * i + b * j ) > c",
      "code": "else if ( ( a * i + b * j ) > c )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" No \"",
      "code": "cout << \" No \" << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        8,
        9
      ],
      "mod_code": [
        "cout << \" NO\\n \" ;",
        "else if ( a * i + b * j )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        8,
        9,
        6
      ],
      "mod_code": [
        "cout << \" NO\\n \" ;",
        "else if ( a * i + b * j )",
        "do",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "cout << \" NO\\n \" ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        9,
        6
      ],
      "mod_code": [
        "cout << \" NO\\n \" ;",
        "do",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "else if ( a * i + b * j )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        9,
        6
      ],
      "mod_code": [
        "else if ( a * i + b * j )",
        "do",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "do",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}