{
  "meta": {
    "index": 2665,
    "hitid": "3ACRLU860N85MIHIXRBGWYLP683EB7",
    "workerid": "AIWEXPJAU66D9",
    "probid": "785A",
    "subid": "48976386"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , i and sum be ints with sum = 0",
      "code": "int n , i , sum = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read from the input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "define new string called name",
      "code": "string name ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive incrementing i",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read name from the input",
      "code": "cin >> name ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if name is equal to \" Tetrahedron \"",
      "code": "if ( name == \" Tetrahedron \" )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "change sum to sum + 4",
      "code": "sum += 4 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if name is \" Cube \"",
      "code": "else if ( name == \" Cube \" )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "change sum to sum + 6",
      "code": "sum += 6 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if name is equal to \" Octahedron \"",
      "code": "else if ( name == \" Octahedron \" )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "add 8 to sum",
      "code": "sum += 8 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if name = \" Dodecahedron \"",
      "code": "else if ( name == \" Dodecahedron \" )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "add 12 to sum",
      "code": "sum += 12 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if name = \" Icosahedron \"",
      "code": "else if ( name == \" Icosahedron \" )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "add 20 to sum",
      "code": "sum += 20 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print sum to the standard output",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "{ cin >> n ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int name ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "{ cin >> n ;",
        "cout << sum ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        17,
        12
      ],
      "mod_code": [
        "{ cin >> n ;",
        "cout << sum ;",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        17,
        12,
        8
      ],
      "mod_code": [
        "{ cin >> n ;",
        "cout << sum ;",
        "else if ( name == \" [] \" )",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        17,
        12,
        5
      ],
      "mod_code": [
        "{ cin >> n ;",
        "cout << sum ;",
        "else if ( name == \" [] \" )",
        "cin . get ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        17,
        12,
        10
      ],
      "mod_code": [
        "{ cin >> n ;",
        "cout << sum ;",
        "else if ( name == \" [] \" )",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        17,
        8
      ],
      "mod_code": [
        "{ cin >> n ;",
        "cout << sum ;",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        17,
        8,
        5
      ],
      "mod_code": [
        "{ cin >> n ;",
        "cout << sum ;",
        "else if ( name == \" [] \" )",
        "cin . get ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        17,
        8,
        10
      ],
      "mod_code": [
        "{ cin >> n ;",
        "cout << sum ;",
        "else if ( name == \" [] \" )",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        17,
        5
      ],
      "mod_code": [
        "{ cin >> n ;",
        "cout << sum ;",
        "cin . get ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        17,
        5,
        10
      ],
      "mod_code": [
        "{ cin >> n ;",
        "cout << sum ;",
        "cin . get ( ) ;",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        17,
        10
      ],
      "mod_code": [
        "{ cin >> n ;",
        "cout << sum ;",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "{ cin >> n ;",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        12,
        8
      ],
      "mod_code": [
        "{ cin >> n ;",
        "else if ( name == \" [] \" )",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        12,
        8,
        5
      ],
      "mod_code": [
        "{ cin >> n ;",
        "else if ( name == \" [] \" )",
        "else if ( name == \" [] \" )",
        "cin . get ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        12,
        8,
        10
      ],
      "mod_code": [
        "{ cin >> n ;",
        "else if ( name == \" [] \" )",
        "else if ( name == \" [] \" )",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        12,
        5
      ],
      "mod_code": [
        "{ cin >> n ;",
        "else if ( name == \" [] \" )",
        "cin . get ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        12,
        5,
        10
      ],
      "mod_code": [
        "{ cin >> n ;",
        "else if ( name == \" [] \" )",
        "cin . get ( ) ;",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        12,
        10
      ],
      "mod_code": [
        "{ cin >> n ;",
        "else if ( name == \" [] \" )",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "{ cin >> n ;",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        8,
        5
      ],
      "mod_code": [
        "{ cin >> n ;",
        "else if ( name == \" [] \" )",
        "cin . get ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        8,
        5,
        10
      ],
      "mod_code": [
        "{ cin >> n ;",
        "else if ( name == \" [] \" )",
        "cin . get ( ) ;",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        8,
        10
      ],
      "mod_code": [
        "{ cin >> n ;",
        "else if ( name == \" [] \" )",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "{ cin >> n ;",
        "cin . get ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        5,
        10
      ],
      "mod_code": [
        "{ cin >> n ;",
        "cin . get ( ) ;",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "{ cin >> n ;",
        "else if ( name == \" [] \" )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘}’ at end of input"
    }
  ]
}