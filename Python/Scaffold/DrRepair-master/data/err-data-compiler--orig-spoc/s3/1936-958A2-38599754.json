{
  "meta": {
    "index": 1936,
    "hitid": "368IUKXGA523DXPDAEAJFUY16EU6PZ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "958A2",
    "subid": "38599754"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer maxn = 2000 + 5",
      "code": "const int maxn = 2000 + 5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string arrays s1 size maxn , s2 size maxn",
      "code": "string s1 [ maxn ] , s2 [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare integers n , m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n , m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive , read s1 [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> s1 [ i ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to m exclusive , read s2 [ i ]",
      "code": "for ( int i = 0 ; i < m ; i ++ ) cin >> s2 [ i ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n - m inclusive",
      "code": "for ( int i = 0 ; i <= n - m ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for j = 0 to n - m inclusive",
      "code": "for ( int j = 0 ; j <= n - m ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "declare boolean flag = true",
      "code": "bool flag = true ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "for p = 0 to p is less than m and flag , incrementing p",
      "code": "for ( int p = 0 ; p < m && flag ; p ++ )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if memory compare between address of s1 [ i + p ] [ 0 ] and address of s2 [ p ] [ j ] comparing m bytes , let flag be false",
      "code": "if ( memcmp ( & s1 [ i + p ] [ 0 ] , & s2 [ p ] [ j ] , m ) ) flag = false ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "print i + 1 , \" \" , j + 1 , \" \\ n \"",
      "code": "cout << i + 1 << \" \" << j + 1 << \" \\n \" ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘find’ in ‘s1’, which is of non-class type ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s1 [ maxn ] [ maxn ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘compare’ in ‘s1’, which is of non-class type ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "while ( cin >> n >> m )"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘find’ in ‘s1’, which is of non-class type ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’"
    },
    {
      "mod_line": [
        11,
        4,
        1
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "while ( cin >> n >> m )",
        "string s1 [ maxn ] [ maxn ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        11,
        4,
        1,
        14
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "while ( cin >> n >> m )",
        "string s1 [ maxn ] [ maxn ] ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        11,
        4,
        1,
        10
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "while ( cin >> n >> m )",
        "string s1 [ maxn ] [ maxn ] ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        11,
        4,
        14
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "while ( cin >> n >> m )",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘find’ in ‘s1’, which is of non-class type ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’"
    },
    {
      "mod_line": [
        11,
        4,
        14,
        10
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "while ( cin >> n >> m )",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        4,
        10
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "while ( cin >> n >> m )",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "string s1 [ maxn ] [ maxn ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        11,
        1,
        14
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "string s1 [ maxn ] [ maxn ] ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        11,
        1,
        14,
        10
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "string s1 [ maxn ] [ maxn ] ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        11,
        1,
        10
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "string s1 [ maxn ] [ maxn ] ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘find’ in ‘s1’, which is of non-class type ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’"
    },
    {
      "mod_line": [
        11,
        14,
        10
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "if ( ! s1 . find ( & s1 [ i + p ] [ 0 ] && ! & s2 [ p ] [ j ] ) { flag = false ; }",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘compare’ in ‘s1’, which is of non-class type ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’"
    },
    {
      "mod_line": [
        4,
        11,
        1
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;",
        "string s1 [ maxn ] [ maxn ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        4,
        11,
        1,
        14
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;",
        "string s1 [ maxn ] [ maxn ] ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        4,
        11,
        1,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;",
        "string s1 [ maxn ] [ maxn ] ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        4,
        11,
        14
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘compare’ in ‘s1’, which is of non-class type ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’"
    },
    {
      "mod_line": [
        4,
        11,
        14,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "string s1 [ maxn ] [ maxn ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        4,
        1,
        14
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "string s1 [ maxn ] [ maxn ] ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        4,
        1,
        14,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "string s1 [ maxn ] [ maxn ] ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        4,
        1,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "string s1 [ maxn ] [ maxn ] ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        4,
        14,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;",
        "string s1 [ maxn ] [ maxn ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        11,
        1,
        14
      ],
      "mod_code": [
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;",
        "string s1 [ maxn ] [ maxn ] ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        11,
        1,
        14,
        10
      ],
      "mod_code": [
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;",
        "string s1 [ maxn ] [ maxn ] ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        11,
        1,
        10
      ],
      "mod_code": [
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;",
        "string s1 [ maxn ] [ maxn ] ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘compare’ in ‘s1’, which is of non-class type ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’"
    },
    {
      "mod_line": [
        11,
        14,
        10
      ],
      "mod_code": [
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "if ( ! s1 . compare ( & s1 [ i + p ] [ 0 ] ) && ! ( & s2 [ p ] [ j ] ) ) flag = false ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "string s1 [ maxn ] [ maxn ] ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        1,
        14,
        10
      ],
      "mod_code": [
        "string s1 [ maxn ] [ maxn ] ;",
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "string s1 [ maxn ] [ maxn ] ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [2005] {aka std::__cxx11::basic_string<char> [2005]}’)"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "cout << i + 1 << endl << j + 1 << \" \\n \" ;",
        "for ( p = 0 ; p < m && flag ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘p’ was not declared in this scope"
    }
  ]
}