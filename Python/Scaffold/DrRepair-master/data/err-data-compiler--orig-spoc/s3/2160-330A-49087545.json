{
  "meta": {
    "index": 2160,
    "hitid": "33BFF6QPI15U0NZW3YQG0LUDOXSW30",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "330A",
    "subid": "49087545"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "r , c = int",
      "code": "int r , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read r then c",
      "code": "cin >> r >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "rows = vector of bools of size r and default value true",
      "code": "vector < bool > rows ( r , true ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "cols = vector of bools of size c and default value true",
      "code": "vector < bool > cols ( c , true ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "mat = two dimensional array of c of sizes r and c",
      "code": "char mat [ r ] [ c ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to r exclusive",
      "code": "for ( int i = 0 ; i < r ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "s = string",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for j = 0 to length of s exclusive",
      "code": "for ( int j = 0 ; j < s . length ( ) ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set mat [ i ] [ j ] = s [ j ]",
      "code": "mat [ i ] [ j ] = s [ j ] ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if s [ j ] equals ' S ' then set rows [ i ] to false",
      "code": "if ( s [ j ] == ' S ' ) { rows [ i ] = false ; }",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for j = 0 to c exclusive",
      "code": "for ( int j = 0 ; j < c ; j ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 0 to r exclusive",
      "code": "for ( int i = 0 ; i < r ; i ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if mat [ i ] [ j ] equals ' S ' then set cols [ j ] to false",
      "code": "if ( mat [ i ] [ j ] == ' S ' ) { cols [ j ] = false ; }",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "ans = int with ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for i = 0 to size of rows exclusive",
      "code": "for ( int i = 0 ; i < rows . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if rows [ i ] is true",
      "code": "if ( rows [ i ] )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "for j = 0 to c exclusive set mat [ i ] [ j ] to ' x '",
      "code": "for ( int j = 0 ; j < c ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "for j = 0 to size of cols exclusive",
      "code": "for ( int j = 0 ; j < cols . size ( ) ; j ++ )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "if cols [ j ] is true",
      "code": "if ( cols [ j ] )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "for i = 0 to r exclusive set mat [ i ] [ j ] to ' x '",
      "code": "for ( int i = 0 ; i < r ; i ++ ) { mat [ i ] [ j ] = ' x ' ; }",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "for i = 0 to r exclusive",
      "code": "for ( int i = 0 ; i < r ; i ++ )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "for j = 0 to c exclusive",
      "code": "for ( int j = 0 ; j < c ; j ++ )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "if mat [ i ] [ j ] equals ' x ' then increment ans",
      "code": "if ( mat [ i ] [ j ] == ' x ' ) { ans ++ ; }",
      "indent": 3
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int r , c"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c [ r ] ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int c [r]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < r ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( j = 0 ; j < c ; j ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < r ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "for ( i = 0 ; i < r ; i ++ )"
      ],
      "err_line": 30,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "for ( j = 0 ; j < c ; j ++ )"
      ],
      "err_line": 31,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        27
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        27,
        19
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
        "int ans = ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        27,
        19,
        21
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
        "int ans = ' 0 ' ;",
        "if ( ! rows [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        27,
        19,
        8
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
        "int ans = ' 0 ' ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        27,
        21
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
        "if ( ! rows [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        27,
        21,
        8
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
        "if ( ! rows [ i ] )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        27,
        8
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        19
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "int ans = ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        19,
        21
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "int ans = ' 0 ' ;",
        "if ( ! rows [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        19,
        21,
        8
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "int ans = ' 0 ' ;",
        "if ( ! rows [ i ] )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        19,
        21,
        27
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "int ans = ' 0 ' ;",
        "if ( ! rows [ i ] )",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        19,
        8
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "int ans = ' 0 ' ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        19,
        8,
        27
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "int ans = ' 0 ' ;",
        "s >> s ;",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        19,
        27
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "int ans = ' 0 ' ;",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "if ( ! rows [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        21,
        8
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "if ( ! rows [ i ] )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        21,
        8,
        27
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "if ( ! rows [ i ] )",
        "s >> s ;",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        21,
        27
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "if ( ! rows [ i ] )",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        8,
        27
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "s >> s ;",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        27
      ],
      "mod_code": [
        "int mat [ r ] [ c ] , c ;",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        27,
        19
      ],
      "mod_code": [
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
        "int ans = ' 0 ' ;"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        27,
        19,
        21
      ],
      "mod_code": [
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
        "int ans = ' 0 ' ;",
        "if ( ! rows [ i ] )"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        27,
        19,
        21,
        8
      ],
      "mod_code": [
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
        "int ans = ' 0 ' ;",
        "if ( ! rows [ i ] )",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        27,
        19,
        8
      ],
      "mod_code": [
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
        "int ans = ' 0 ' ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        27,
        21
      ],
      "mod_code": [
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
        "if ( ! rows [ i ] )"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        27,
        21,
        8
      ],
      "mod_code": [
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
        "if ( ! rows [ i ] )",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        27,
        8
      ],
      "mod_code": [
        "for ( int j = 0 ; j < r ; j ++ ) { mat [ i ] [ j ] = ' x ' ; }",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        21,
        8
      ],
      "mod_code": [
        "int ans = ' 0 ' ;",
        "if ( ! rows [ i ] )",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        21,
        8,
        27
      ],
      "mod_code": [
        "int ans = ' 0 ' ;",
        "if ( ! rows [ i ] )",
        "s >> s ;",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        21,
        27
      ],
      "mod_code": [
        "int ans = ' 0 ' ;",
        "if ( ! rows [ i ] )",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        8
      ],
      "mod_code": [
        "int ans = ' 0 ' ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        8,
        27
      ],
      "mod_code": [
        "int ans = ' 0 ' ;",
        "s >> s ;",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        27
      ],
      "mod_code": [
        "int ans = ' 0 ' ;",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        8
      ],
      "mod_code": [
        "if ( ! rows [ i ] )",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        8,
        27
      ],
      "mod_code": [
        "if ( ! rows [ i ] )",
        "s >> s ;",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        27
      ],
      "mod_code": [
        "if ( ! rows [ i ] )",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        27
      ],
      "mod_code": [
        "s >> s ;",
        "for ( int j = 0 ; j < r ; j ++ ) mat [ i ] [ j ] = ' x ' ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}