{
  "meta": {
    "index": 350,
    "hitid": "3PCPFX4U40KKW2J3BKSC951O49FFQY",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "339A",
    "subid": "48924462"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "xay = string",
      "code": "string xay ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read xay",
      "code": "cin >> xay ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "result1 = string with result1 = \" \"",
      "code": "string result1 = \" \" ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "result2 = string with result2 = \" \"",
      "code": "string result2 = \" \" ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "result3 = string with result3 = \" \"",
      "code": "string result3 = \" \" ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "i = integer with i = 0",
      "code": "int i = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while ( i < xay . length ( ) )",
      "code": "while ( i < xay . length ( ) )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if ( xay [ i ] is 1 )",
      "code": "if ( xay [ i ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "insert ( result1 . length ( ) , \" 1 \" ) in result1",
      "code": "result1 . insert ( result1 . length ( ) , \" 1 \" ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if ( xay [ i ] is 2 )",
      "code": "else if ( xay [ i ] == ' 2 ' )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "insert ( result2 . length ( ) , \" 2 \" ) in result2",
      "code": "result2 . insert ( result2 . length ( ) , \" 2 \" ) ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if ( xay [ i ] is 3 )",
      "code": "else if ( xay [ i ] == ' 3 ' )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "insert ( result3 . length ( ) , \" 3 \" ) in result3",
      "code": "result3 . insert ( result3 . length ( ) , \" 3 \" ) ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "result = string with result = \" \"",
      "code": "string result = \" \" ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "result = result1 + result2 + result3",
      "code": "result = result1 + result2 + result3 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 0 to result . length ( ) exclusive",
      "code": "for ( int i = 0 ; i < result . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if ( i is result . length ( ) - 1 )",
      "code": "if ( i == result . length ( ) - 1 )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print result [ i ]",
      "code": "cout << result [ i ] ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 23,
      "text": "print result [ i ] , +",
      "code": "cout << result [ i ] << \" + \" ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char xay ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘length’ in ‘xay’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( xay ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string result1 = \" \""
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string result2 = \" \""
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string result3 = \" \""
      ],
      "err_line": 6,
      "err_msg": "expected ‘,’ or ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "result1 . insert ( ( result1 . length ( ) , \" 1 \" ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(const char [2])’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "result2 . insert ( ( result2 . length ( ) , \" 2 \" ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(const char [2])’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "result3 . insert ( ( result3 . length ( ) , \" 3 \" ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(const char [2])’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "string result = \" \""
      ],
      "err_line": 18,
      "err_msg": "expected ‘,’ or ‘;’ before ‘result’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}