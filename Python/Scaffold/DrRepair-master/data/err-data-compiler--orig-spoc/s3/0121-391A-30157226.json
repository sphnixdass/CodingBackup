{
  "meta": {
    "index": 121,
    "hitid": "3QE4DGPGBR5JLXS0O7RHON0V9WSG4B",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "391A",
    "subid": "30157226"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integers n , i , j , cnt = 0",
      "code": "int n , i , j , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "s = string array",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "input s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to less than s . size ( ) do the following",
      "code": "for ( i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = i + 1 to less than s . size ( ) do the following",
      "code": "for ( j = i + 1 ; j < s . size ( ) ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if s [ j ] is not equal to s [ i ] then do the following break",
      "code": "if ( s [ j ] != s [ i ] ) break ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if j - i modulo 2 is 0 then do the following cnt + +",
      "code": "if ( ( j - i ) % 2 == 0 ) cnt ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set i to j - 1",
      "code": "i = j - 1 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "output cnt",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s [ 101 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "string s [ 101 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’)"
    },
    {
      "mod_line": [
        5,
        2,
        3
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "string s [ 101 ] ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid operands of types ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2,
        3,
        8
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "string s [ 101 ] ;",
        "s >> s ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid operands of types ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2,
        3,
        9
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "string s [ 101 ] ;",
        "s >> s ;",
        "i -= 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid operands of types ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2,
        3,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "string s [ 101 ] ;",
        "s >> s ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        2,
        8
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "string s [ 101 ] ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’)"
    },
    {
      "mod_line": [
        5,
        2,
        8,
        9
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "string s [ 101 ] ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "i -= 1 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’)"
    },
    {
      "mod_line": [
        5,
        2,
        8,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "string s [ 101 ] ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        2,
        9
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "string s [ 101 ] ;",
        "i -= 1 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’)"
    },
    {
      "mod_line": [
        5,
        2,
        9,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "string s [ 101 ] ;",
        "i -= 1 ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        2,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "string s [ 101 ] ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        3,
        8
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "s >> s ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        3,
        8,
        9
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "s >> s ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "i -= 1 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        3,
        8,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "s >> s ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        3,
        9
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "s >> s ;",
        "i -= 1 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        3,
        9,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "s >> s ;",
        "i -= 1 ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        3,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "s >> s ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        8,
        9,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "i -= 1 ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        8,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        9,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "i -= 1 ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < s . size ( ) ; j ++ )",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid operands of types ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "s >> s ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid operands of types ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        9
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "s >> s ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "i -= 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid operands of types ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        1
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "s >> s ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        9
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "s >> s ;",
        "i -= 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid operands of types ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        3,
        9,
        1
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "s >> s ;",
        "i -= 1 ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        1
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "s >> s ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’)"
    },
    {
      "mod_line": [
        2,
        8,
        9
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "i -= 1 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’)"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        1
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "i -= 1 ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        8,
        1
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "i -= 1 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’)"
    },
    {
      "mod_line": [
        2,
        9,
        1
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "i -= 1 ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "string s [ 101 ] ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        8,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "i -= 1 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        8,
        9,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "i -= 1 ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        8,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "i -= 1 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        9,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "i -= 1 ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        8,
        9,
        1
      ],
      "mod_code": [
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "i -= 1 ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( j - i % 2 == 0 ) cnt ++ ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "i -= 1 ;",
        "int n , i , j , cnt , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    }
  ]
}