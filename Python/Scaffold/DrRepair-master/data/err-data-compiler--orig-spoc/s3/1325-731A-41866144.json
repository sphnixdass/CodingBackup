{
  "meta": {
    "index": 1325,
    "hitid": "35YHTYFL1GXC1AFKXJMMFS0WL1UVF8",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "731A",
    "subid": "41866144"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "dist = integer = 0",
      "code": "int dist = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "str = string",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if the absolute value of in integer form str [ 0 ] - 97 > 13",
      "code": "if ( abs ( ( int ) str [ 0 ] - 97 ) > 13 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "dist = dist + 26 - the absolute value of str [ 0 ] in integer form - 97",
      "code": "dist += 26 - abs ( ( int ) str [ 0 ] - 97 ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "dist = dist + the absolute value of str [ 0 ] in integer form - 97",
      "code": "dist += abs ( ( int ) str [ 0 ] - 97 ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for i = 1 to length of str exclusive",
      "code": "for ( int i = 1 ; i < str . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if the absolute value of str [ i - 1 ] in integer form - str [ i ] in integer form > 13",
      "code": "if ( abs ( ( int ) str [ i - 1 ] - ( int ) str [ i ] ) > 13 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "dist = dist + 26 - absolute value of str [ i - 1 ] in integer form - str [ i ] in integer form",
      "code": "dist += 26 - abs ( ( int ) str [ i - 1 ] - ( int ) str [ i ] ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "dist = dist + absolute value of str [ i - 1 ] in integer form - str [ i ] in integer form",
      "code": "dist += abs ( ( int ) str [ i - 1 ] - ( int ) str [ i ] ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print dist",
      "code": "cout << dist << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘abs(char&, char&)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int dist [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [0]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( abs ( str [ i - 1 ] ) > 13 ) { form . push_back ( str [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "‘form’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        12
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘abs(char&, char&)’"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        3
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        9,
        12
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘abs(char&, char&)’"
    },
    {
      "mod_line": [
        5,
        9,
        12,
        3
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        9,
        12,
        3
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "dist += abs ( str [ i - 1 ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        9,
        3
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        10,
        12
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘abs(char&, char&)’"
    },
    {
      "mod_line": [
        5,
        10,
        12,
        3
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        10,
        12,
        3
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "dist += abs ( str [ i - 1 ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        10,
        3
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘abs(char&, char&)’"
    },
    {
      "mod_line": [
        5,
        12,
        3
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        12,
        3
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "dist += abs ( str [ i - 1 ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ 0 ] ) - 97 ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        10,
        12
      ],
      "mod_code": [
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘abs(char&, char&)’"
    },
    {
      "mod_line": [
        9,
        10,
        12,
        3
      ],
      "mod_code": [
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        10,
        12,
        3
      ],
      "mod_code": [
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "dist += abs ( str [ i - 1 ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        10,
        3
      ],
      "mod_code": [
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘abs(char&, char&)’"
    },
    {
      "mod_line": [
        9,
        12,
        3
      ],
      "mod_code": [
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        12,
        3
      ],
      "mod_code": [
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "dist += abs ( str [ i - 1 ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "if ( abs ( str [ i - 1 ] ) > 13 )",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘abs(char&, char&)’"
    },
    {
      "mod_line": [
        10,
        12,
        3
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        12,
        3
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "dist += abs ( str [ i - 1 ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "dist = dist + 26 - abs ( str [ i - 1 ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "dist += abs ( str [ i - 1 ] , str [ i ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "dist += abs ( str [ i - 1 ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}