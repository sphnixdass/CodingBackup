{
  "meta": {
    "index": 1514,
    "hitid": "39N6W9XWRDHZJ46KDEFO4C424XSGYX",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1097A",
    "subid": "48935098"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string variable my",
      "code": "string my ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read my",
      "code": "cin >> my ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create vector of strings his with size 5",
      "code": "vector < string > his ( 5 ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 0 to 5 exclusive read his [ i ]",
      "code": "for ( int i = 0 ; i < 5 ; i ++ ) { cin >> his [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer i = 0 to 5 exclusive",
      "code": "for ( int i = 0 ; i < 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if his [ i ] [ 0 ] = my [ 0 ]",
      "code": "if ( his [ i ] [ 0 ] == my [ 0 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to 5 exclusive",
      "code": "for ( int i = 0 ; i < 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if his [ i ] [ 1 ] = my [ 1 ]",
      "code": "if ( his [ i ] [ 1 ] == my [ 1 ] )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string my , my ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "my >> my ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "vector < string > his [ 5 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "my >> my ;",
        "vector < string > his [ 5 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        1
      ],
      "mod_code": [
        "my >> my ;",
        "vector < string > his [ 5 ] ;",
        "string my , my ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        2,
        3,
        1,
        12
      ],
      "mod_code": [
        "my >> my ;",
        "vector < string > his [ 5 ] ;",
        "string my , my ;",
        "if ( ! his [ i ] [ 1 ] == my [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        2,
        3,
        1,
        6
      ],
      "mod_code": [
        "my >> my ;",
        "vector < string > his [ 5 ] ;",
        "string my , my ;",
        "if ( ! his [ i ] [ 0 ] == my [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        2,
        3,
        12
      ],
      "mod_code": [
        "my >> my ;",
        "vector < string > his [ 5 ] ;",
        "if ( ! his [ i ] [ 1 ] == my [ 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        12,
        6
      ],
      "mod_code": [
        "my >> my ;",
        "vector < string > his [ 5 ] ;",
        "if ( ! his [ i ] [ 1 ] == my [ 1 ] )",
        "if ( ! his [ i ] [ 0 ] == my [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "my >> my ;",
        "vector < string > his [ 5 ] ;",
        "if ( ! his [ i ] [ 0 ] == my [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "my >> my ;",
        "string my , my ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        2,
        1,
        12
      ],
      "mod_code": [
        "my >> my ;",
        "string my , my ;",
        "if ( ! his [ i ] [ 1 ] == my [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        2,
        1,
        12,
        6
      ],
      "mod_code": [
        "my >> my ;",
        "string my , my ;",
        "if ( ! his [ i ] [ 1 ] == my [ 1 ] )",
        "if ( ! his [ i ] [ 0 ] == my [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "my >> my ;",
        "string my , my ;",
        "if ( ! his [ i ] [ 0 ] == my [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "my >> my ;",
        "if ( ! his [ i ] [ 1 ] == my [ 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12,
        6
      ],
      "mod_code": [
        "my >> my ;",
        "if ( ! his [ i ] [ 1 ] == my [ 1 ] )",
        "if ( ! his [ i ] [ 0 ] == my [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "my >> my ;",
        "if ( ! his [ i ] [ 0 ] == my [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "vector < string > his [ 5 ] ;",
        "string my , my ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        3,
        1,
        12
      ],
      "mod_code": [
        "vector < string > his [ 5 ] ;",
        "string my , my ;",
        "if ( ! his [ i ] [ 1 ] == my [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        3,
        1,
        12,
        6
      ],
      "mod_code": [
        "vector < string > his [ 5 ] ;",
        "string my , my ;",
        "if ( ! his [ i ] [ 1 ] == my [ 1 ] )",
        "if ( ! his [ i ] [ 0 ] == my [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        3,
        1,
        6
      ],
      "mod_code": [
        "vector < string > his [ 5 ] ;",
        "string my , my ;",
        "if ( ! his [ i ] [ 0 ] == my [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "vector < string > his [ 5 ] ;",
        "if ( ! his [ i ] [ 1 ] == my [ 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        3,
        12,
        6
      ],
      "mod_code": [
        "vector < string > his [ 5 ] ;",
        "if ( ! his [ i ] [ 1 ] == my [ 1 ] )",
        "if ( ! his [ i ] [ 0 ] == my [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "vector < string > his [ 5 ] ;",
        "if ( ! his [ i ] [ 0 ] == my [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "string my , my ;",
        "if ( ! his [ i ] [ 1 ] == my [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        1,
        12,
        6
      ],
      "mod_code": [
        "string my , my ;",
        "if ( ! his [ i ] [ 1 ] == my [ 1 ] )",
        "if ( ! his [ i ] [ 0 ] == my [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "string my , my ;",
        "if ( ! his [ i ] [ 0 ] == my [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string my’"
    }
  ]
}