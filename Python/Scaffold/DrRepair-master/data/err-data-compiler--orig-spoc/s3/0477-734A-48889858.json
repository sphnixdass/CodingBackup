{
  "meta": {
    "index": 477,
    "hitid": "3PKVGQTFIHEQ8UFYTP903GI95J9YR6",
    "workerid": "AAGJMIEHD79EY",
    "probid": "734A",
    "subid": "48889858"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , tota and totd = integers with tota = 0 and totd = 0",
      "code": "int n , tota = 0 , totd = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create char c",
      "code": "char c ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if c is equal to ' A '",
      "code": "if ( c == ' A ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment tota",
      "code": "tota ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment totd",
      "code": "totd ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if tota is greater than totd",
      "code": "if ( tota > totd )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" Anton \"",
      "code": "cout << \" Anton \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else if totd is greater than tota",
      "code": "else if ( totd > tota )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" Danik \"",
      "code": "cout << \" Danik \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" Friendship \"",
      "code": "cout << \" Friendship \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char c ="
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( c ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        13,
        15
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Anton \" ;",
        "cout << \" Danik \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        13,
        15,
        14
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Anton \" ;",
        "cout << \" Danik \" ;",
        "else if ( totd >= 5 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        13,
        15,
        12
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Anton \" ;",
        "cout << \" Danik \" ;",
        "if ( tota >= totd )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        13,
        14
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Anton \" ;",
        "else if ( totd >= 5 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        13,
        14,
        15
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Anton \" ;",
        "else if ( totd >= 5 )",
        "cout << \" no\\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        13,
        14,
        12
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Anton \" ;",
        "else if ( totd >= 5 )",
        "if ( tota >= totd )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        13,
        15
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Anton \" ;",
        "cout << \" no\\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        13,
        15,
        12
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Anton \" ;",
        "cout << \" no\\n \" ;",
        "if ( tota >= totd )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        13,
        12
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Anton \" ;",
        "if ( tota >= totd )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Danik \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        15,
        14
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Danik \" ;",
        "else if ( totd >= 5 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        15,
        14,
        12
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Danik \" ;",
        "else if ( totd >= 5 )",
        "if ( tota >= totd )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        15,
        12
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" Danik \" ;",
        "if ( tota >= totd )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "else if ( totd >= 5 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        14,
        15
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "else if ( totd >= 5 )",
        "cout << \" no\\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        14,
        15,
        12
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "else if ( totd >= 5 )",
        "cout << \" no\\n \" ;",
        "if ( tota >= totd )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        14,
        12
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "else if ( totd >= 5 )",
        "if ( tota >= totd )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" no\\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        15,
        12
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "cout << \" no\\n \" ;",
        "if ( tota >= totd )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int n , tota , totd = 0 , totd = 0 ;",
        "if ( tota >= totd )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int totd’"
    }
  ]
}