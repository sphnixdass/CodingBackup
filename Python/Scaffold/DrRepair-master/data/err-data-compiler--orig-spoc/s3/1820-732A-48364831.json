{
  "meta": {
    "index": 1820,
    "hitid": "32LAQ1JNT9JM708LNDH60ADEY3WTUS",
    "workerid": "A59A6LMCQRBL3",
    "probid": "732A",
    "subid": "48364831"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "price , coin = int",
      "code": "int price , coin ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read price , coin",
      "code": "cin >> price >> coin ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "counter = int , counter = 1",
      "code": "int counter = 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while true",
      "code": "while ( 1 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if price * counter % 10 = 0 OR price * counter % 10 = coin",
      "code": "if ( price * counter % 10 == 0 || price * counter % 10 == coin )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "print counter",
      "code": "cout << counter << endl ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "add one to counter",
      "code": "counter ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int counter , counter = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cin >> price >> price ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        2,
        6
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cin >> price >> price ;",
        "cout << counter ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        2,
        6,
        3
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cin >> price >> price ;",
        "cout << counter ;",
        "int counter , counter = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        5,
        2,
        6,
        1
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cin >> price >> price ;",
        "cout << counter ;",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        5,
        2,
        6,
        8
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cin >> price >> price ;",
        "cout << counter ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        2,
        3
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cin >> price >> price ;",
        "int counter , counter = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        5,
        2,
        3,
        1
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cin >> price >> price ;",
        "int counter , counter = 1 ;",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        5,
        2,
        3,
        8
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cin >> price >> price ;",
        "int counter , counter = 1 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        5,
        2,
        1
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cin >> price >> price ;",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        5,
        2,
        1,
        8
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cin >> price >> price ;",
        "int price , coin",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        5,
        2,
        8
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cin >> price >> price ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cout << counter ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        6,
        3
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cout << counter ;",
        "int counter , counter = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        5,
        6,
        3,
        1
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cout << counter ;",
        "int counter , counter = 1 ;",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        5,
        6,
        3,
        8
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cout << counter ;",
        "int counter , counter = 1 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        5,
        6,
        1
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cout << counter ;",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        5,
        6,
        1,
        8
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cout << counter ;",
        "int price , coin",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        5,
        6,
        8
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "cout << counter ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "int counter , counter = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        5,
        3,
        1
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "int counter , counter = 1 ;",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        5,
        3,
        1,
        8
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "int counter , counter = 1 ;",
        "int price , coin",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        5,
        3,
        8
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "int counter , counter = 1 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        5,
        1,
        8
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "int price , coin",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "if ( price * counter % 10 == 0 || price * counter % 10 = coin )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        2,
        6,
        3
      ],
      "mod_code": [
        "cin >> price >> price ;",
        "cout << counter ;",
        "int counter , counter = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        2,
        6,
        3,
        1
      ],
      "mod_code": [
        "cin >> price >> price ;",
        "cout << counter ;",
        "int counter , counter = 1 ;",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        2,
        6,
        3,
        8
      ],
      "mod_code": [
        "cin >> price >> price ;",
        "cout << counter ;",
        "int counter , counter = 1 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        2,
        6,
        1
      ],
      "mod_code": [
        "cin >> price >> price ;",
        "cout << counter ;",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        2,
        6,
        1,
        8
      ],
      "mod_code": [
        "cin >> price >> price ;",
        "cout << counter ;",
        "int price , coin",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "cin >> price >> price ;",
        "cout << counter ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cin >> price >> price ;",
        "int counter , counter = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        2,
        3,
        1
      ],
      "mod_code": [
        "cin >> price >> price ;",
        "int counter , counter = 1 ;",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        2,
        3,
        1,
        8
      ],
      "mod_code": [
        "cin >> price >> price ;",
        "int counter , counter = 1 ;",
        "int price , coin",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "cin >> price >> price ;",
        "int counter , counter = 1 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "cin >> price >> price ;",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        2,
        1,
        8
      ],
      "mod_code": [
        "cin >> price >> price ;",
        "int price , coin",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "cin >> price >> price ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "cout << counter ;",
        "int counter , counter = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        6,
        3,
        1
      ],
      "mod_code": [
        "cout << counter ;",
        "int counter , counter = 1 ;",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        6,
        3,
        1,
        8
      ],
      "mod_code": [
        "cout << counter ;",
        "int counter , counter = 1 ;",
        "int price , coin",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        6,
        3,
        8
      ],
      "mod_code": [
        "cout << counter ;",
        "int counter , counter = 1 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "cout << counter ;",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        6,
        1,
        8
      ],
      "mod_code": [
        "cout << counter ;",
        "int price , coin",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "cout << counter ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "int counter , counter = 1 ;",
        "int price , coin"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        3,
        1,
        8
      ],
      "mod_code": [
        "int counter , counter = 1 ;",
        "int price , coin",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int counter , counter = 1 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int price , coin",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘cin’"
    }
  ]
}