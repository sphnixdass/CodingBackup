{
  "meta": {
    "index": 599,
    "hitid": "3Z8UJEJOCZ7JORMOANGOM1M2RJ893Z",
    "workerid": "A1APYLD4DUK33J",
    "probid": "593A",
    "subid": "43451257"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer INF = 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer array mp size 200 by 200",
      "code": "int mp [ 200 ] [ 200 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "set bytes from mp to size of mp to value 0",
      "code": "memset ( mp , 0 , sizeof ( mp ) ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while decrement n is true",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "declare integer len = length of s",
      "code": "int len = s . length ( ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "declare integers flag1 , flag2",
      "code": "int flag1 , flag2 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "let flag1 be flag2 be 0",
      "code": "flag1 = flag2 = 0 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "for i = 0 to len exclusive",
      "code": "for ( int i = 0 ; i < len ; i ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if flag1 is s [ i ] or flag2 is s [ i ] , end current loop iteration",
      "code": "if ( flag1 == s [ i ] || flag2 == s [ i ] ) continue ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if not flag1",
      "code": "if ( ! flag1 )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "let flag1 be s [ i ]",
      "code": "flag1 = s [ i ] ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "end loop iteration",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if not flag2",
      "code": "if ( ! flag2 )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "let flag2 be s [ i ]",
      "code": "flag2 = s [ i ] ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "end loop iteration",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "let flag1 be flag2 be 0",
      "code": "flag1 = flag2 = 0 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "end loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if not flag1 , end loop iteration",
      "code": "if ( ! flag1 ) continue ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if flag1 is greater than 0 and flag2 is greater than 0",
      "code": "if ( flag1 > 0 && flag2 > 0 )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "increment mp [ flag1 ] [ flag2 ] by len",
      "code": "mp [ flag1 ] [ flag2 ] += len ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "let ans be maximum of ans and mp [ flag1 ] [ flag2 ]",
      "code": "ans = max ( ans , mp [ flag1 ] [ flag2 ] ) ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "increment mp [ flag2 ] [ flag1 ] by len",
      "code": "mp [ flag2 ] [ flag1 ] += len ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "let ans be maximum of ans and mp [ flag2 ] [ flag1 ]",
      "code": "ans = max ( ans , mp [ flag2 ] [ flag1 ] ) ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "else if flag1 is greater than 0 and flag2 is 0",
      "code": "else if ( flag1 > 0 && flag2 == 0 )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "for i = 97 to 122 inclusive",
      "code": "for ( int i = 97 ; i <= 122 ; i ++ )",
      "indent": 3
    },
    {
      "line": 34,
      "text": "increment mp [ flag1 ] [ i ] by len",
      "code": "mp [ flag1 ] [ i ] += len ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "let ans be maximum of ans and mp [ flag1 ] [ i ]",
      "code": "ans = max ( ans , mp [ flag1 ] [ i ] ) ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "if i is flag1 , end loop iteration",
      "code": "if ( i == flag1 ) continue ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "increment mp [ i ] [ flag1 ] by len",
      "code": "mp [ i ] [ flag1 ] += len ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "let ans be maximum of ans and mp [ i ] [ flag1 ]",
      "code": "ans = max ( ans , mp [ i ] [ flag1 ] ) ;",
      "indent": 4
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 42,
      "text": "print ans and newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int mp [ 200 ] , 200 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "long long ans = 0 ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘max(long long int&, int&)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "bool s ;"
      ],
      "err_line": 10,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "for ( i = 97 ; i <= 122 ; i ++ )"
      ],
      "err_line": 33,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "mp [ flag1 ] [ j ] += len ;"
      ],
      "err_line": 34,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "ans = max ( ans , mp ) [ flag1 ] [ i ] ;"
      ],
      "err_line": 35,
      "err_msg": "no matching function for call to ‘max(int&, int [200][200])’"
    },
    {
      "mod_line": [
        6,
        38
      ],
      "mod_code": [
        "cin >> N ;",
        "ans /= mp [ i ] [ flag1 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        38,
        4
      ],
      "mod_code": [
        "cin >> N ;",
        "ans /= mp [ i ] [ flag1 ] ;",
        "long long ans = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        38,
        4,
        30
      ],
      "mod_code": [
        "cin >> N ;",
        "ans /= mp [ i ] [ flag1 ] ;",
        "long long ans = 0 ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        38,
        4,
        29
      ],
      "mod_code": [
        "cin >> N ;",
        "ans /= mp [ i ] [ flag1 ] ;",
        "long long ans = 0 ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        38,
        4,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "ans /= mp [ i ] [ flag1 ] ;",
        "long long ans = 0 ;",
        "while ( -- -- )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        38,
        30
      ],
      "mod_code": [
        "cin >> N ;",
        "ans /= mp [ i ] [ flag1 ] ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        38,
        30,
        29
      ],
      "mod_code": [
        "cin >> N ;",
        "ans /= mp [ i ] [ flag1 ] ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        38,
        30,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "ans /= mp [ i ] [ flag1 ] ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "while ( -- -- )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        38,
        29
      ],
      "mod_code": [
        "cin >> N ;",
        "ans /= mp [ i ] [ flag1 ] ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        38,
        29,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "ans /= mp [ i ] [ flag1 ] ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;",
        "while ( -- -- )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        38,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "ans /= mp [ i ] [ flag1 ] ;",
        "while ( -- -- )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "cin >> N ;",
        "long long ans = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4,
        30
      ],
      "mod_code": [
        "cin >> N ;",
        "long long ans = 0 ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4,
        30,
        29
      ],
      "mod_code": [
        "cin >> N ;",
        "long long ans = 0 ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4,
        30,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "long long ans = 0 ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "while ( -- -- )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4,
        29
      ],
      "mod_code": [
        "cin >> N ;",
        "long long ans = 0 ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4,
        29,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "long long ans = 0 ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;",
        "while ( -- -- )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "long long ans = 0 ;",
        "while ( -- -- )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        30
      ],
      "mod_code": [
        "cin >> N ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        30,
        29
      ],
      "mod_code": [
        "cin >> N ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        30,
        29,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;",
        "while ( -- -- )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        30,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "while ( -- -- )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        29
      ],
      "mod_code": [
        "cin >> N ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        29,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;",
        "while ( -- -- )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "while ( -- -- )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        38,
        4
      ],
      "mod_code": [
        "ans /= mp [ i ] [ flag1 ] ;",
        "long long ans = 0 ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘max(long long int&, int&)’"
    },
    {
      "mod_line": [
        38,
        4,
        30
      ],
      "mod_code": [
        "ans /= mp [ i ] [ flag1 ] ;",
        "long long ans = 0 ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘max(long long int&, int&)’"
    },
    {
      "mod_line": [
        38,
        4,
        30,
        29
      ],
      "mod_code": [
        "ans /= mp [ i ] [ flag1 ] ;",
        "long long ans = 0 ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘max(long long int&, int&)’"
    },
    {
      "mod_line": [
        38,
        4,
        30,
        7
      ],
      "mod_code": [
        "ans /= mp [ i ] [ flag1 ] ;",
        "long long ans = 0 ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        38,
        4,
        29
      ],
      "mod_code": [
        "ans /= mp [ i ] [ flag1 ] ;",
        "long long ans = 0 ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘max(long long int&, int&)’"
    },
    {
      "mod_line": [
        38,
        4,
        29,
        7
      ],
      "mod_code": [
        "ans /= mp [ i ] [ flag1 ] ;",
        "long long ans = 0 ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        38,
        4,
        7
      ],
      "mod_code": [
        "ans /= mp [ i ] [ flag1 ] ;",
        "long long ans = 0 ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        38,
        30
      ],
      "mod_code": [
        "ans /= mp [ i ] [ flag1 ] ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        38,
        30,
        29
      ],
      "mod_code": [
        "ans /= mp [ i ] [ flag1 ] ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        38,
        30,
        29,
        7
      ],
      "mod_code": [
        "ans /= mp [ i ] [ flag1 ] ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        38,
        30,
        7
      ],
      "mod_code": [
        "ans /= mp [ i ] [ flag1 ] ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        38,
        29,
        7
      ],
      "mod_code": [
        "ans /= mp [ i ] [ flag1 ] ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        38,
        7
      ],
      "mod_code": [
        "ans /= mp [ i ] [ flag1 ] ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        30
      ],
      "mod_code": [
        "long long ans = 0 ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘max(long long int&, int&)’"
    },
    {
      "mod_line": [
        4,
        30,
        29
      ],
      "mod_code": [
        "long long ans = 0 ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘max(long long int&, int&)’"
    },
    {
      "mod_line": [
        4,
        30,
        29,
        7
      ],
      "mod_code": [
        "long long ans = 0 ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        30,
        7
      ],
      "mod_code": [
        "long long ans = 0 ;",
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        29
      ],
      "mod_code": [
        "long long ans = 0 ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘max(long long int&, int&)’"
    },
    {
      "mod_line": [
        4,
        29,
        7
      ],
      "mod_code": [
        "long long ans = 0 ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "long long ans = 0 ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        30,
        29
      ],
      "mod_code": [
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        30,
        29,
        7
      ],
      "mod_code": [
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        30,
        7
      ],
      "mod_code": [
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ++ ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        29,
        7
      ],
      "mod_code": [
        "ans = max ( ans , mp [ flag1 ] [ ' flag2 ' ] ) ;",
        "while ( -- -- )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    }
  ]
}