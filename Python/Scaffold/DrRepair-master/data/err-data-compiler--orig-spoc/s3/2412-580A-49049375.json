{
  "meta": {
    "index": 2412,
    "hitid": "3B9J25CZ257P66E6CMRGWZVMPK8SCP",
    "workerid": "AIWEXPJAU66D9",
    "probid": "580A",
    "subid": "49049375"
  },
  "lines": [
    {
      "line": 0,
      "text": "define an empty function fast",
      "code": "void fast ( ) { }",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define function solve",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let n , an , cc , x and p be integers with an and cc = 0 , and p = - 1",
      "code": "int n , an = 0 , cc = 0 , x , p = - 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read standard input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "in a for loop , change i from 0 to n exclusive",
      "code": "for ( long long int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read from the input to x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if x > = p",
      "code": "if ( x >= p )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment cc",
      "code": "cc ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "change an to max of an and cc",
      "code": "an = max ( an , cc ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "assign 1 to cc",
      "code": "cc = 1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "change the value of p to x",
      "code": "p = x ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "assign the new value = max of cc and an to an",
      "code": "an = max ( cc , an ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print an and \" \\ n \"",
      "code": "cout << an << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 18,
      "text": "call method solve ( )",
      "code": "solve ( ) ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else if ( x >= p )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘p’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "an = max ( an and cc ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘max(bool)’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cc assign 1 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "p to ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "an = max ( cc and an ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘max(bool)’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "<< an << \" \\n \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "void solve ( )"
      ],
      "err_line": 19,
      "err_msg": "a function-definition is not allowed here before ‘return’"
    },
    {
      "mod_line": [
        18,
        9
      ],
      "mod_code": [
        "void solve ( )",
        "an = max ( an and cc ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘max(bool)’"
    },
    {
      "mod_line": [
        18,
        9,
        12
      ],
      "mod_code": [
        "void solve ( )",
        "an = max ( an and cc ) ;",
        "p to ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘max(bool)’"
    },
    {
      "mod_line": [
        18,
        9,
        12,
        3
      ],
      "mod_code": [
        "void solve ( )",
        "an = max ( an and cc ) ;",
        "p to ;",
        "cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        9,
        12,
        5
      ],
      "mod_code": [
        "void solve ( )",
        "an = max ( an and cc ) ;",
        "p to ;",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        9,
        12,
        6
      ],
      "mod_code": [
        "void solve ( )",
        "an = max ( an and cc ) ;",
        "p to ;",
        "else if ( x >= p )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18,
        9,
        3
      ],
      "mod_code": [
        "void solve ( )",
        "an = max ( an and cc ) ;",
        "cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        9,
        3,
        5
      ],
      "mod_code": [
        "void solve ( )",
        "an = max ( an and cc ) ;",
        "cin >> n )",
        "gets ( x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        9,
        3,
        6
      ],
      "mod_code": [
        "void solve ( )",
        "an = max ( an and cc ) ;",
        "cin >> n )",
        "else if ( x >= p )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        9,
        5
      ],
      "mod_code": [
        "void solve ( )",
        "an = max ( an and cc ) ;",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        9,
        5,
        6
      ],
      "mod_code": [
        "void solve ( )",
        "an = max ( an and cc ) ;",
        "gets ( x ) ;",
        "else if ( x >= p )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        9,
        6
      ],
      "mod_code": [
        "void solve ( )",
        "an = max ( an and cc ) ;",
        "else if ( x >= p )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18,
        12
      ],
      "mod_code": [
        "void solve ( )",
        "p to ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        18,
        12,
        3
      ],
      "mod_code": [
        "void solve ( )",
        "p to ;",
        "cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        12,
        3,
        5
      ],
      "mod_code": [
        "void solve ( )",
        "p to ;",
        "cin >> n )",
        "gets ( x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        12,
        3,
        6
      ],
      "mod_code": [
        "void solve ( )",
        "p to ;",
        "cin >> n )",
        "else if ( x >= p )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        12,
        5
      ],
      "mod_code": [
        "void solve ( )",
        "p to ;",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        12,
        5,
        6
      ],
      "mod_code": [
        "void solve ( )",
        "p to ;",
        "gets ( x ) ;",
        "else if ( x >= p )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        12,
        6
      ],
      "mod_code": [
        "void solve ( )",
        "p to ;",
        "else if ( x >= p )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "void solve ( )",
        "cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        3,
        5
      ],
      "mod_code": [
        "void solve ( )",
        "cin >> n )",
        "gets ( x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        3,
        5,
        6
      ],
      "mod_code": [
        "void solve ( )",
        "cin >> n )",
        "gets ( x ) ;",
        "else if ( x >= p )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        3,
        6
      ],
      "mod_code": [
        "void solve ( )",
        "cin >> n )",
        "else if ( x >= p )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        5
      ],
      "mod_code": [
        "void solve ( )",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        5,
        6
      ],
      "mod_code": [
        "void solve ( )",
        "gets ( x ) ;",
        "else if ( x >= p )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        6
      ],
      "mod_code": [
        "void solve ( )",
        "else if ( x >= p )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "p to ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘max(bool)’"
    },
    {
      "mod_line": [
        9,
        12,
        3
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "p to ;",
        "cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        12,
        3,
        5
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "p to ;",
        "cin >> n )",
        "gets ( x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        12,
        3,
        6
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "p to ;",
        "cin >> n )",
        "else if ( x >= p )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        12,
        5
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "p to ;",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        12,
        5,
        6
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "p to ;",
        "gets ( x ) ;",
        "else if ( x >= p )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        12,
        6
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "p to ;",
        "else if ( x >= p )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        3,
        5
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "cin >> n )",
        "gets ( x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        3,
        5,
        6
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "cin >> n )",
        "gets ( x ) ;",
        "else if ( x >= p )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        3,
        6
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "cin >> n )",
        "else if ( x >= p )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        5,
        6
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "gets ( x ) ;",
        "else if ( x >= p )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "an = max ( an and cc ) ;",
        "else if ( x >= p )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "p to ;",
        "cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        3,
        5
      ],
      "mod_code": [
        "p to ;",
        "cin >> n )",
        "gets ( x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        3,
        5,
        6
      ],
      "mod_code": [
        "p to ;",
        "cin >> n )",
        "gets ( x ) ;",
        "else if ( x >= p )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        3,
        6
      ],
      "mod_code": [
        "p to ;",
        "cin >> n )",
        "else if ( x >= p )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "p to ;",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        5,
        6
      ],
      "mod_code": [
        "p to ;",
        "gets ( x ) ;",
        "else if ( x >= p )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "p to ;",
        "else if ( x >= p )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "cin >> n )",
        "gets ( x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "cin >> n )",
        "gets ( x ) ;",
        "else if ( x >= p )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "cin >> n )",
        "else if ( x >= p )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "gets ( x ) ;",
        "else if ( x >= p )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    }
  ]
}