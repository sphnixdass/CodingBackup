{
  "meta": {
    "index": 841,
    "hitid": "3RKHNXPHGWQN4HIYT43EZJQIFQ2KUA",
    "workerid": "A1APYLD4DUK33J",
    "probid": "987A",
    "subid": "41795938"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare string array vet size n",
      "code": "string vet [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive , read vet [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> vet [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare boolean purple = false",
      "code": "bool purple = false ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare boolean green = false",
      "code": "bool green = false ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare boolean blue = false",
      "code": "bool blue = false ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare boolean orange = false",
      "code": "bool orange = false ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare boolean red = false",
      "code": "bool red = false ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "declare boolean yellow = false",
      "code": "bool yellow = false ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if vet [ j ] is \" purple \" let purple = true",
      "code": "if ( vet [ j ] == \" purple \" ) purple = true ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if vet [ j ] is \" green \" let green = true",
      "code": "if ( vet [ j ] == \" green \" ) green = true ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if vet [ j ] is \" blue \" let blue = true",
      "code": "if ( vet [ j ] == \" blue \" ) blue = true ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if vet [ j ] is \" orange \" let orange = true",
      "code": "if ( vet [ j ] == \" orange \" ) orange = true ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if vet [ j ] is \" red \" let red = true",
      "code": "if ( vet [ j ] == \" red \" ) red = true ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if vet [ j ] is \" yellow \" let yellow = true",
      "code": "if ( vet [ j ] == \" yellow \" ) yellow = true ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "declare tot = 0",
      "code": "int tot = 0 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if not purple , increment tot",
      "code": "if ( ! purple ) tot ++ ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if not green , increment tot",
      "code": "if ( ! green ) tot ++ ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if not blue , increment tot",
      "code": "if ( ! blue ) tot ++ ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if not orange , increment tot",
      "code": "if ( ! orange ) tot ++ ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if not red , increment tot",
      "code": "if ( ! red ) tot ++ ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if not yellow , increment tot",
      "code": "if ( ! yellow ) tot ++ ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print tot and \" \\ n \"",
      "code": "cout << tot << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if not purple , print \" Power \\ n \"",
      "code": "if ( ! purple ) cout << \" Power\\n \" ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if not green , print \" Time \\ n \"",
      "code": "if ( ! green ) cout << \" Time\\n \" ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if not blue , print \" Space \\ n \"",
      "code": "if ( ! blue ) cout << \" Space\\n \" ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if not orange , print \" Soul \\ n \"",
      "code": "if ( ! orange ) cout << \" Soul\\n \" ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "if not red , print \" Reality \\ n \"",
      "code": "if ( ! red ) cout << \" Reality\\n \" ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "if not yellow , print \" Mind \\ n \"",
      "code": "if ( ! yellow ) cout << \" Mind\\n \" ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string a [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "‘vet’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "red = false ;"
      ],
      "err_line": 9,
      "err_msg": "‘red’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "tot = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘tot’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "if ( ! purple ) continue ;"
      ],
      "err_line": 27,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "if ( ! green ) continue ;"
      ],
      "err_line": 28,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "if ( ! orange ) continue ;"
      ],
      "err_line": 30,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        27,
        28
      ],
      "mod_code": [
        "if ( ! purple ) cout << \" D\\n \" ;",
        "if ( ! green ) cout << \" continue ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        27,
        28,
        29
      ],
      "mod_code": [
        "if ( ! purple ) cout << \" D\\n \" ;",
        "if ( ! green ) cout << \" continue ;",
        "if ( ! blue ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        27,
        28,
        29,
        30
      ],
      "mod_code": [
        "if ( ! purple ) cout << \" D\\n \" ;",
        "if ( ! green ) cout << \" continue ;",
        "if ( ! blue ) cout << \" D\\n \" ;",
        "if ( ! orange ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        27,
        28,
        29,
        31
      ],
      "mod_code": [
        "if ( ! purple ) cout << \" D\\n \" ;",
        "if ( ! green ) cout << \" continue ;",
        "if ( ! blue ) cout << \" D\\n \" ;",
        "if ( ! red ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        27,
        28,
        29,
        32
      ],
      "mod_code": [
        "if ( ! purple ) cout << \" D\\n \" ;",
        "if ( ! green ) cout << \" continue ;",
        "if ( ! blue ) cout << \" D\\n \" ;",
        "if ( ! yellow ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        27,
        28,
        30
      ],
      "mod_code": [
        "if ( ! purple ) cout << \" D\\n \" ;",
        "if ( ! green ) cout << \" continue ;",
        "if ( ! orange ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        27,
        28,
        30,
        31
      ],
      "mod_code": [
        "if ( ! purple ) cout << \" D\\n \" ;",
        "if ( ! green ) cout << \" continue ;",
        "if ( ! orange ) cout << \" D\\n \" ;",
        "if ( ! red ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        27,
        28,
        30,
        32
      ],
      "mod_code": [
        "if ( ! purple ) cout << \" D\\n \" ;",
        "if ( ! green ) cout << \" continue ;",
        "if ( ! orange ) cout << \" D\\n \" ;",
        "if ( ! yellow ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        27,
        28,
        31
      ],
      "mod_code": [
        "if ( ! purple ) cout << \" D\\n \" ;",
        "if ( ! green ) cout << \" continue ;",
        "if ( ! red ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        27,
        28,
        31,
        32
      ],
      "mod_code": [
        "if ( ! purple ) cout << \" D\\n \" ;",
        "if ( ! green ) cout << \" continue ;",
        "if ( ! red ) cout << \" D\\n \" ;",
        "if ( ! yellow ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        27,
        28,
        32
      ],
      "mod_code": [
        "if ( ! purple ) cout << \" D\\n \" ;",
        "if ( ! green ) cout << \" continue ;",
        "if ( ! yellow ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        29
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! blue ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        29,
        30
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! blue ) cout << \" D\\n \" ;",
        "if ( ! orange ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        29,
        30,
        31
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! blue ) cout << \" D\\n \" ;",
        "if ( ! orange ) cout << \" D\\n \" ;",
        "if ( ! red ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        29,
        30,
        32
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! blue ) cout << \" D\\n \" ;",
        "if ( ! orange ) cout << \" D\\n \" ;",
        "if ( ! yellow ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        29,
        31
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! blue ) cout << \" D\\n \" ;",
        "if ( ! red ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        29,
        31,
        32
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! blue ) cout << \" D\\n \" ;",
        "if ( ! red ) cout << \" D\\n \" ;",
        "if ( ! yellow ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        29,
        32
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! blue ) cout << \" D\\n \" ;",
        "if ( ! yellow ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        30
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! orange ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        30,
        31
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! orange ) cout << \" D\\n \" ;",
        "if ( ! red ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        30,
        31,
        32
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! orange ) cout << \" D\\n \" ;",
        "if ( ! red ) cout << \" D\\n \" ;",
        "if ( ! yellow ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        30,
        32
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! orange ) cout << \" D\\n \" ;",
        "if ( ! yellow ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        31
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! red ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        31,
        32
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! red ) cout << \" D\\n \" ;",
        "if ( ! yellow ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        28,
        32
      ],
      "mod_code": [
        "if ( ! green ) cout << \" continue ;",
        "if ( ! yellow ) cout << \" D\\n \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating \" character"
    }
  ]
}