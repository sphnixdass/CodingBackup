{
  "meta": {
    "index": 1330,
    "hitid": "3BFF0DJK8X66SNGHY8M6L9VQD68ST8",
    "workerid": "A1APYLD4DUK33J",
    "probid": "731A",
    "subid": "48453383"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare long long mod = 1000000007",
      "code": "long long mod = 1000000007 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare double pi = 3 . 1415926535897932384626433832",
      "code": "double pi = 3.1415926535897932384626433832 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare fast_exp with long long integers base , ex as arguments , returning long long integer",
      "code": "long long int fast_exp ( long long int base , long long int ex )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare long long integer res = 1",
      "code": "long long int res = 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while ex is greater than 0",
      "code": "while ( ex > 0 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if ex % 2 is 0 , let res be ( res * base ) % mod",
      "code": "if ( ex % 2 == 1 ) res = ( res * base ) % mod ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "let base be ( base * base ) % mod",
      "code": "base = ( base * base ) % mod ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "let ex be ex / 2",
      "code": "ex /= 2 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return res % mod from function",
      "code": "return res % mod ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "declare gcd with long long integers a , b as arguments , returning long long integer",
      "code": "long long int gcd ( long long int a , long long int b )",
      "indent": 0
    },
    {
      "line": 12,
      "text": "if b is 0 , return a",
      "code": "if ( b == 0 ) return a ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "return result of run gcd ( b , a % b )",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "declare cal with characters a , b as arguments , returning long long",
      "code": "long long cal ( char a , char b )",
      "indent": 0
    },
    {
      "line": 16,
      "text": "declare long long g = absolute value of ( a - b )",
      "code": "long long g = abs ( a - b ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if a - b is 13 , return 13LL from function",
      "code": "if ( a - b == 13 ) return 13LL ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if g is greater than 13 , let g be 26 - g",
      "code": "if ( g > 13 ) g = 26 - g ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "return g",
      "code": "return g ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 22,
      "text": "declare s as string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "declare long long ans = 0",
      "code": "long long ans = 0 ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "increment ans by result of run cal with ( ' a ' , s [ 0 ] ) as arguments",
      "code": "ans += cal ( ' a ' , s [ 0 ] ) ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "for i = 0 to length of s - 1 exclusive , increment ans by result of run cal ( s [ i ] , s [ i + 1 ] )",
      "code": "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { ans += cal ( s [ i ] , s [ i + 1 ] ) ; }",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print ans and \" \\ n \"",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "string s ( )"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 23,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        25
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "ans += ( ' a ' , s [ 0 ] ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        25,
        27
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "cout << ans << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        25,
        27,
        22
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "cout << ans << \" \" ;",
        "string s ( )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        25,
        27,
        19
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "cout << ans << \" \" ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        25,
        27,
        23
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "cout << ans << \" \" ;",
        "s >> s ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        25,
        22
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "string s ( )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        25,
        22,
        19
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "string s ( )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        25,
        22,
        23
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "string s ( )",
        "s >> s ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        25,
        19
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        25,
        19,
        23
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        25,
        23
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "s >> s ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        27
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "cout << ans << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        27,
        22
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "cout << ans << \" \" ;",
        "string s ( )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        27,
        22,
        19
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "cout << ans << \" \" ;",
        "string s ( )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        27,
        22,
        23
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "cout << ans << \" \" ;",
        "string s ( )",
        "s >> s ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        27,
        19
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "cout << ans << \" \" ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        27,
        19,
        23
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "cout << ans << \" \" ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        27,
        23
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "cout << ans << \" \" ;",
        "s >> s ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        22
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "string s ( )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        22,
        19
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "string s ( )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        22,
        19,
        23
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "string s ( )",
        "do",
        "s >> s ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        22,
        23
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "string s ( )",
        "s >> s ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        19
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        19,
        23
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        23
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "s >> s ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        27,
        22
      ],
      "mod_code": [
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "cout << ans << \" \" ;",
        "string s ( )"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        25,
        27,
        22,
        19
      ],
      "mod_code": [
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "cout << ans << \" \" ;",
        "string s ( )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        27,
        22,
        23
      ],
      "mod_code": [
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "cout << ans << \" \" ;",
        "string s ( )",
        "s >> s ;"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        25,
        27,
        19
      ],
      "mod_code": [
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "cout << ans << \" \" ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        27,
        19,
        23
      ],
      "mod_code": [
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "cout << ans << \" \" ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        27,
        23
      ],
      "mod_code": [
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "cout << ans << \" \" ;",
        "s >> s ;"
      ],
      "err_line": 23,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        22
      ],
      "mod_code": [
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "string s ( )"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        25,
        22,
        19
      ],
      "mod_code": [
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "string s ( )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        22,
        19,
        23
      ],
      "mod_code": [
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "string s ( )",
        "do",
        "s >> s ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        22,
        23
      ],
      "mod_code": [
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "string s ( )",
        "s >> s ;"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        25,
        19
      ],
      "mod_code": [
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        19,
        23
      ],
      "mod_code": [
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        23
      ],
      "mod_code": [
        "ans += ( ' a ' , s [ 0 ] ) ;",
        "s >> s ;"
      ],
      "err_line": 23,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        27,
        22
      ],
      "mod_code": [
        "cout << ans << \" \" ;",
        "string s ( )"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        27,
        22,
        19
      ],
      "mod_code": [
        "cout << ans << \" \" ;",
        "string s ( )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        22,
        19,
        23
      ],
      "mod_code": [
        "cout << ans << \" \" ;",
        "string s ( )",
        "do",
        "s >> s ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        22,
        23
      ],
      "mod_code": [
        "cout << ans << \" \" ;",
        "string s ( )",
        "s >> s ;"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        27,
        19
      ],
      "mod_code": [
        "cout << ans << \" \" ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        19,
        23
      ],
      "mod_code": [
        "cout << ans << \" \" ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        23
      ],
      "mod_code": [
        "cout << ans << \" \" ;",
        "s >> s ;"
      ],
      "err_line": 23,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        19
      ],
      "mod_code": [
        "string s ( )",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        22,
        19,
        23
      ],
      "mod_code": [
        "string s ( )",
        "do",
        "s >> s ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        22,
        23
      ],
      "mod_code": [
        "string s ( )",
        "s >> s ;"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        19,
        23
      ],
      "mod_code": [
        "do",
        "s >> s ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}