{
  "meta": {
    "index": 151,
    "hitid": "3N7PQ0KLI5J0JND5IYWAEFNDIGO3E3",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "686A",
    "subid": "42262266"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "x , d = long long",
      "code": "long long x , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "n , sad = integers with sad = 0",
      "code": "int n , sad = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "a = character",
      "code": "char a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n , x",
      "code": "cin >> n >> x ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while decrement n",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read a , d",
      "code": "cin >> a >> d ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a is +",
      "code": "if ( a == ' + ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "x = x + d",
      "code": "x += d ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if ( d > x )",
      "code": "if ( d > x )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increment sad",
      "code": "sad ++ ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 13,
      "text": "x = x - d",
      "code": "x -= d ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print x , \" \" , sad",
      "code": "cout << x << \" \" << sad << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "set < char > a ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "set < char > a ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        17,
        3,
        7
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "set < char > a ;",
        "if ( ! a )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        17,
        3,
        7,
        12
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "set < char > a ;",
        "if ( ! a )",
        "do"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        17,
        3,
        7,
        9
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "set < char > a ;",
        "if ( ! a )",
        "do"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        17,
        3,
        7,
        10
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "set < char > a ;",
        "if ( ! a )",
        "if ( d > ' x ' )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        17,
        3,
        12
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "set < char > a ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        17,
        3,
        12,
        9
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "set < char > a ;",
        "do",
        "do"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        17,
        3,
        12,
        10
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "set < char > a ;",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        17,
        3,
        9
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "set < char > a ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        17,
        3,
        9,
        10
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "set < char > a ;",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        17,
        3,
        10
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "set < char > a ;",
        "if ( d > ' x ' )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        17,
        7,
        12
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "if ( ! a )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        7,
        12,
        9
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "if ( ! a )",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        7,
        12,
        10
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "if ( ! a )",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        7,
        9
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "if ( ! a )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        7,
        9,
        10
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "if ( ! a )",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        12
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        12,
        9
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        12,
        9,
        10
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "do",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        12,
        10
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        9
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        9,
        10
      ],
      "mod_code": [
        "cout << x << \" \\n \" ;",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "set < char > a ;",
        "if ( ! a )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        7,
        12
      ],
      "mod_code": [
        "set < char > a ;",
        "if ( ! a )",
        "do"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        7,
        12,
        9
      ],
      "mod_code": [
        "set < char > a ;",
        "if ( ! a )",
        "do",
        "do"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        7,
        12,
        10
      ],
      "mod_code": [
        "set < char > a ;",
        "if ( ! a )",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        7,
        9
      ],
      "mod_code": [
        "set < char > a ;",
        "if ( ! a )",
        "do"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        10
      ],
      "mod_code": [
        "set < char > a ;",
        "if ( ! a )",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        7,
        10
      ],
      "mod_code": [
        "set < char > a ;",
        "if ( ! a )",
        "if ( d > ' x ' )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "set < char > a ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        12,
        9
      ],
      "mod_code": [
        "set < char > a ;",
        "do",
        "do"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        12,
        9,
        10
      ],
      "mod_code": [
        "set < char > a ;",
        "do",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        12,
        10
      ],
      "mod_code": [
        "set < char > a ;",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "set < char > a ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        9,
        10
      ],
      "mod_code": [
        "set < char > a ;",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "set < char > a ;",
        "if ( d > ' x ' )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "if ( ! a )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        12,
        9
      ],
      "mod_code": [
        "if ( ! a )",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        12,
        9,
        10
      ],
      "mod_code": [
        "if ( ! a )",
        "do",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        12,
        10
      ],
      "mod_code": [
        "if ( ! a )",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "if ( ! a )",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        9,
        10
      ],
      "mod_code": [
        "if ( ! a )",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        9,
        10
      ],
      "mod_code": [
        "do",
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "do",
        "if ( d > ' x ' )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}