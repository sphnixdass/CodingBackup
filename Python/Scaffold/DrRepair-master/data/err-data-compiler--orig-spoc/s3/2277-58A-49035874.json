{
  "meta": {
    "index": 2277,
    "hitid": "3I4E7AFQ2KTDTKXRBEDST843HNZJTN",
    "workerid": "AIWEXPJAU66D9",
    "probid": "58A",
    "subid": "49035874"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "define booleans h , e , l1 , l2 , o and ans = 0",
      "code": "bool h = 0 , e = 0 , l1 = 0 , l2 = 0 , o = 0 , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read from the input to s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if l2 is true",
      "code": "if ( l2 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if s [ i ] is equal to ' o '",
      "code": "if ( s [ i ] == ' o ' )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "print \" YES \" and ' \\ n '",
      "code": "cout << \" YES \" << ' \\n ' ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if l1 is true",
      "code": "else if ( l1 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if s [ i ] = ' l ' , assign 1 to l2",
      "code": "if ( s [ i ] == ' l ' ) { l2 = 1 ; }",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if e is true",
      "code": "else if ( e )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if s [ i ] is equal to ' l ' , set l1 to 1",
      "code": "if ( s [ i ] == ' l ' ) { l1 = 1 ; }",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if h is true",
      "code": "else if ( h )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if s [ i ] is equal to ' e ' , set e to 1",
      "code": "if ( s [ i ] == ' e ' ) { e = 1 ; }",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else if s [ i ] is equal to ' h '",
      "code": "else if ( s [ i ] == ' h ' )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "set the value of h to 1",
      "code": "h = 1 ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" NO \" and ' \\ n '",
      "code": "cout << \" NO \" << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "* h = 1 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "bool h , e , l1 , l2 , o = 0 , ans = 0 ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "bool h , e , l1 , l2 , o = 0 , ans = 0 ;",
        "gets ( s ) ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        17
      ],
      "mod_code": [
        "bool h , e , l1 , l2 , o = 0 , ans = 0 ;",
        "gets ( s ) ;",
        "if ( ! s [ i ] )",
        "* h = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        7
      ],
      "mod_code": [
        "bool h , e , l1 , l2 , o = 0 , ans = 0 ;",
        "gets ( s ) ;",
        "if ( ! s [ i ] )",
        "cout << \" YES \" << endl << ' \\n ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        17
      ],
      "mod_code": [
        "bool h , e , l1 , l2 , o = 0 , ans = 0 ;",
        "gets ( s ) ;",
        "* h = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        17,
        7
      ],
      "mod_code": [
        "bool h , e , l1 , l2 , o = 0 , ans = 0 ;",
        "gets ( s ) ;",
        "* h = 1 ;",
        "cout << \" YES \" << endl << ' \\n ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "bool h , e , l1 , l2 , o = 0 , ans = 0 ;",
        "gets ( s ) ;",
        "cout << \" YES \" << endl << ' \\n ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        6,
        17
      ],
      "mod_code": [
        "bool h , e , l1 , l2 , o = 0 , ans = 0 ;",
        "if ( ! s [ i ] )",
        "* h = 1 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        2,
        6,
        17,
        7
      ],
      "mod_code": [
        "bool h , e , l1 , l2 , o = 0 , ans = 0 ;",
        "if ( ! s [ i ] )",
        "* h = 1 ;",
        "cout << \" YES \" << endl << ' \\n ' ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "bool h , e , l1 , l2 , o = 0 , ans = 0 ;",
        "* h = 1 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        2,
        17,
        7
      ],
      "mod_code": [
        "bool h , e , l1 , l2 , o = 0 , ans = 0 ;",
        "* h = 1 ;",
        "cout << \" YES \" << endl << ' \\n ' ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "gets ( s ) ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        17
      ],
      "mod_code": [
        "gets ( s ) ;",
        "if ( ! s [ i ] )",
        "* h = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        17,
        7
      ],
      "mod_code": [
        "gets ( s ) ;",
        "if ( ! s [ i ] )",
        "* h = 1 ;",
        "cout << \" YES \" << endl << ' \\n ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        17,
        2
      ],
      "mod_code": [
        "gets ( s ) ;",
        "if ( ! s [ i ] )",
        "* h = 1 ;",
        "bool h , e , l1 , l2 , o , ans = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "gets ( s ) ;",
        "if ( ! s [ i ] )",
        "cout << \" YES \" << endl << ' \\n ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        2
      ],
      "mod_code": [
        "gets ( s ) ;",
        "if ( ! s [ i ] )",
        "cout << \" YES \" << endl << ' \\n ' ;",
        "bool h , e , l1 , l2 , o , ans = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "gets ( s ) ;",
        "if ( ! s [ i ] )",
        "bool h , e , l1 , l2 , o , ans = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "gets ( s ) ;",
        "* h = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        17,
        7
      ],
      "mod_code": [
        "gets ( s ) ;",
        "* h = 1 ;",
        "cout << \" YES \" << endl << ' \\n ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        17,
        7,
        2
      ],
      "mod_code": [
        "gets ( s ) ;",
        "* h = 1 ;",
        "cout << \" YES \" << endl << ' \\n ' ;",
        "bool h , e , l1 , l2 , o , ans = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        17,
        2
      ],
      "mod_code": [
        "gets ( s ) ;",
        "* h = 1 ;",
        "bool h , e , l1 , l2 , o , ans = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "gets ( s ) ;",
        "cout << \" YES \" << endl << ' \\n ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        7,
        2
      ],
      "mod_code": [
        "gets ( s ) ;",
        "cout << \" YES \" << endl << ' \\n ' ;",
        "bool h , e , l1 , l2 , o , ans = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "gets ( s ) ;",
        "bool h , e , l1 , l2 , o , ans = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "* h = 1 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        6,
        17,
        7
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "* h = 1 ;",
        "cout << \" YES \" << endl << ' \\n ' ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        6,
        17,
        7,
        2
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "* h = 1 ;",
        "cout << \" YES \" << endl << ' \\n ' ;",
        "bool h , e , l1 , l2 , o , ans = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        6,
        17,
        2
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "* h = 1 ;",
        "bool h , e , l1 , l2 , o , ans = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        17,
        7
      ],
      "mod_code": [
        "* h = 1 ;",
        "cout << \" YES \" << endl << ' \\n ' ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        17,
        7,
        2
      ],
      "mod_code": [
        "* h = 1 ;",
        "cout << \" YES \" << endl << ' \\n ' ;",
        "bool h , e , l1 , l2 , o , ans = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        17,
        2
      ],
      "mod_code": [
        "* h = 1 ;",
        "bool h , e , l1 , l2 , o , ans = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    }
  ]
}