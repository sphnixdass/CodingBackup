{
  "meta": {
    "index": 2247,
    "hitid": "3MGHRFQY2LJ280VZZCQLJKHMXG50YG",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "82A",
    "subid": "49110164"
  },
  "lines": [
    {
      "line": 0,
      "text": "N , M = const int with N = 1e5 + 5 and M = 998244353",
      "code": "const int N = 1e5 + 5 , M = 998244353 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n = long long",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "x = int",
      "code": "int x ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "h = long long",
      "code": "long long h ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "l = long long",
      "code": "long long l ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if n < = 5",
      "code": "if ( n <= 5 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set h to n",
      "code": "h = n ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for x = 1 to n inclusive",
      "code": "for ( x = 1 ; x <= n ; x ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set l t 1 bitshift left by x",
      "code": "l = ( 1 << x ) ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if n - 5 * ( l - 1 ) < 5 * l",
      "code": "if ( n - 5 * ( l - 1 ) < 5 * l )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set h to n - 5 * ( l - 1 )",
      "code": "h = n - 5 * ( l - 1 ) ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "ans = long long",
      "code": "long long ans ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if n < = 5",
      "code": "if ( n <= 5 )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "set ans to h - 1",
      "code": "ans = h - 1 ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 22,
      "text": "set ans to h / l",
      "code": "ans = h / l ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if ans * l is h decrement ans",
      "code": "if ( ans * l == h ) ans -- ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if ans is 0 print \" Sheldon \"",
      "code": "if ( ans == 0 ) cout << \" Sheldon \" << endl ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "if ans is 1 print \" Leonard \"",
      "code": "if ( ans == 1 ) cout << \" Leonard \" << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if ans is 2 print \" Penny \"",
      "code": "if ( ans == 2 ) cout << \" Penny \" << endl ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if ans is 3 print \" Rajesh \"",
      "code": "if ( ans == 3 ) cout << \" Rajesh \" << endl ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if ans is 4 print \" Howard \"",
      "code": "if ( ans == 4 ) cout << \" Howard \" << endl ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const int’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘long’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        25,
        26,
        27,
        14
      ],
      "mod_code": [
        "if ( ans == 0 ) cout << \" Sheldon \" ;",
        "if ( ans == 1 ) cout << \" Leonard \" ;",
        "if ( ans == 2 ) cout << \" Penny \" ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        26,
        20,
        14
      ],
      "mod_code": [
        "if ( ans == 0 ) cout << \" Sheldon \" ;",
        "if ( ans == 1 ) cout << \" Leonard \" ;",
        "ans -= 1 ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        26,
        14
      ],
      "mod_code": [
        "if ( ans == 0 ) cout << \" Sheldon \" ;",
        "if ( ans == 1 ) cout << \" Leonard \" ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        26,
        14,
        6
      ],
      "mod_code": [
        "if ( ans == 0 ) cout << \" Sheldon \" ;",
        "if ( ans == 1 ) cout << \" Leonard \" ;",
        "do",
        "bool l ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        27,
        20,
        14
      ],
      "mod_code": [
        "if ( ans == 0 ) cout << \" Sheldon \" ;",
        "if ( ans == 2 ) cout << \" Penny \" ;",
        "ans -= 1 ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        27,
        14
      ],
      "mod_code": [
        "if ( ans == 0 ) cout << \" Sheldon \" ;",
        "if ( ans == 2 ) cout << \" Penny \" ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        27,
        14,
        6
      ],
      "mod_code": [
        "if ( ans == 0 ) cout << \" Sheldon \" ;",
        "if ( ans == 2 ) cout << \" Penny \" ;",
        "do",
        "bool l ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        20,
        14
      ],
      "mod_code": [
        "if ( ans == 0 ) cout << \" Sheldon \" ;",
        "ans -= 1 ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        20,
        14,
        6
      ],
      "mod_code": [
        "if ( ans == 0 ) cout << \" Sheldon \" ;",
        "ans -= 1 ;",
        "do",
        "bool l ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        14
      ],
      "mod_code": [
        "if ( ans == 0 ) cout << \" Sheldon \" ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        14,
        6
      ],
      "mod_code": [
        "if ( ans == 0 ) cout << \" Sheldon \" ;",
        "do",
        "bool l ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        27,
        20,
        14
      ],
      "mod_code": [
        "if ( ans == 1 ) cout << \" Leonard \" ;",
        "if ( ans == 2 ) cout << \" Penny \" ;",
        "ans -= 1 ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        27,
        14
      ],
      "mod_code": [
        "if ( ans == 1 ) cout << \" Leonard \" ;",
        "if ( ans == 2 ) cout << \" Penny \" ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        27,
        14,
        6
      ],
      "mod_code": [
        "if ( ans == 1 ) cout << \" Leonard \" ;",
        "if ( ans == 2 ) cout << \" Penny \" ;",
        "do",
        "bool l ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        20,
        14
      ],
      "mod_code": [
        "if ( ans == 1 ) cout << \" Leonard \" ;",
        "ans -= 1 ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        20,
        14,
        6
      ],
      "mod_code": [
        "if ( ans == 1 ) cout << \" Leonard \" ;",
        "ans -= 1 ;",
        "do",
        "bool l ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        14
      ],
      "mod_code": [
        "if ( ans == 1 ) cout << \" Leonard \" ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        14,
        6
      ],
      "mod_code": [
        "if ( ans == 1 ) cout << \" Leonard \" ;",
        "do",
        "bool l ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        20,
        14
      ],
      "mod_code": [
        "if ( ans == 2 ) cout << \" Penny \" ;",
        "ans -= 1 ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        20,
        14,
        6
      ],
      "mod_code": [
        "if ( ans == 2 ) cout << \" Penny \" ;",
        "ans -= 1 ;",
        "do",
        "bool l ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        14
      ],
      "mod_code": [
        "if ( ans == 2 ) cout << \" Penny \" ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        14,
        6
      ],
      "mod_code": [
        "if ( ans == 2 ) cout << \" Penny \" ;",
        "do",
        "bool l ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        14
      ],
      "mod_code": [
        "ans -= 1 ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        14,
        6
      ],
      "mod_code": [
        "ans -= 1 ;",
        "do",
        "bool l ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "do",
        "bool l ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}