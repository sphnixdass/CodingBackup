{
  "meta": {
    "index": 1916,
    "hitid": "3CVDZS288HUTBNLBJRLVSWHJTLJMF8",
    "workerid": "AIWEXPJAU66D9",
    "probid": "626A",
    "subid": "48045561"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer MX with value 200",
      "code": "const int MX = 200 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integer called n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let s be string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create a map from characters to integers called mapper",
      "code": "map < char , int > mapper ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "mapper [ ' R ' ] = 0",
      "code": "mapper [ ' R ' ] = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "mapper [ ' U ' ] = 1",
      "code": "mapper [ ' U ' ] = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "mapper [ ' L ' ] = 2",
      "code": "mapper [ ' L ' ] = 2 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "mapper [ ' D ' ] = 3",
      "code": "mapper [ ' D ' ] = 3 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "mx is an array of ints with values 1 , 0 , - 1 , 0",
      "code": "int mx [ ] = { 1 , 0 , - 1 , 0 } ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "my is an array of ints with values 0 , 1 , 0 , - 1",
      "code": "int my [ ] = { 0 , 1 , 0 , - 1 } ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read n and s in a loop",
      "code": "while ( cin >> n >> s )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "ans is integer = 0",
      "code": "int ans = 0 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "cx is integer = 0",
      "code": "int cx = 0 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "cy is integer = 0",
      "code": "int cy = 0 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "for integer j = i to n exclusive",
      "code": "for ( int j = i ; j < n ; ++ j )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "increase cx by mx [ mapper [ s [ j ] ] ]",
      "code": "cx += mx [ mapper [ s [ j ] ] ] ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "increase cy by my [ mapper [ s [ j ] ] ]",
      "code": "cy += my [ mapper [ s [ j ] ] ] ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "increase ans by 1 if cx = and cy = 0",
      "code": "ans += ( cx == 0 && cy == 0 ) ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print ans and a new line",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string s let"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int mx [ 1 ] = { 1 , 0 , - 1 , 0 } ;"
      ],
      "err_line": 9,
      "err_msg": "too many initializers for ‘int [1]’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "a >> s >> s ;"
      ],
      "err_line": 11,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "string s let"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        17,
        3,
        7
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "string s let",
        "mapper [ ' L ' ] = ' 2 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        17,
        3,
        7,
        6
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "string s let",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "mapper [ ' U ' ] = ' 1 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        17,
        3,
        7,
        18
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "string s let",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        17,
        3,
        7,
        5
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "string s let",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        17,
        3,
        6
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "string s let",
        "mapper [ ' U ' ] = ' 1 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        17,
        3,
        6,
        18
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "string s let",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        17,
        3,
        6,
        5
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "string s let",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        17,
        3,
        18
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "string s let",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        17,
        3,
        18,
        5
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "string s let",
        "cy += my [ mapper [ j ] ] ] ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        17,
        3,
        5
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "string s let",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        17,
        7
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "mapper [ ' L ' ] = ' 2 ' ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        7,
        6
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "mapper [ ' U ' ] = ' 1 ' ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        7,
        6,
        18
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        7,
        6,
        5
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        7,
        18
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        7,
        18,
        5
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "cy += my [ mapper [ j ] ] ] ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        7,
        5
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        6
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "mapper [ ' U ' ] = ' 1 ' ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        6,
        18
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        6,
        18,
        5
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "cy += my [ mapper [ j ] ] ] ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        6,
        5
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        18,
        5
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "cy += my [ mapper [ j ] ] ] ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        5
      ],
      "mod_code": [
        "cx += mx [ mapper [ j ] ] ] ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "string s let",
        "mapper [ ' L ' ] = ' 2 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        7,
        6
      ],
      "mod_code": [
        "string s let",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "mapper [ ' U ' ] = ' 1 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        7,
        6,
        18
      ],
      "mod_code": [
        "string s let",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        7,
        6,
        5
      ],
      "mod_code": [
        "string s let",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        7,
        18
      ],
      "mod_code": [
        "string s let",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        7,
        18,
        5
      ],
      "mod_code": [
        "string s let",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "cy += my [ mapper [ j ] ] ] ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        7,
        5
      ],
      "mod_code": [
        "string s let",
        "mapper [ ' L ' ] = ' 2 ' ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "string s let",
        "mapper [ ' U ' ] = ' 1 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        6,
        18
      ],
      "mod_code": [
        "string s let",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        6,
        18,
        5
      ],
      "mod_code": [
        "string s let",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "cy += my [ mapper [ j ] ] ] ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        6,
        5
      ],
      "mod_code": [
        "string s let",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "string s let",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        18,
        5
      ],
      "mod_code": [
        "string s let",
        "cy += my [ mapper [ j ] ] ] ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "string s let",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        7,
        6,
        18
      ],
      "mod_code": [
        "mapper [ ' L ' ] = ' 2 ' ;",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        6,
        18,
        5
      ],
      "mod_code": [
        "mapper [ ' L ' ] = ' 2 ' ;",
        "mapper [ ' U ' ] = ' 1 ' ;",
        "cy += my [ mapper [ j ] ] ] ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "mapper [ ' L ' ] = ' 2 ' ;",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        18,
        5
      ],
      "mod_code": [
        "mapper [ ' L ' ] = ' 2 ' ;",
        "cy += my [ mapper [ j ] ] ] ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "mapper [ ' U ' ] = ' 1 ' ;",
        "cy += my [ mapper [ j ] ] ] ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        18,
        5
      ],
      "mod_code": [
        "mapper [ ' U ' ] = ' 1 ' ;",
        "cy += my [ mapper [ j ] ] ] ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        18,
        5
      ],
      "mod_code": [
        "cy += my [ mapper [ j ] ] ] ;",
        "mapper [ ' R ' ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘]’ token"
    }
  ]
}