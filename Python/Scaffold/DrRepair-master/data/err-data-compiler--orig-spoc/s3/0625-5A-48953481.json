{
  "meta": {
    "index": 625,
    "hitid": "3MXX6RQ9EVZPYALZRQH4IWEN9L5P49",
    "workerid": "AIWEXPJAU66D9",
    "probid": "5A",
    "subid": "48953481"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s1 = empty array of chars of size 101 * 101 * 101",
      "code": "char s1 [ 101 * 101 * 101 ] = { } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let i , j , k , s and t be integers with i = 1 , j , k , s = 0 and t = 0",
      "code": "int i = 1 , j , k , s = 0 , t = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while gets ( s1 )",
      "code": "while ( gets ( s1 ) )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if s1 [ 0 ] is equal to ' + '",
      "code": "if ( s1 [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "increment t",
      "code": "t ++ ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else if s1 [ 0 ] is equal to ' - '",
      "code": "else if ( s1 [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "decrease t",
      "code": "t -- ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "j = 0",
      "code": "j = 0 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "while s1 [ j ] - ' : ' is true increment j",
      "code": "while ( s1 [ j ] - ' : ' ) j ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set value of s to s + ( length of ( s1 + 1 ) - j ) * t",
      "code": "s = s + ( strlen ( s1 + 1 ) - j ) * t ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print s and a new line",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] [ 101 ] ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char (*)[101]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int s’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘size’ in ‘s1’, which is of non-class type ‘char [1030301]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s1 [ 101 ] [ 101 ] = { 0 } ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char (*)[101]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int i = 1 , j , k , s = 0 , s = 0 , t = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int s’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else if ( s1 [ 0 ] == \" - ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "s = s + ( ( s1 . length ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘s1’, which is of non-class type ‘char [1030301]’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] [ 101 ] ;",
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int s’"
    },
    {
      "mod_line": [
        1,
        2,
        11
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] [ 101 ] ;",
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int s’"
    },
    {
      "mod_line": [
        1,
        2,
        11,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] [ 101 ] ;",
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] [ 101 ] ;",
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        11
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] [ 101 ] ;",
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "if ( s1 [ 0 ] == \" + ' )",
        "s = s + ( ( s1 . length ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        2,
        11
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] [ 101 ] ;",
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "s = s + ( ( s1 . length ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int s’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] [ 101 ] ;",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char (*)[101]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        11,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] [ 101 ] ;",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] [ 101 ] ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        4,
        11
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] [ 101 ] ;",
        "if ( s1 [ 0 ] == \" + ' )",
        "s = s + ( ( s1 . length ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] [ 101 ] ;",
        "s = s + ( ( s1 . length ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char (*)[101]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int s’"
    },
    {
      "mod_line": [
        2,
        11,
        4
      ],
      "mod_code": [
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        11,
        4,
        1
      ],
      "mod_code": [
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )",
        "char s1 [ 101 ] [ 101 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        11,
        1
      ],
      "mod_code": [
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "char s1 [ 101 ] [ 101 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int s’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        4,
        1
      ],
      "mod_code": [
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "if ( s1 [ 0 ] == \" + ' )",
        "char s1 [ 101 ] [ 101 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        4,
        1,
        11
      ],
      "mod_code": [
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "if ( s1 [ 0 ] == \" + ' )",
        "char s1 [ 101 ] [ 101 ] = { 0 } ;",
        "s = s + ( ( s1 . length ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        4,
        11
      ],
      "mod_code": [
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "if ( s1 [ 0 ] == \" + ' )",
        "s = s + ( ( s1 . length ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "char s1 [ 101 ] [ 101 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int s’"
    },
    {
      "mod_line": [
        2,
        1,
        11
      ],
      "mod_code": [
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "char s1 [ 101 ] [ 101 ] = { 0 } ;",
        "s = s + ( ( s1 . length ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int s’"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "int i , j = 1 , k , s , s = 0 , t = 0 , t = 0 ;",
        "s = s + ( ( s1 . length ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int s’"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        4,
        1
      ],
      "mod_code": [
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )",
        "char s1 [ 101 ] [ 101 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "char s1 [ 101 ] [ 101 ] = { 0 } ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char (*)[101]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "if ( s1 [ 0 ] == \" + ' )",
        "char s1 [ 101 ] [ 101 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        1,
        11
      ],
      "mod_code": [
        "if ( s1 [ 0 ] == \" + ' )",
        "char s1 [ 101 ] [ 101 ] = { 0 } ;",
        "s = s + ( ( s1 . length ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "if ( s1 [ 0 ] == \" + ' )",
        "s = s + ( ( s1 . length ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "char s1 [ 101 ] [ 101 ] = { 0 } ;",
        "s = s + ( ( s1 . length ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char (*)[101]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}