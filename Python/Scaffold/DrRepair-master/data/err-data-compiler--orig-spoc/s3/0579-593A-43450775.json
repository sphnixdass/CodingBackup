{
  "meta": {
    "index": 579,
    "hitid": "3DTJ4WT8BD914GKY35RJIGSSXBMZEV",
    "workerid": "A1AYVATMT88U1W",
    "probid": "593A",
    "subid": "43450775"
  },
  "lines": [
    {
      "line": 0,
      "text": "let INF be a constant integer with INF = 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let maxn be a constant integer with maxn = 404",
      "code": "const int maxn = 404 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "mp = 2d array of integers with 200 rows and 200 columns respectively",
      "code": "int mp [ 200 ] [ 200 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "memset of mp , 0 , length of mp",
      "code": "memset ( mp , 0 , sizeof ( mp ) ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let ans be a integer with ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let n be a integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while n is decremented by 1",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "let len be a integer with len = length of len",
      "code": "int len = s . length ( ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "let flag1 , flag2 be integers",
      "code": "int flag1 , flag2 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "initialize the values of flag1 , flag2 to 0",
      "code": "flag1 = flag2 = 0 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for i = 0 to len exclusive",
      "code": "for ( int i = 0 ; i < len ; i ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if flag1 is equal to ( int ) s [ i ] or flag2 is equal to ( int ) s [ i ] , proceed to next",
      "code": "if ( flag1 == ( int ) s [ i ] || flag2 == ( int ) s [ i ] ) continue ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if not flag1",
      "code": "if ( ! flag1 )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "flag1 is equal to ( int ) s [ i ]",
      "code": "flag1 = ( int ) s [ i ] ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "proceed to next",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if not flag2",
      "code": "if ( ! flag2 )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "flag2 is equal to ( int ) s [ i ]",
      "code": "flag2 = ( int ) s [ i ] ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "proceed to next",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "initialize the values of flag1 , flag2 to 0",
      "code": "flag1 = flag2 = 0 ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "stop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if not flag1 , proceed to next",
      "code": "if ( ! flag1 ) continue ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if flag1 is greater than 0 and flag2 is greater than 0",
      "code": "if ( flag1 > 0 && flag2 > 0 )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "increment the value of mp [ flag1 ] [ flag2 ] by len",
      "code": "mp [ flag1 ] [ flag2 ] += len ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "ans is equal to maximum of ans and mp [ flag1 ] [ flag2 ]",
      "code": "ans = max ( ans , mp [ flag1 ] [ flag2 ] ) ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "increment the value of mp [ flag2 ] [ flag1 ] by len",
      "code": "mp [ flag2 ] [ flag1 ] += len ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "ans is equal to maximum of ans and mp [ flag2 ] [ flag1 ]",
      "code": "ans = max ( ans , mp [ flag2 ] [ flag1 ] ) ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "else if flag1 is greater than 0 and flag2 is equal to 0",
      "code": "else if ( flag1 > 0 && flag2 == 0 )",
      "indent": 2
    },
    {
      "line": 34,
      "text": "for i = 0 to 199 inclusive",
      "code": "for ( int i = 0 ; i <= 199 ; i ++ )",
      "indent": 3
    },
    {
      "line": 35,
      "text": "increment the value of mp [ flag1 ] [ i ] by len",
      "code": "mp [ flag1 ] [ i ] += len ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "ans is equal to maximum of ans and mp [ flag1 ] [ i ]",
      "code": "ans = max ( ans , mp [ flag1 ] [ i ] ) ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "if i is equal to flag1 , proceed to next",
      "code": "if ( i == flag1 ) continue ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "increment the value of mp [ i ] [ flag1 ] by len",
      "code": "mp [ i ] [ flag1 ] += len ;",
      "indent": 4
    },
    {
      "line": 39,
      "text": "ans is equal to maximum of ans and mp [ i ] [ flag1 ]",
      "code": "ans = max ( ans , mp [ i ] [ flag1 ] ) ;",
      "indent": 4
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 43,
      "text": "print ans and newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int len = len . length ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "int flag2 [ i ] = ( int ) s [ i ] ;"
      ],
      "err_line": 21,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int maxn = 0x3f3f3f3f ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘const int maxn’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long long mp [ 200 ] [ 200 ] ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘max(int&, long long int&)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long ans = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘max(long long int&, int&)’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int len = len . size ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘size’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( flag1 == ( int ) s [ i ] || flag2 == ( ( int ) s [ i ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "proceed = next ;"
      ],
      "err_line": 18,
      "err_msg": "‘proceed’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "proceed = next ;"
      ],
      "err_line": 22,
      "err_msg": "‘proceed’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 25,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "mp [ flag1 ] [ flag2 ] = mp [ flag1 ] ;"
      ],
      "err_line": 29,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "ans = max ( ans , mp [ flag1 ] [ flag2 ] ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "mp [ flag2 ] [ flag1 ] = mp [ flag2 ] ;"
      ],
      "err_line": 31,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "ans = max ( ans , mp [ flag2 ] [ flag1 ] ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "mp [ flag1 ] [ i ] = mp [ flag1 ] ;"
      ],
      "err_line": 35,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "mp [ i ] [ flag1 ] = mp [ i ] ;"
      ],
      "err_line": 38,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        13,
        21
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        13,
        21,
        24
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        13,
        21,
        18
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "proceed = next ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        13,
        21,
        36
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        13,
        24
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        13,
        24,
        18
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        13,
        24,
        36
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        13,
        18
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        13,
        18,
        36
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        13,
        36
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        21
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        21,
        24
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        21,
        24,
        18
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        21,
        24,
        36
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        21,
        18
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "proceed = next ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        21,
        18,
        36
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "proceed = next ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        21,
        36
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        24
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        24,
        18
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        24,
        18,
        36
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        24,
        36
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        18
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "proceed = next ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        18,
        36
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "proceed = next ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        36
      ],
      "mod_code": [
        "int len = len . length ( ) ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘length’ in ‘len’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        13,
        21
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21,
        24
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21,
        24,
        18
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21,
        24,
        36
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21,
        18
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "proceed = next ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21,
        18,
        36
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "proceed = next ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21,
        36
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        24
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        24,
        18
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        24,
        18,
        36
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        24,
        36
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18,
        36
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        36
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        24
      ],
      "mod_code": [
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        21,
        24,
        18
      ],
      "mod_code": [
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;"
      ],
      "err_line": 18,
      "err_msg": "‘proceed’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        24,
        18,
        36
      ],
      "mod_code": [
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 18,
      "err_msg": "‘proceed’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        24,
        36
      ],
      "mod_code": [
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 21,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        21,
        18
      ],
      "mod_code": [
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "proceed = next ;"
      ],
      "err_line": 18,
      "err_msg": "‘proceed’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        18,
        36
      ],
      "mod_code": [
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "proceed = next ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 18,
      "err_msg": "‘proceed’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        36
      ],
      "mod_code": [
        "int flag2 [ i ] = ( int ) s [ i ] ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 21,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        24,
        18
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;"
      ],
      "err_line": 18,
      "err_msg": "‘proceed’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        18,
        36
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "proceed = next ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 18,
      "err_msg": "‘proceed’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        36
      ],
      "mod_code": [
        "flag1 [ i ] = 0 , flag2 = 0 ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        18,
        36
      ],
      "mod_code": [
        "proceed = next ;",
        "ans += mp [ flag1 ] [ i ] ;"
      ],
      "err_line": 18,
      "err_msg": "‘proceed’ was not declared in this scope"
    }
  ]
}